Django

Day-1 https://youtu.be/54RcDK3vkUs
Day-2 https://youtu.be/60wvpODtPEU
Day-3 https://youtu.be/qQh7NxkY3gQ
Day-4 https://youtu.be/YYyfFYwkxOs

Web Application:

-->The applications which are provide services over the web are called as web application

Ex:
gmail, facebook,...........

2-components:
	1.Front End
	2.Back End

1). Front End:
Technologies:HTML, CSS, JS, Bootstrap,Jquery,DOM

HTML:
Hyper text markup language

web technology used to develop web applications

CSS:
Cascade Style sheets

Java Script:
HTML meant for static response
HTML+JS meant for dynamic response

Ex:1
to display "hello khit" response to the end user only HTML is enough

Ex:2
to display current server date and time to the end user

static response vs dynamic response
if the response is not varied from time to time and person to person then it considered as static response

Ex: 
login page of facebook and gmail

if response varied from time to time and person to person then its considered as dynamic response
Ex: inbox page of gmail and balance page of hdfc bank

2) Back End:
	3 components required
	1. Language (Python,Java and Dotnet,..)
	2. Framework (Django for python, Pyramid and flask,..)
	3. Database (Oracle,Mysql,Sqlite3)

Django

web application framework
to develop web apps
complete python code
freeware and opensource
DRY (Dont Repeat Yourself)
MVT (Modal View Template)
Presentation layer
template
Design(HTML)

Uname
pwd
login

view (Python program language) --> logic code (Business Layer)

Model (Database) --> Data Layer

RAD (Rapid Application Development)

some life cycles (SDLC)
waterfall, agile, prototype, RAD, bigbang, v model, fish model

in agile some drawbacks, so introduced devops

Project vs Application
project nothing but collection of applications (10 apps)
project2 (5 apps)


first django introduced and tested in lawrence journal world news in 2003
authors: adrian holovoty, simon willison
july 21st 2005 available to the public

https://www.djangoproject.com/
Django was invented to meet fast-moving newsroom deadlines, while satisfying the tough requirements of experienced web developers.

Rediculously fast
fully loaded
security
exceedingly scalable
incredibly versatile

Django
Basic UI:
	HTML,CSS,JS,..
Rest API
DataBase

Scenario in 2018
Python: 2Lpa
python+Django: 4Lpa
Python+Django+Rest API: 6Lpa

Ch1 Intro to web dev and Django
2. Django & atom installation and development of first web app
3. Django templates and static files
4. working with models and Databases
5. working with Django forms
6. Working with Django model forms
7. working with advanced template features
8. session management
9. user authentication and autherization
10. class based views and CRUD operations by using both CBVs and FBVs
11. Django ORM
12. Working with advanced model concepts
13. working with Django middleware
14. Deployment of our app in the live environment
15. real time project: blog app dev
16. introduction to web app dev by using flask

Rest API (Django Rest Framework)
1. intro to Django web framework
2. intro to REST and API
3. intro to restful webservices
4. Django Rest Framework(DRF)
5. DRK advantages and constriants
6. Difference between Django and Rest API
7. REST API pre-requisites
8. REST API configuration and installation
9. serialization and deserialization
10. JSON and XML
11. Action and Handler methods
12. Function based and class based views
13. API views
14. Mixins
	a. ListModeMixin
	b. CreateModeMixin
	c. UpdateModeMixin
	d. DestroyModeMixin
	e. RetrieveModeMixin
15. Generic Views
	a. ListAPIView
	b. CreateAPIView
	c. UpdateAPIView
	d. DeleteAPIView
	e. ListCreateAPIView
	f. ListCreateUpdateAPIView
	g. ListCreateUpdateDestroyAPIView
16. ViewSets
	a. ViewSets
	b. ModelViewSets
17. @apiview[]
18.Security
	a. Authentications
	b. Authorizations
19. Github

How to check python is available or not?
C:\Users\abc>py --version
Python 3.12.4

How to check Django is available or not?
C:\Users\abc>py -m django --version

C:\Users\abc>cd Desktop

C:\Users\abc\Desktop>cd django

C:\Users\abc\Desktop\django>py -m django --version
C:\Users\abc\AppData\Local\Programs\Python\Python312\python.exe: No module named django

C:\Users\abc\Desktop\django>py --version
Python 3.12.4

install Django by using pip
py -m pip install Django==5.1.4

C:\Users\abc\Desktop\django>py -m pip install Django==5.1.4
Collecting Django==5.1.4
  Downloading Django-5.1.4-py3-none-any.whl.metadata (4.2 kB)
Collecting asgiref<4,>=3.8.1 (from Django==5.1.4)
  Using cached asgiref-3.8.1-py3-none-any.whl.metadata (9.3 kB)
Collecting sqlparse>=0.3.1 (from Django==5.1.4)
  Downloading sqlparse-0.5.3-py3-none-any.whl.metadata (3.9 kB)
Collecting tzdata (from Django==5.1.4)
  Downloading tzdata-2024.2-py2.py3-none-any.whl.metadata (1.4 kB)
Downloading Django-5.1.4-py3-none-any.whl (8.3 MB)
   ----------------------------------- ---- 7.4/8.3 MB 103.5 kB/s eta 0:00:09
ERROR: Exception:
Traceback (most recent call last):
  File "C:\Users\abc\AppData\Local\Programs\Python\Python312\Lib\site-packages\pip\_vendor\urllib3\response.py", line 438, in _error_catcher

[notice] A new release of pip is available: 24.1.2 -> 24.3.1
[notice] To update, run: python.exe -m pip install --upgrade pip

C:\Users\abc\Desktop\django>py -m django --version
5.1.4

IDE's: Pycharm, Atom
Atom: after installing atom, open Atom go to file--> settings --> install --> in install packages search for terminal

for atom below to be installed
1. platform-ide-terminal
2. Python Autocompletion
3. atom-Django

for pycharm and vscode not just djnago enough

Django project vs Django application

Django project is a collection of applications and configurations which forms a full web app
Ex: banking project 

Django project is responsible to perform particular task in our entire web app
Ex: loan app, registration app, polling app

project= several application+configuration information

How to create Django project?
Django-admin line tool

window+R --> cmd
C:\Users\abc\Desktop> mkdir django
cd django

django-admin startproject firstproject (if it doesn't work use below command)
py -m djnago startproject firstproject

C:\Users\abc\Desktop\django>cd firstproject
C:\Users\abc\Desktop\django\firstproject>tree /f
Folder PATH listing
Volume serial number is 18B1-77A2
C:.
│   manage.py
│
└───firstproject
        asgi.py
        settings.py
        urls.py
        wsgi.py
        __init__.py
cd firstproject

py manage.py runserver (to start django dev server)

C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
December 18, 2024 - 13:09:23
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

server started as per above command, then
how to send first request
http://127.0.0.1:8000/ (fire the following link from browser)
use ctrl+c to exit the server

C:\Users\abc\Desktop\django\firstproject>tree /f
Folder PATH listing
Volume serial number is 18B1-77A2
C:.
│   db.sqlite3 (once we start the server then only we will get)
│   manage.py
│
└───firstproject
    │   asgi.py
    │   settings.py
    │   urls.py
    │   wsgi.py
    │   __init__.py
    │
    └───__pycache__
            settings.cpython-312.pyc
            urls.cpython-312.pyc
            wsgi.cpython-312.pyc
            __init__.cpython-312.pyc

once we start the server, a special database related files will be generated in our project folder structure that is db.sqlite3 

Roles of web server
web server will provide environment to run our web application
web server is responsible to receive the request and forward request to the corresponding web component basedon our url-pattern and to
provide response to the end user.

http://127.0.0.1:8000/admin/

Django framework is responsible to provide development server. even django framework provides on buit database sqlite 

now go to Atom IDE --> click on file --> open folder --> then select created django project
in that we will find

manage.py (most commonly use python script) and firstproject folder

in firstproject folder, we have modules as below

__init__.py (its a package, it contains nothing) --> in olden they use this way to make package
its a blank python script, because of this special name, djnago treated this folder as python package

asgi.py (Asynchronous Server Gateway Interface) new one

settings.py
in this file we have to specify all our project settings and configurations like installed apps, middleware, database config...

urls.py
here we have to store all our url-patterns of our project
for every view(web page) we have to define seperate url-pattern
end user can use url patterns to access our web page.

wsgi.py (Web Server Gateway Interface) older one

Creation of first web application

C:\Users\abc\Desktop\django\firstproject>py manage.py startapp firstapp

C:\Users\abc\Desktop\django\firstproject>cd firstapp

C:\Users\abc\Desktop\django\firstproject\firstapp>tree /f
Folder PATH listing
Volume serial number is 18B1-77A2
C:.
│   admin.py
│   apps.py
│   models.py
│   tests.py
│   views.py
│   __init__.py
│
└───migrations
        __init__.py

__init__.py (blank python  script file)

admin.py (we can register all mdel files in this)

apps.py (in this file we have to specify application specific configurations)

models.py (in this file we have to store application data models)

tests.py (in this we have to specify test functions to test our code )

views.py (in this file we have to save functions that handles request and return required response)

migrations folder (this directory stores database specific information related to models)

Note:
views.py and models.py

Activiteis required for application
activity1: Add our application in settings.py(in project level), then only django aware our application

settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp'
]

Activity2: create a view function for our application in views.py
view is responsible for preparing required response to the end user i.e, view contains business logic

ther are 2 types of views
1. function based view
2. class based view

for now we are using function based views

views.py (at app level)
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def display(request):
    s='<h1>welcome to my world</h1>'
    return HttpResponse(s)

Note: each view will be specified as one function in the views.py
in our example display is the name of the function which is nothing but one view
each view should take atleast one arguement(request)
each view should return HttpResponse object with required response
view can accept request as an input and perform required operation and provide proper response to the end user

self is a varible in a class not a keyword

Activity3: define url-pattern for our view in urls.py
this url-pattern will be used by end-user to send request for our view
the url patterns list routes to view

urls.py (at project level)
from django.contrib import admin
from django.urls import path
from firstapp import views 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('greet/', views.display),
]

whenever user sends request with url-pattern: greet then display() function will be exected and provide required response.

Activity4: 
now start the server and send request
C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
http://127.0.0.1:8000/greet/ -- (if everything goes fine, we will get the response, if not error..)

HttpResponse flow in Django Application:
whenever end user sending the request, first django development server will get that request
from the request, django will identify url-pattern by using urls.py, the corresponding view will be identified.
the request will be forwarded to the view. the corresponding function will be executed and provide required response to the end user

Ex: write django app to send request to display server time as response http://127.0.0.1:8000/time/
views.py
from django.shortcuts import render
from django.http import HttpResponse
import datetime

# Create your views here.
def time_info(request):
    time=datetime.datetime.now()
    msg='<h1>hello sai</h1>'
    msg+='<h2>now the server time is:'+str(time)+'</h2><hr>'
    return HttpResponse(msg)

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('time/', views.time_info),
]

http://127.0.0.1:8000/time/
===============================================
Django:

step1: create a project
django-admin startproject firstproject

step2: create an application inside project
cd firstproject
py mange.py startapp firstapp

step3: add app in settings.py

step4: define a function in views.py
FBV'S
CBV'S

py manage.py runserver
http://127.0.0.1:8000/
http://localhost:8000/

localhost=http://127.0.0.1:
port no: 8000/

port number can be changed but ip can't

py manage.py runserver 3333
http://127.0.0.1:3333/
stop server (ctrl+c)
again py manage.py runserver
now its port 8000

project
Application
Views

views.py (at app level)
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def display(request):
print(type(request))
    s='<h1>welcome to my world</h1>'
    return HttpResponse(s)

step5:
urls.py (at project level)
from django.contrib import admin
from django.urls import path
from firstapp import views 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('greet/', views.display),
]

step6: start server and send request
py manage.py runserver
http://127.0.0.1:8000/greet/ -- request, in this entire request greet/ is url
above request looks url(greet) in urls.py
this url pointing to views.display -- (here views.py is a module display is a function)

single application with multiple views

views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def hydjobinfo(request):
    s='<h1>hyderabad jobs information</h1>'
    return HttpResponse(s)

def bangjobinfo(request):
    s='<h1>banglore jobs information</h1>'
    return HttpResponse(s)

def punejobinfo(request):
    s='<h1>pune jobs information</h1>'
    return HttpResponse(s)

def chennaijobinfo(request):
    s='<h1>chennai jobs information</h1>'
    return HttpResponse(s)

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hyd/', views.hydjobinfo),
    path('bang/', views.bangjobinfo),
    path('pune/', views.punejobinfo),
    path('chennai/', views.chennaijobinfo),
]


http://127.0.0.1:8000/hyd/
http://127.0.0.1:8000/pune/
http://127.0.0.1:8000/bang/
http://127.0.0.1:8000/chennai/

Ex: if time <12 -- good morning
<16 -- good afternoon
<21 -- good evening
else good night

=========================
views.py
from django.shortcuts import render
from django.http import HttpResponse
import datetime

# Create your views here.
def datetime_info(request):
    date=datetime.datetime.now()
    h=int(date.strftime('%H'))
    msg='<h1>Hello sai '
    if h<12:
        msg+='Good Morning'
    elif h>12 and h<16: #and not required in elif can use directly h<16 instead h>12 and h<16
        msg+='Good afternoon'
    elif h>16 and h<21:
        msg+='Good evening'
    else:
        msg+='Good night'

    msg+='</h1><hr>'
    msg+='<h1>Now the server time is:'+str(date)+'</h1>'
    return HttpResponse(msg)

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views 

urlpatterns = [
    path('admin/', admin.site.urls),
    path('time/', views.datetime_info),
]

=========================
single project with multiple applications
C:\Users\abc\Desktop\django>django-admin startproject multiappProject
C:\Users\abc\Desktop\django>cd multiappProject
C:\Users\abc\Desktop\django\multiappProject>py manage.py startapp firstapp
C:\Users\abc\Desktop\django\multiappProject>py manage.py startapp secondapp

Add 2 apps in settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp'
    'secondapp'
]

Define function in both apps.

views.py in firstapp
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def wish(request):
    return HttpResponse('<h1>Hello this is from firstapp</h1>')

(Or)

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def wish1(request):
    return HttpResponse('<h1>Hello this is from firstapp</h1>')

views.py in secondapp

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def wish(request):
    return HttpResponse('<h1>Hello this is from secondapp</h1>')

(Or)

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def wish2(request):
    return HttpResponse('<h1>Hello this is from secondapp</h1>')

urls.py (aliasing)

from django.contrib import admin
from django.urls import path
from firstapp import views as v1
from secondapp import views as v2

urlpatterns = [
    path('admin/', admin.site.urls),
    path('wish/', v1.wish),
    path('wish1/', v2.wish),
]

(Or)

urls.py (directly calling function)

from django.contrib import admin
from django.urls import path
from firstapp.views import wish1
from secondapp.views import wish2

urlpatterns = [
    path('admin/', admin.site.urls),
    path('wish/', wish1),
    path('wish1/',wish2),
]


http://127.0.0.1:8000/wish/
http://127.0.0.1:8000/wish1/
===============================================
till now we are defining url at project level, inside project we have apps, in those apps, we have views.py in that we will define
functions so for each function, we need to define url for ex: if our project has 10 apps, each app contains 10 functions, then we
need to define 100 urls at project level

for ex: so far we worked for icici bank app project, if we get hdfc  project, we can reuse the apps of icici simply copy and use but
100 urls to be defined.

Project:
	10 Apps
		10 views.py
		10 functions
		100 urls

Defining url patterns in application level instead of project level

A django project can contains multiple applications and each application contains multiple views. Defining url-pattern for all views 
of all applications inside urls.py file of project creates maintenance problem and reduces re-usabilitry of application.

We can solve this problem by defining url-pattern at application level instead of project level. For every application we have to 
create a spearte urls.py file and we have to define all that application specific urls in that file. We have to link this application
level urls.py file to project level urls.py file by using include function

http://127.0.0.1:8000/pune --> browser --> project level(urls.py)

Step1: Create a project
django-admin startproject firstproject
cd firstproject
py manage.py startapp firstapp

add app in settings.py

define views.py

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def first_view(request):
    return HttpResponse('<h1>First View</h1>')

def second_view(request):
    return HttpResponse('<h1>Second View</h1>')

def third_view(request):
    return HttpResponse('<h1>Third View</h1>')

def fourth_view(request):
    return HttpResponse('<h1>Fourth View</h1>')

def fifth_view(request):
    return HttpResponse('<h1>Fifth View</h1>')

create a seperate urls.py file inside an application

from django.urls import path
from . import views

urlpatterns = [
    path('first/', views.first_view),
    path('second/', views.second_view),
    path('third/', views.third_view),
    path('fourth/', views.fourth_view),
    path('fifth/', views.fifth_view),
]

include this application level urls.py inside project level urls.py
project level urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', include('firstapp.urls')),
]

start the server and send requests

http://127.0.0.1:8000/firstapp/ first/
http://127.0.0.1:8000/firstapp/ second/
http://127.0.0.1:8000/firstapp/ third/
http://127.0.0.1:8000/firstapp/ fourth/
http://127.0.0.1:8000/firstapp/ fifth/

Note: 
we can see reusabilty of application in other projects just with 2 lines of addition

1. settings.py --> add application name
2. urls.py --> just add: path('firstapp/',include('firstapp.urls')),

Step1: Create a project
django-admin startproject firstproject
cd firstproject
py manage.py startapp firstapp

add app in settings.py

views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def exam_view(request):
    return HttpResponse('<h1>Exam View</h1>')

def attendance_view(request):
    return HttpResponse('<h1>Attendance View</h1>')

def fees_view(request):
    return HttpResponse('<h1>Fees View</h1>')

create urls.py file in application level
urls.py at app level

from django.urls import path
from . import views

urlpatterns = [
    path('exams/', views.exams_view),
    path('attendance/', views.attendance_view),
    path('fees/', views.fees_view),
]

add this one to project level by using include()
urls.py at project level

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', include('firstapp.urls')),
]

start server and send requests

http://127.0.0.1:8000/firstapp/ exams/
http://127.0.0.1:8000/firstapp/ attendance/
http://127.0.0.1:8000/firstapp/ fees/

create a new project
django-admin startproject secondproject
cd secondproject

copy firstapp from firstproject and paste it in secondproject, then include app level urls in project level urls.

=============================
Django Templates

it is not recommended to write html code inside python script(views.py file)
because:
it reduces readability because python code mixed with html code
no seperation of roles. python developers has to concentrate on both python code and html code
it doesn't promotes re-usability of code

we can overcome these problems by seperating html code into a seperate html file. this html file is nothing but template
from pytho file (views.py) we can use templates bassed on our requirement.

we have to write templates at project level only, we can use these templates in multiple application.

test.py
#pathlib--> module
#Path--> class name
from pathlib import Path
print(__file__)
fpath=Path(__file__)
print(type(fpath))
complete_path=fpath.resolve()
print(complete_path)
print(Path(__file__).resolve().parent)
print(Path(__file__).resolve().parent.parent)

C:\Users\abc\Desktop\django\test.py
<class 'pathlib.WindowsPath'>
C:\Users\abc\Desktop\django\test.py
C:\Users\abc\Desktop\django
C:\Users\abc\Desktop

the main advantage of this approach is we are not required to hard code system specific paths(locations) in python script

view meant for business logic
template meant for presentation logic/ frontend

MVC design pattern/architecture
M-Model(Business logic)
v-View(presentation logic)
c-controller(coordination)

MVT Design pattern/architecture
M-Model--> Databases
V-View--> Business logic(Python files)
T-Template (Presentation Layer)

steps to develop template based application
step1: create a project
djnago-admin startproject firstproject

step2: create an application 
py manage.py startapp firstapp

step3: add app in settings.py
step4: create a folder 'templates' inside main project folder

in that templates folder create a seperate folder named with testapp to hold that particular application specific templates

step5: add templates folder to settings.py file so that django can aware of our project
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
]
it is not recommended to hardcode system specific location in settings.py file to overcome this problem we can generate template 
directory path programatically as:

BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR=BASE_DIR/'templates'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
]

step6: create html file inside templates/testapp folder, this html file nothing but template 
wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style media="screen">
        h1{
            color:red
        }

        h2{
            color: blue;
        }
    </style>
</head>
<body>
    <h1>welcome to sai's world</h1>
    <h2>django template</h2>
</body>
</html>

views.py(C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.
def wish(request):
    return render(request,'testapp/wish.html')

urls.py(C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', views.wish),
]

__name__ --> __main__, module name
__dict__

__add__()
__sub__()
__eq__()  

is and == operator?
str() and repr()?
lisdir() and walk()?
overloading and overriding?
constructor and method?
how to define interface in python?
what is the use of logging module?
advantage of assert statements?
=============================
Template Tags

from python program (views.py) we can inject dynamic content to the template file by using template tag

template tag also known as template varibles
takes special care about template tag syntax, its not python syntax and not html syntax it is a django syntax.

Template tag syntax for inserting text data: {{insert_data}} 
this template tag we have to place inside template file(i.e, html file) and we have to provide insert_data value from python file
views.py

Application to send date and time from views.py to template file

aliasing vs cloning
shallow cloning/copy and deep cloning/copy

wish.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style media="screen">
        h1{
            color:red
        }

        h2{
            color: blue;
        }
    </style>
</head>
<body>
    <h1>welcome to sai's world</h1>
    <h2>now the server time is:{{insert_date}}</h2>
</body>
</html>

views.py

from django.shortcuts import render
from django.http import HttpResponse
import datetime

# Create your views here.
def wish(request):
    date=datetime.datetime.now()
    my_dict={'insert_date':date}
    return render(request,'testapp/wish.html',context=my_dict)

or

def wish(request):
    date=datetime.datetime.now()
    my_dict={'insert_date':date}
    return render(request,'testapp/wish.html',my_dict)

or

def wish(request):
    date=datetime.datetime.now()
    return render(request,'testapp/wish.html',{'insert_date':date})
 
to display date and time and student info

views.py
from django.shortcuts import render
from django.http import HttpResponse
import datetime

# Create your views here.
def wish(request):
    date=datetime.datetime.now()
    name='sai'
    marks=65
    rollno=46
    my_dict={'insert_date':date,'name':name,'marks':marks,'rollno':rollno}
    return render(request,'testapp/wish.html',context=my_dict)

wish.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style media="screen">
        h1{
            color:red
        }

        h2{
            color: blue;
        }
    </style>
</head>
<body>
    <h1>welcome to sai's world</h1>
    <h2>now the server time is:{{insert_date}}</h2>
    <ol>
        <li>Name:{{name}}</li>
        <li>Marks:{{marks}}</li>
        <li>Roll No:{{rollno}}</li>
    </ol>
</body>
</html>

Application
End user: Hello friend, the current server time and date
Course Information:
Name: Django
Prerequisite:Python

Good to get job very easily
learning is also very easy
you can claim 3 to 4 years of experience
it is very very helpful for freshers

S.No	name	Feedback
101	Sai	verybad
102	virat	good
103	pant	average
=====================
wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <style>
        body{
            background-color: rgb(110, 218, 110);
            color: white;
        }
    </style>
</head>
<body>
    <h1>Hello sai, the server time is:{{time}}</h1>
    <h2>Course Name:{{name}}</h2>
    <h2>Prerequisite:{{Prerequisite}}</h2>
    <ul>
        <li>Good to get job very easily</li>
        <li>learning is also very easy</li>
        <li>you can claim 3 to 4 years of experience</li>
        <li>it is very very helpful for freshers</li>
    </ul>
    
    <table border="3">
        <thead>
            <th>S.No</th>
            <th>Name</th>
            <th>Feedback</th>
        </thead>
        
        <tr>
            <td>101</td>
            <td>sai</td>
            <td>very bad</td>
        </tr>
        
        <tr>
            <td>102</td>
            <td>kohli</td>
            <td>good</td>
        </tr>
        
        <tr>
            <td>103</td>
            <td>mahi</td>
            <td>avg</td>
        </tr>
    </table>
</body>
</html>

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py) 
from django.shortcuts import render
import datetime

# Create your views here.
def info_view(request):
    time=datetime.datetime.now()
    name='Django'
    prerequisite='Python'
    my_dict={'time':time,'name':name,'prerequisite':prerequisite}
    return render(request,'testapp/wish.html',my_dict)

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', views.info_view),
]

wish.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <style>
        body{
            background-color: rgb(92, 216, 92);
            color: white;
        }
    </style>
</head>
<body>
    <h1>Hello Friend, {{wish}}</h1>
    <h2>now the server time is:{{time}}</h2>
    <h1>Astrology info for you:{{msg}}</h1>
    <h2>very soon you are going to get marry with:{{name}}</h2>
</body>
</html>

views.py
from django.shortcuts import render
import datetime
import random

# Create your views here.
def result_view(request):
    msg_list=[
        'golden days ahead',
        'Better to use phone in class room to get more subject',
        'Tomorrow will be the best day of your life',
        'Tomorrow is the perfect day to propose ur GF',
        'very soon you will get job'
    ]
    name_list=['sai','kohli','kareena','deepika','samantha','alia']
    time=datetime.datetime.now()
    h=int(time.strftime('%H'))

    if h<12:
        s='Morning'

    elif h<16:
        s='Afternoon'

    elif h<21:
        s='Evening'

    else:
        s='Night'

    name=random.choice(name_list)
    msg=random.choice(msg_list)
    my_dict={'time':time,'name':name,'msg':msg,'wish':s}
    return render(request,'testapp/wish.html',my_dict)

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', views.result_view),
]


Ex:
a=[0,1,2,3]
for a[-1] in a:
	print(a[-1])

o/p: 0 1 2 2

Ex: 
n=6
while n>0:
	print(n,end='')
	n-=2 if n%3 == 0 else 1

o/p: 6431

s=input('Enter main string:') #abbabcbdbabacda
subs=input('Enter substring:')#z
flag=False
pos=-1
n=len(s)
while True:
    pos=s.find(subs,pos+1,n)#-1
    if pos==-1:
        break
    print('Found at position:',pos)
    flag==True
if flag==False:
    print('Not found')

C:\Users\abc\Desktop\django>python test.py
Enter main string:abbabcbdbabacda
Enter substring:z
Not found

C:\Users\abc\Desktop\django>python test.py
Enter main string:abbabcbdbabacda
Enter substring:a
Found at position: 0
Found at position: 3
Found at position: 9
Found at position: 11
Found at position: 14
Not found

what is the use of setter method and getter method?
Describe about composition vs aggregation
HAS-A relationship vs IS-A relationship?
How to declare a variable as public, private and protected?
types of variables in a class
types of methods in a class 
=====================
HTML(hypertext markup lanuage) Basics

html is web technology which is used to develop web applications. without using html we can't build web application

structure of html page
Head
Body

Head contains meta data like title of page, keywords, css file and java script files information we have to specify in the head part 
only

Body contains actual content

<!DOCTYPE html> //to indicate that it is an html page
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="Author" content="">
    <meta name="Keywords" content="">
    <meta name="Description" contetnt="">
    <title>Document</title>
</head>
<body>
    
</body>
</html>

<head>
meta data like keywords, author, title ..
css files information
js files information
</head>

<body>
Actual data    
</body>

HTML Comments

# for python comment
// is java single line 
<!--comment in html-->

<title> tag
<title>Welcome to saibook</title>

Heading Tags:
<h1>Heading1</h1>
<h2>Heading2</h2>
<h3>Heading3</h3>
<h4>Heading4</h4>
<h5>Heading5</h5>
<h6>Heading6</h6>

Paragraph Tag<p>
<p>
this is paragraph1
this is paragraph2
this is paragraph3
</p>

total data will come in a single line because we are using only one <p> tag

cae2:
<p>this is paragraph1</p>
<p>this is paragraph2</p>
<p>this is paragraph3</p>

case3:
<p>this is paragraph1</p><p>this is paragraph2</p><p>this is paragraph3</p>

Bold and Itallic:
<p><b><i>this is paragraph</i></b></p> -- these are old (legacy tags) and not recommended to use
<p><strong><em>this is paragraph</em></strong></p>

HTML Lists:
Ordered list(ol)
1.sai
2.virat
3.mahi

unordered lisr(ul)
sai
kohli
mahi

body>
    <h1>available players</h1>
    <ol>
        <li>sai</li>
        <li>kohli</li>
        <li>mahi</li>
    </ol>
</body>

unordered list

<body>
    <h1>available players</h1>
    <ul>
        <li>sai</li>
        <li>kohli</li>
        <li>mahi</li>
    </ul>
</body>

nested list
<body>
    <h1>available players</h1>
    <ol>
        <li>sai</li>
        <li>kohli</li>
        <li>mahi</li>
        <ul>
            <li>batting</li>
            <li>bowling</li>
        </ul>
    </ol>
</body>

attributes
HTML attributes will provide extra information to html page
Top insert an image in the html page, in <img> tag src attribute specifies location of the image to the <img> tag

setting image inside html

<img src="sangamsoftsol.jpg" alt"image will be uploaded soon">
<img src="https://media.gettyimages.com/id/1921103033/photo/hollywood-california-leonardo-dicaprio-attends-the-academy-of-motion-picture-arts-sciences.jpg?s=612x612&w=0&k=20&c=rMimL1i1W8zVtb0qOOlDR60MDtfedZsBDaRv4aElUvc=">

src means source where we have to specify the image source(complete location)
we can take image address from the google also

alt means alternate. if image is missing then broken link image will be displayed, in this case we need to display some meaningful
text information then we should go for alt attribute

we have to open the tag and we are not required to close the tag, such type of tags are called as self closing tags

Ex: <img> tag

How to create hyperlinks
<a href="thankyou.html">Register</a>
<a href="http://facebook.com">Facebook</a>

sangamfood.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
</head>
<body>
    <h1>welcome to sangam food paradise</h1>
    <img src="abc.jpg" alt="image will be uploaded soon">
    <p>we are specialized in pickles
        we have ghee pickle rice, ghee charu rice
    </p>
    <h2>our brand ambassodor is: Sai Charan</h2>
    <img src="sai.jpg" alt="image will be uploaded soon">
    <h3>Our offered menu:</h3>
    <ol>
        <li>hot rice with gongoora ghee</li>
        <li>mango pickle with hot rice and ghee</li>
        <li>madupu karam ghee rice</li>
    </ol>
    <h1>offers of the day buy any combo get any combo free</h1>
    <a href="youtube.com">Register</a>
    <a href="http://facebook.com"></a>
</body>
</html>

walrous operator (:=)

def f(a,*):pass
def f(/,a)
f strings
boiler plate code

types of arguments in functions: positional,keyword,variable,default

MRO (Method resolution algorithm)
DLR process (Depth first, left parent, right parent)

parent of A is Object
A parent of B and C
D is child of B and C

depth first means D, left parent B, right parent C, A and Object

class A:pass
class B(A):pass
class C(A):pass
class D(B,C): pass
print(C.mro())
===============================================
Table creation

we can use:
	<table> to create a table
	<thead> to specify head row
	<th> to specify column data in head row(column name)
	<tr> to insert row in the table
	<td> to specify column data in the row or column

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
</head>
<body>
    <h1>sangam softsol employees data></></h1>
    <table border="2">
        <thead>
            <th>ENO</th>
            <th>ENAME</th>
            <th>ESAL</th>
            <th>EADDR</th>
            <tr>
                <td>101</td>
                <td>Sai</td>
                <td>200000</td>
                <td>Guntur</td>
            </tr>
        </thead>
    </table>
</body>
</html>

style.css
h1
{
color:red;
}

div and span tags

we can use div and span tags to group related tags into a single unit
in general we can use these tags with css
div means division

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div>
    <h1>Sangam Softsol is an it solution provider</h1>
    <h2>Training minds and transforming business</h2>
    <h3>migrate your business from offline to online</h3>
    </div>
</body>
</html>

style.css

div
{
color:red
}

<span> tag is exactly same as division tag except that it is inline. i.e to define group within the line of text we can use <span> tag

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div>
    <h1>Sangam Softsol <span>is an it solution provider</span></h1>
</body>
</html>

style.css

span{
color:blue 
}

<div> will work for group of lines as <span> will work within the line

note: <div> and <span> tags are vey helpful for styling html. hence they will always work with css only

creation of HTML Forms
as part of web application development, we have to develop several forms like login form, registration form etc, ..

we can create HTML forms by using <form> tag

<form class="" action="index.html" method="post"></form>

within the form we have to collect end user input
to collect end user input, we have to use <input>tag

syntax:
<input type="" name="" value="">

<body>
    <h1>Student Registration form</h1>
    <form action="thankyou.html">
        Name:<input type="text" name="" value="">
        <input type="submit" name="" value="Login">
    </form>
</body>

type attribute can be used to specify the type of input and user has to provide the different types are: text, email, password, color,
submit, checkbox, radio etc..

Name:<input type="text" name="" value="">
Name:<input type="password" name="" value="">
Name:<input type="email" name="" value="">
Name:<input type="color" name="" value="">
Name:<input type="radio" name="" value="">
Name:<input type="checkbox" name="" value="">

Name:<input type="text" name="" value="Enter User Name">
value attribute represents default value in the form 

name attribute represents name of the input tag, by using this name, in the next target page we can access end user provided input
values

<body>
    <h1>Student Registration form</h1>
    <form action="thankyou.html">
        Name:<input type="text" name="uname" value="Enter User name">
	Password:<input type="text" name="pwd" value="Enter password">
        <input type="submit" name="" value="Login">
    </form>
</body>

Note:
T provide default value it is highly recommended to use placeholder attribute because end user is not required to delete default value
while entering data

Name:<input type="text" name="uname" value="Enter User name">
Name1:<input type="text" name="uname" placeholder="Enter User name">

required attribute: if end user compulsory should required to provide input values then we should go for 'required' attribute
Name1:<input type="text" name="uname" placeholder="Enter User name" required>

action attribute: once we fill the form and click submit, then to which page it will go is decided by action attribute
the value of action attribute can be either local resource or web URL

Ex:
<form action="thankyou.html"> 

https://pythontutor.com/
===============================================
Creation of labels for HTML elements
we can define label text for our html elements like radio buttons,text boxes etc. by using <label> tag

syntax: <label for="name">Enter Name</label>

Ex: 
<p>Enter Name</p>
<input type="text" name="" placeholder="Enter Name">

check the results
in this case there is no relatio between text box and data

to link data to text box, we have to use <label> tag
<body>
        <label for="name">Enter Name</label>
        <input type="text" id="name" name="" placeholder="Enter Name">
</body>

the value of for attribute should be same as id attribute value

<form action="thankyou.html" method="GET"> -- GET/POST

get and post:
in get method, the data will be appended to the url part and send to the next page, in post method encapsulated inside the request 
body and not visible in the url

<body>
    <h1>Student Registration form</h1>
    <form action="thankyou.html" method="GET">
        <label for="name">Enter Name</label>
        <input type="text" id="name" name="" placeholder="Enter Password">
        <label for="pwd">Enter Password</label>
        <input type="password" id="pwd" name="" placeholder="Enter Password">
        <input type="submit" name="" value="Login">
    </form>
</body>

how to create multiple submit buttons in a page

<body>
    <h1>Student Registration form</h1>
    <form action="thankyou.html" method="GET">
        Name:<input type="text" name="username" placeholder="Enter Name" required><br>
        <input type="submit" name="" value="ADD"><br>
        <input type="submit" name="" value="REMOVE"><br>
        <input type="submit" name="" value="UPDATE">
    </form>
</body>

action=request.getParameter('action')
if action=='ADD':
	perform add functionality
elif action == 'UPDATE':
	perform update functionality
elif action == 'REMOVE':
	perform remove functionality

how to implement radio button
<body>
    <h3>Are you graduate?</h3>
    <label for="yes">Yes</label>
    <input type="radio" id="yes" name="graduate"><br>
    <label for="no">No</label>
    <input type="radio" id="no" name="graduate">
</body>

several options are available but we have to select only one option: Radio Button

<body>
    <h3>Are you graduate?</h3>
    <input type="radio" name="q1" value="a">A<br>
    <input type="radio" name="q1" value="a">B<br>
    <input type="radio" name="q1" value="a">C<br>
    <input type="radio" name="q1" value="a">D
</body>

implementing checkboxes

<body>
    <h3>Are you graduate?</h3>
    <input type="checkbox" name="branch" value="me">MECH<br>
    <input type="checkbox" name="branch" value="civ">CIVIL<br>
    <input type="checkbox" name="branch" value="ece">ECE<br>
    <input type="checkbox" name="branch" value="eee">EEE
</body>

choose your branch
how to implement dropdown/select box

<body>
    <h3>choose your branch</h3>
    <select name="branch" multiple>
        <option value="ec">electronics</option>
        <option value="ee">electrical</option>
        <option value="me">mechanical</option>
        <option value="cs">computer science</option>
    </select>    
</body>

Rdio vs checkbox vs selectbox
if few options available and we have to choose only one option: radio
if few options are available and we can select any number of options: checkbox
if very huge no.of options available and we can select any no.of options: dropdown/selectbox

Aliasing

l1=[10,20,30,40]
l2=l1 #Aliasing
l1[0]=100
print('l1:'l1)
print('l2:'l2)

Cloning

l1=[10,20,30,40]
l2=l1.copy() #Aliasing
l1[0]=100
print('l1:'l1)
print('l2:'l2)

Another way to create cloning copy

l1=[10,20,30,40]
l2=l1[:] #Aliasing
l1[0]=100
print('l1:'l1)
print('l2:'l2)

shallow cloning
import copy
l1=[10,20,[30,40],50]
l2=copy.copy(l1)
l2[2][0]=333
print('l1:',l1)
print('l2:',l2)

Deep cloning
import copy
l1=[10,20,[30,40],50]
l2=copy.deepcopy(l1)
l2[2][0]=333
print('l1:',l1)
print('l2:',l2)

microsoft python certification exam (98-381)

consider the following python code:

age=0
minor=False
name='Sai'

the type of age, minor and name variables respectively: int, bool, str

consider the following python code:
 weight=62.4
zip='80098'
value=+23E4 

the type of weight, zip and value variables respectively: float, str, float

we are writing a python program to read two int values from the keyboard and print the sum
x=input('Enter first number')
y=input('Enter second number')
#Line-1

which of the following code we have to write at Line-1 to print sum of given numbers? print('The Result:'+str(int(x)+int(y)))

Q4. Consider the code:
start=input('How old were you at the time of joining?')
end=input('How old are you today?')

Which of the following code is valid to print Congratulations message?

print('Congratulations on + str(int(end)-int(start))+' Years of Service!')

You are writing a Python program. You required to handle data types properly. Consider the code segment:
a = 10 + 20
b='10'+'20'
c='10'*3
Identify the types of a,b and c?

a is of int type, b is of str type and c is of str type

You are developing a python application for your company.

A list named employees contains 600 employee names, the last 3 being company management. You need to slice employees to display all 
employees excluding management. Which two code segments we should use?

employees[:-3]
employees[0:-3]

you are developing a python application for your company named employees contains 500 employee names, the last 3 being company 
management. Which of the following represents only management employees.

employees[497:]
employees[-3:]
employees[497:500]

you are developing a python application for your company
A list named employees contains 500 employee names.

in which case we will get the index error while accessing employee data
employees[500]

pickling and unpickling of objects
==============================================
get and post:
in get method, the data will be appended to the url and send to the next page
in post method, the data will be encapsulated inside request body and not visible in the body
when using get: file:///C:/Users/abc/Desktop/django/firstproject/templates/testapp/thankyou.html?uname=sai
when using post: file:///C:/Users/abc/Desktop/django/firstproject/templates/testapp/thankyou.html

file:///C:/Users/abc/Desktop/django/firstproject/templates/testapp/thankyou.html?username=sai&action=ADD
file:///C:/Users/abc/Desktop/django/firstproject/templates/testapp/thankyou.html?username=virat&action=REMOVE

Text Area:
<body>    
    <form action="thankyou.html" method="GET">
        <h1>Enter Feedback</h1>
        <textarea name="feedback" rows="8" cols="80"></textarea><br>
        <input type="submit" value="submit">
    </form>
</body>

HTML validations
required
email
min and max length
password min contain 8 characters

case1: value should contain min 5 char and max 10 char
[0-9]
[a-z]
[A-Z]
[a-zA-Z]
[0-9a-zA-Z]

<body>    
    <form action="thankyou.html" method="POST">
        Enter Value:<input type="text" name="val" value="" pattern=".{5,10}"
        title="min 5 char and max 10 char">
        <input type="submit" name="" value="submit">
    </form>
</body>

case2: the value should contain only digits, exactly 10 digits only
pattern:[0-9]{10}

<body>    
    <form action="thankyou.html" method="POST">
        Enter Value:<input type="text" name="val" value="" pattern="[0-9]{10}"
        title="invalid value">
        <input type="submit" name="" value="submit">
    </form>
</body>

case3: the value contains only digits, exactly 10 only but first digit should be either 6 or 7 or 8 or 9
pattern[6-9][0-9]{9}
pattern2: [6-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]

case4: password atlest 8 characters must be required
the first character should be uppercase alphabet, remaining any alphanumeric

pattern: [A-Z][a-zA-Z0-9]{7}[a-zA-Z0-9]*

<body>    
    <form action="thankyou.html" method="POST">
        Enter Value:<input type="text" name="val" value="" pattern="[A-Z][a-zA-Z0-9]{7}[a-zA-Z0-9]*"
        title="invalid value">
        <input type="submit" name="" value="submit">
    </form>
</body>

we can put first letter uppercase and remaining 2-lettes are small and last character is special symbol

pattern: [A-Z][a-z]{2}\W

how to include spaces in HTML
&nbsp to add a single space
&ensp to add 2 spaces
&emsp to add 4 spaces
<hr>
<br>

Cascading style sheets (css)

the main objective of css to add styles to HTML
css describes how html elements are displayed on a page

style.css <link> tag

3 ways
in line
by using <style> tag
by using css files

in line:
<body>    
    <h1 style="color: green;">this is sangam softsol</h1>
    <h1 style="color: orange;">this is sangam softsol</h1>
    <h1>this is sangam softsol</h1>
</body>

define style at tag level is not recommended bcoz it increases complexity as every html page contains 1000's of pages

by using style tag
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <style>
        h1{
            color: red;
        }
    </style>
</head>
<body>    
    <h1>this is sangam softsol</h1>
    <h1>this is sangam softsol</h1>
    <h1>this is sangam softsol</h1>
</body>

this way of defining style is not recommended because it is applicable for current page but not for remaining pages

https://getbootstrap.com
https://getbootstrap.com/docs/5.3/components/buttons/#button-tags
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
to get the style into our file, we need to use this file

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

</head>
<body>    
    <button type="button" class="btn btn-primary">Primary</button>
    <button type="button" class="btn btn-success">Success</button>
    <button type="button" class="btn btn-danger">Danger</button>
</body>
</html> 

By using .css file

tagname{
property:value;
} 

style.css
h1{
    color: green;
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>    
    <h1>This is sangam group of company</h1>
    <h1>This is sangam group of company</h1>
    <h1>This is sangam group of company</h1>
</body>
</html>

3 types of overloading

operator overloading
method overloading
constructor overloading

operator overloading
class Book:
    def __init__(self,pages):
        self.page=pages
    def __add__(self,other):
        print('add method calling' )
        return self.pages+other.pages
b1=Book(100)
b2=Book(200)
print(10+20)
print('10'+'20')
print(b1+b2)

overriding 2 types
method overriding
constructor overriding

various possible ways to specify a color
background-color or background both are same

style.css
h1{
    color: green;
}

body{
    background: black;    
    background-color: yellow;
    
}

way2:
color:rgb

h1{
    color: green;
}

body{
    background: rgb(255, 0, 0);    
    background-color: rgb(0, 255, 0);
    
}

rgb(0,0,0) -- black
rgb(255,0,0) -- red
rgb(255,255,255) -- white


universal colors
google color picker: https://g.co/kgs/3X1tRAr

h1{
    color: white;
}

body{
    background: rgb(255, 0, 0);    
    background-color: rgb(50, 168, 82);
    
}

https://rgbacolorpicker.com/

h1{
    color: white;
}

body{
    background: rgb(255, 0, 0);    
    background-color: rgba(58, 183, 106, 0.7);
    
}

by using 6-digit hexa decimal code

h1{
    color: white;
}

body{
    background: rgb(255, 0, 0);    
    background-color: #32a852;
    
}

only h1 not for body
h1{
color:red;
background:black;
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>    
    <h1>This is sangam group of company</h1>
    <h1>This is sangam group of company</h1>
    <h1>This is sangam group of company</h1>
</body>

h1{
color:red;
background:black;
}
p{
color:white;
background: green;
}

How to set background image
h1{
    color: white;
}

body{
    background: url();
    background-color: rgba(58, 183, 106, 0.7);
    background-repeat: no-repeat;
    background-size: cover;
    /* background-position: center; */
    /* image-rendering: crisp-edges; */
    
}

how to set the border
h1{
color:red;
border-color:blue;
border-width:thick;
border-style:solid
}

how to set border for images

img{
color:red;
border-color:red;
border-width:20px;
border-style:dotted;
}

shortcut way
img{
border:20px dashed blue
border:red groove 20px
}

Basic CSS Selectors
element selector
id selector
class selector

element selectors
select all instance of given element i.e, style is applicable for every tag of the specified type

h1{
color:red;
}

ID Selector:
select an element with the given id, but with in the HTML page ID is always unique

html
<h1 id='specialh1'>Sangam Softsol</h1>

css:
#specialh1{
color:blue;
}

class selector
select all elements with the given class

.specialh1{
color:green;
}

djnago 
working with static files

upto this we injected normal text data into template by using templates tags.

but sometimes our requirement is to insert static files like images, css files etc inside html files

process to include static files inside template

static
	images
		sangamsoftsol.jpg
	css
		style.css

create folder with name static inside main project folder. its exactly same as templates folder
in that static folder create images folder to place our image files
add static directory path in settings.py file, so that django can aware of our images

create a project
win+r -- cmd
cd desktop/django
djnago-admin startproject firstproject
cd firstproject 
py manage.py startapp firstapp

add app in settings.py (C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py)

create folder images in C:\Users\abc\Desktop\django\firstproject\static

STATIC_DIR=BASE_DIR/'static'

STATIC_URL='/static/'
STATICFILES_DIRS=[STATIC_DIR]

py manage.py runserver 

http://127.0.0.1:8000/static/images/pic.jpg

use template tag to insert an image
at the begining of html page <!DOCTYPE html>, we have to include the following tag
{%load static%}

TEMPLATE_DIR=BASE_DIR/'templates'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],

just we have convey the django to load all static files

we have to include image files:

wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Foods</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>    
    <img src="{% static 'images/pic.jpg' %}" alt="">
</body>
</html>

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render

# Create your views here
def img_view(request):
    return render(request,'testapp/wish.html')

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', views.img_view),
]

http://127.0.0.1:8000/firstapp/

Describe daemon and non daemon thread?
what is diff between Lock and RLock meachanism?
diff between semaphore and boundedsemaphore?
what are the ways to provide inter thread communication? Event,condition and queue
================================================
wish.html
<body>    
    <h1>Sangam softsol, will provide solutions to your business</h1>
    <h2>services</h2>
    <ul>
        <li>{{b1}}</li>
        <li>{{b2}}</li>
        <li>{{b3}}</li>
    </ul>
    <img src="{% static 'images/sangamsoft.jpg' %}" alt="">
</body>

views.py business logic will be written in this
from django.shortcuts import render

# Create your views here
def service_view(request):
    services={'b1':'webhosting', 'b2':'Database', 'b3':'DevOps'}
    return render(request,'testapp/wish.html',context=services)

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('firstapp/', views.service_view), #instead firstapp/ we can use any name as per our service
]

http://127.0.0.1:8000/firstapp/

what is the use of eval( function)
argv variable (to store commandline arguements its list type, available in sys module), for ex: py test.py 10 20 30 40

Sangam News portal application
same common 3 steps like create project, app
add app in settings.py

create testapp, templates folders and html file
TEMPLATE_DIR=BASE_DIR/'templates'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],

create a static folder
STATIC_DIR=BASE_DIR/'static'

STATIC_URL='/static/'
STATICFILES_DIRS=[STATIC_DIR]

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render

# Create your views here
def news_view(request):
    return render(request,'testapp/news.html')

def movies_info(request):
    head_msg='movies information'
    sub_msg1='jailer was super hit'
    sub_msg2='planning for aashiqui3 with prabhas and sradha'
    sub_msg3='enjoy the festival'
    type='movies'
    my_dict={'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/wish.html',my_dict)

def sports_info(request):
    head_msg='sports information'
    sub_msg1='IND vs IRE matches going on..'
    sub_msg2='Mr. Sai will become bcci chairman'
    sub_msg3='Dhoni retire'
    type='sports'
    my_dict={'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/wish.html',my_dict)

def politics_info(request):
    head_msg='Politics Information'
    sub_msg1='who is next pm..'
    sub_msg2='Mr. Sai will become next ap cm'
    sub_msg3='kejriwal bail petition has been rejected'
    type='politics'
    my_dict={'head_msg':head_msg,'sub_msg1':sub_msg1,'sub_msg2':sub_msg2,'sub_msg3':sub_msg3,'type':type}
    return render(request,'testapp/wish.html',my_dict)

news.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\news.html) -- its like index.html, from here navigation takes
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam News</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>    
    <h1>Welcome to Sangam News portal</h1>
    <img src="{% static 'images/sangamsoft.jpg' %}" alt="">
    <ul>
        <li><a href="movies/">Movies Information</a></li>
        <li><a href="sports/">Sports Information</a></li>
        <li><a href="politics/">Politics Information</a></li>
    </ul>
</body>
</html>

wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam News</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>    
    <h1>{{head_msg}}</h1>
    <ul>
        <li>{{sub_msg1}}</li>
        <li>{{sub_msg2}}</li>
        <li>{{sub_msg3}}</li>
    </ul>
    {% if type == 'movies' %}
    <img src="{% static 'images/1.jpg' %}">
    <img src="{% static 'images/2.jpg' %}">
    <img src="{% static 'images/3.jpg' %}">
    {% elif type == 'sports' %}
    <img src="{% static 'images/4.jpg' %}">
    <img src="{% static 'images/5.jpg' %}">
    <img src="{% static 'images/6.jpg' %}">
    {% elif type == 'politics' %}
    <img src="{% static 'images/7.jpg' %}">
    <img src="{% static 'images/8.jpg' %}">
    <img src="{% static 'images/9.jpg' %}">
    {% endif %}
</body>
</html>

style.css (C:\Users\abc\Desktop\django\firstproject\static\css\style.css)
body{
    
    background: white;
    color: rgba(31,180,161,255);
    text-align: center;
        
}

ul{
    font-size: 20px;
    text-align: left;
}

img{
    height: 250px;
    width: 300px;
    margin: 25px;
    border: 5px solid rgba(31,180,161,255);
}

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)

from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.news_view),
    path('movies/', views.movies_info),
    path('sports/', views.sports_info),
    path('politics/', views.politics_info),
]

cd desktop/djnago/firstproject
py manage.py runserver

http://127.0.0.1:8000/

end user providing req to django server with the help of url 
flow of execution -- http://127.0.0.1:8000/ once we give request to this django server -- one req object(http req obj) will be created
this req created by browser, that req will be passed to django server -- then it goes to path('', views.news_view) in urls.py -- then
go to views.py -- in that it search for news_view method -- then new_method return one predefined function that is render
return render(request,'testapp/news.html'), render is like a http response
=====================================
working with models and databases: (if we want to store data permanently for future purpose then we need DB's )
M- Model
V- View (FunctionBasedView,ClassBV)
T- Template

temp storage (python data types like list,tuple,set,dict) untill the program execution complete, later on not available, first storage
is file handling(text,binary and csv files)
perm storage () if we want store more data then oracle,mysql
still so much then hadoop, big data, data warehousing and mango db also

as part of web application dev, compulsory we required to interact with database to store our data and to retrieve our stored data
django provides an in-built support for database operations. django provides an in-built database sqlite-3

for small to medium applications, this database is more enough, django can provide support for other databases also like oracle,Mysql
mangoDB,..

Database Configurations
if we are using sqlite-3 no configuration required.

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

if we dont want to use sqlite3 db then we have to configure our own db with the parameters

ENGINE: Name of the db engine
NAME: Db name
USER: DB Login username
PASSWORD: DB Login pwd
HOST: the machine on which db server is running
PORT: the port on which db server is running

Note: Most of the times HOST and PORT are optional

Database connection with mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'hospital',
	'USER': 'root',
	'PASSWORD': 'root',
	'HOST': 'localhost',
	'PORT':3306,
    }
}

DB connection with oracle
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME': 'ORCL',
	'USER': 'scott',
	'PASSWORD': 'tiger',
	'HOST': 'localhost',
	'PORT':1521,
    }
}

copy and paste the above settings in settings.py according to the DB

to enter into oracle db, uname: scott pwd:tiger
select * from global_name;
ORCL is DB name, in some versions XE

how to check django db configurations are properly configured or not by using the commands from the python shell

C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.db import connection
>>> c=connection.cursor()
>>> exit()

if we are not getting any error means database configurations are proper

now i added above mysql db settings, then i got error as below
import MySQLdb as Database
ModuleNotFoundError: No module named 'MySQLdb'

Error loading MySQLdb module.
Did you install mysqlclient?

pip install mysqlclient

C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.db import connection
>>> c=connection.cursor()

MySQLdb.OperationalError: (1045, "Access denied for user 'root'@'localhost' (using password: YES)")

in mysql client, fire below commands, if we forget or get the error as below

ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';
FLUSH PRIVILEGES;

SELECT CURRENT_USER();
SELECT USER();

if we give wrong db name
django.db.utils.OperationalError: (1049, "Unknown database 'hosital'")

Model class:
its a python class, which contains db information
it contains fields and behaviours of data which we are storing
each model maps to one db table
every model is a python class, which is a child class of (django.db.models.Model)
each attribute of the model represents database field(column name in the table)
we have to write all model classes inside models.py file

create project
create app
add app in settings.py

create a model class in models.py file (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)

from django.db import models

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)

Note:
this model class will be converted into db table. djnago is responsible for this conversion

Tablename:appname_classname
	  firstapp_Employee

fileds: eno,ename,esal,eaddr and extra field:id
Model class=database table name+ field name+ field behaviour

makemigrations
migrate

converting model class into database specific sql code:
once we write the model class, we have to mograte the corresponding SQL code, for this we have to use makemigrations

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0001_initial.py
    + Create model Employee

how to see the corresponding SQL code for migrations
C:\Users\abc\Desktop\django\firstproject>py manage.py sqlmigrate firstapp 0001
BEGIN;
--
-- Create model Employee
--
CREATE TABLE "firstapp_employee" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "eno" integer NOT NULL, "ename" varchar(30) NOT NULL, "esal" real NOT NULL, "eaddr" varchar(30) NOT NULL);
COMMIT;

we gave 0001 but not our own, in migrations (C:\Users\abc\Desktop\django\firstproject\firstapp\migrations) we have 0001_initial

how to execute the generated sql query (migrate command)
after generating sql code, we have to execute that sql code to create table in db. For this we have to use migrate command

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying firstapp.0001_initial... OK
  Applying sessions.0001_initial... OK

what is the advantage of creating tables with migrate command
if we use migrate, then all djngo required tables will be created in addition to our application specific tables. if we create table
manually with sql code, then only our application specific table will be created and django may not work properly. hence it is highly
recommended to create tables with 'migrate' command

how to check created table in django admin interface
we have to register model class in admin.py file

admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
from django.contrib import admin
from firstapp.models import Employee

# Register your models here.
admin.site.register(Employee)

C:\Users\abc\Desktop\django\firstproject>py manage.py createsuperuser
Username (leave blank to use 'abc'):
Email address: abc@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

creation of superuser to login to admin userinterface
C:\Users\abc\Desktop\django\firstproject>py manage.py createsuperuser
Username (leave blank to use 'abc'):
Email address: abc@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

start the server and log into admin
py manage.py runserver 

send request
http://127.0.0.1:8000/admin/
===============================================
Difference between makemigrations and migrate

makemigrations is responsible to generate sql query for python model class, where as migrate is responsible to execute sql code so that
tables will be created in the database.

Read data from the db and display to the end user

create project
start app
add app in settings.py
add db configurations in settings.py
test the db connections
create model class
make migrations and migrate
register to admin and modeladmin inside admin.py
create superuser
login to admin interface and check table created or not?
template file and static file and corresponding configurations in settings
view function to communicate with DB, to get the data and send this data to template file, which is responsible to display to end user

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py
create table in sqlite-3
create model class in models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)

from django.db import models

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30) 

py manage.py makemigrations
C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0001_initial.py
    + Create model Employee

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK

Admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
from django.contrib import admin
from firstapp.models import Employee

# Register your models here.
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']

admin.site.register(Employee,EmployeeAdmin)

Create superuser
py manage.py createsuperuser

py manage.py runserver
http://127.0.0.1:8000/admin/

once server started, send request, login to admin interface and check the table, enter some employee details manually

create a function in views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from firstapp.models import Employee

# Create your views here
def empdata_view(request):
    emp_list=Employee.object.all()
    my_dict={'emp_list':emp_list}
    return render(request,'testapp/wish.html',context=my_dict)

wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Employee data</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>    
    <h1>Employee List</h1><hr>
    {% if emp_list %}   
    <table border="2" align="center">
        <thead>
            <th>ENO</th>
            <th>ENAME</th>
            <th>ESAL</th>
            <th>EADDR</th>
        </thead>
        {% for emp in emp_list %}
        <tr>
            <td>{{emp.eno}}</td>
            <td>{{emp.ename}}</td>
            <td>{{emp.esal}}</td>
            <td>{{emp.eaddr}}</td>
        </tr>
        {% endfor %}
    </table> 
    {% else %}
    <p>No records found!!!</p>
    {% endif %}
</body>
</html>

style.css
body{
    
    background: white;
    color: rgba(31,180,161,255);        
}

h1{
    text-align: center;
}

table{
    margin: auto;
}

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('emp/', views.empdata_view),
]

MVT Architecture
V--View Function/Class--Business logic--python code
T--Template-- Presentation logic(HTML Code)
M--Model--related to DB

1)End user sending the request
http://127.0.0.1:8000/emp/

2)View function will get the request
ef empdata_view(request):
    emp_list=Employee.objects.all()
    my_dict={'emp_list':emp_list}
    return render(request,'testapp/wish.html',context=my_dict)

3)View asking the model to connect with DB and provide required data
emp_list=Employee.objects.all()

4)Model will communicate with the database and provides the required data to the view function

5)view will send data to templatefile
my_dict={'emp_list':emp_list}
    return render(request,'testapp/wish.html',context=my_dict)

6)Template file will prepare HTTPResponse with required data and provide to end user

faker module in python
===============================================
How to generate fake data for application
faker module

from faker import Faker
fakegen=Faker()
# for i in range(10):
name=fakegen.name()
print(name)
fname=fakegen.first_name()
print(fname)
lname=fakegen.last_name()
print(lname)
date1=fakegen.date()
print(date1)
number=fakegen.random_number(5)
print(number)
email1=fakegen.email()
print(email1)
city=fakegen.city()
print(city)
print(fakegen.random_int(min=0,max=9999))
print(fakegen.random_element(elements=('sai','virat','mahi','pant')))

Phone number generation
from random import *
def phonenumbergen():
    d1=randint(6,9)
    num=''+str(d1)
    for i in range(9):
        num+=str(randint(0,9))
    return int(num)
for i in range(10):
    print(phonenumbergen())

insert data into model class by using faker module

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

Database configuration(Use Mysql)
create DB in Mysql (studentdb)

open MySQL Commandline Client 
pwd: root
mysql>  show databases;
+--------------------+
| Database           |
+--------------------+
| hospital           |
| information_schema |
| keylogger_db       |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| sys                |
| world              |
+--------------------+
9 rows in set (1.18 sec)

mysql> create database studentdb;
Query OK, 1 row affected (0.69 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| hospital           |
| information_schema |
| keylogger_db       |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| studentdb          |
| sys                |
| world              |
+--------------------+
10 rows in set (0.00 sec)

Database connection with mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'studentdb',
	'USER': 'root',
	'PASSWORD': 'root',
	'HOST': 'localhost',
	'PORT':3306,
    }
}

paste the above content in settings.py (C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py)

C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from django.db import connection
>>> c=connection.cursor()
>>> exit()

models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)
from django.db import models

# Create your models here.
class Student(models.Model):
    rollno=models.IntegerField()
    name=models.CharField(max_length=30)
    dob=models.DateField()
    marks=models.IntegerField()
    email=models.EmailField()
    phonenumber=models.BigIntegerField()
    address=models.TextField()
    
make migrations and migrate
C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0002_student_delete_employee.py
    + Create model Student
    - Delete model Employee

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK

to check the table(firstapp_student) created or not on Mysql?

use studentdb;
show tables;
desc firstapp_student;
select * from firstapp_student;

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| hospital           |
| information_schema |
| keylogger_db       |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| studentdb          |
| sys                |
| world              |
+--------------------+
10 rows in set (0.04 sec)

mysql> use studentdb;
Database changed
mysql> show tables;
+----------------------------+
| Tables_in_studentdb        |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| firstapp_student           |
+----------------------------+
11 rows in set (0.06 sec)

mysql> desc firstapp_student;
+-------------+--------------+------+-----+---------+----------------+
| Field       | Type         | Null | Key | Default | Extra          |
+-------------+--------------+------+-----+---------+----------------+
| id          | bigint       | NO   | PRI | NULL    | auto_increment |
| rollno      | int          | NO   |     | NULL    |                |
| name        | varchar(30)  | NO   |     | NULL    |                |
| dob         | date         | NO   |     | NULL    |                |
| marks       | int          | NO   |     | NULL    |                |
| email       | varchar(254) | NO   |     | NULL    |                |
| phonenumber | bigint       | NO   |     | NULL    |                |
| address     | longtext     | NO   |     | NULL    |                |
+-------------+--------------+------+-----+---------+----------------+
8 rows in set (0.19 sec)

mysql> select * from firstapp_student;
Empty set (0.17 sec)

admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
from django.contrib import admin
from firstapp.models import Student

# Register your models here.
class StudentAdmin(admin.ModelAdmin):
    list_display=['rollno','name','dob','marks','email','phonenumber','address']

admin.site.register(Student,StudentAdmin)

C:\Users\abc\Desktop\django\firstproject>py manage.py createsuperuser
Username (leave blank to use 'abc'):
Email address: abc@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 14, 2025 - 10:53:37
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

create a file with the name populate_student_info.py (C:\Users\abc\Desktop\django\firstproject\populate_student_info.py)
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','firstproject.settings')
import django
django.setup()

from firstapp.models import Student
from faker import Faker
from random import *

fake=Faker()
def phonenumbergen():
    d1=randint(6,9)
    num=''+str(d1)
    for i in range(9):
        num+=str(randint(0,9))
    return int(num)

def populate(n):
    for i in range(n):
        frollno=fake.random_int(min=1,max=999)
        fname=fake.name()
        fdob=fake.date()
        fmarks=fake.random_int(min=1,max=100)
        femail=fake.email()
        fphonenumber=phonenumbergen()
        faddress=fake.address()
        Student.objects.get_or_create(rollno=frollno,name=fname,dob=fdob,marks=fmarks,email=femail,phonenumber=fphonenumber,address=faddress)

n=int(input('Enter number of records:'))
populate(n)
print(f'{n} records inserted successfully...')

C:\Users\abc>cd desktop/django

C:\Users\abc\Desktop\django>cd firstproject

C:\Users\abc\Desktop\django\firstproject>py populate_student_info.py
Enter number of records:5
5 records inserted successfully...

 select * from firstapp_student;
+----+--------+-----------------+------------+-------+--------------------------+-------------+---------------------------------------------------------+
| id | rollno | name            | dob        | marks | email                    | phonenumber | address                                                 |
+----+--------+-----------------+------------+-------+--------------------------+-------------+---------------------------------------------------------+
|  1 |    848 | Donald Hall     | 2004-09-10 |    67 | mary93@example.com       |  7411024815 | 8895 Emily Island
South Jonathanfurt, MI 90667          |
|  2 |    822 | Edward Norris   | 2002-05-04 |    77 | kyle62@example.org       |  6571081261 | 56185 Hayes Road
Port Amandaberg, GU 10830              |
|  3 |    725 | Morgan Weaver   | 2007-10-12 |    41 | davidvasquez@example.org |  7985766380 | 56982 Moore Cliffs Apt. 677
South Amandaview, FM 06132  |
|  4 |    259 | Christine Stone | 1995-06-09 |    68 | fcasey@example.org       |  9839181531 | 82997 Bailey Road Suite 291
Lake Kimberlyfurt, AZ 49248 |
|  5 |    803 | Timothy Walters | 1990-06-17 |    49 | nathanhicks@example.org  |  9728916689 | 741 Andrew Harbors
South Jennaborough, FL 91052         |
+----+--------+-----------------+------------+-------+--------------------------+-------------+---------------------------------------------------------+
5 rows in set (0.10 sec)

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from firstapp.models import Student

# Create your views here
def student_view(request):
    # stu_list=Student.objects.all()
    # stu_list=Student.objects.filter(marks__lt=50)
    # stu_list=Student.objects.filter(name__startswith='T')
    stu_list=Student.objects.all().order_by('marks')
    stu_list=Student.objects.all().order_by('-marks')
    my_dict={'stu_list':stu_list}
    return render(request,'testapp/wish.html',context=my_dict)

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Student data</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>    
    <h1>Student Information</h1><hr>
    {% if stu_list %}   
    {% for stu in stu_list %}
    <h2>{{stu.name}} Information</h2>
    <ul>
        <li>Student RollNo:{{stu.rollno}}</li>
        <li>Student DOB:{{stu.dob}}</li>
        <li>Student Marks:{{stu.marks}}</li>
        <li>Student Email:{{stu.email}}</li>
        <li>Student Phonenumber:{{stu.phonenumber}}</li>
        <li>Student Address:{{stu.address}}</li>
    </ul>
    <br>
    {% endfor %}
    {% else %}
    <p>No records found in the Database</p>
    {% endif %}
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('stu/', views.student_view),
]

http://127.0.0.1:8000/stu/


Questions related to model and template

how to configure db inside settings.py
how to check the connection?
how to define the model class inside models.py?
how to perform makemigrations?
how to perform migrate?
what is the diff between makemigrations and migrate
what is the advantage of creating a table by using migrate command instead of creating manually in the db
how add a model to admin interfaces inside admin.py?
to display the total data, how to write model admin class inside admin.py?
how to create superuser?
how to login to admin interface and add data to our table?
how to see the generated sql code as a result of make migrations?
===============================================
How to generate fake data:
by using faker module and our own customized code by using random module

another way to generate fake data:
django-seed
its adjnago based customized application to generate fake data for every model automatically

internally this app using faker module

stpes to use django-seed:
pip install django-seed
add 'django-seed' application in our INSTALLED_APPS inside settings.py

generate fake data by using django-seed

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app, django-seed in settings.py 
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp',
    'secondapp',
    'django_seed',
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'seeddb',
	'USER': 'root',
	'PASSWORD': 'root',
	'HOST': 'localhost',
	'PORT':3306,
    }
}

create a db in Mysql(seeddb)

mysql> create database seeddb;
Query OK, 1 row affected (1.49 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| hospital           |
| information_schema |
| keylogger_db       |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| seeddb             |
| studentdb          |
| sys                |
| world              |
+--------------------+
11 rows in set (0.91 sec)

mysql> use seeddb;
Database changed
mysql> show tables;
Empty set (0.28 sec)

from faker import Faker
fake=Faker()
for i in range(10):
    phonenumber=fake.phone_number()
    print(phonenumber)

C:\Users\abc\Desktop\django>py test.py
(369)260-1063x313
001-288-790-7741x075
3523661514
001-915-965-0510x621
+1-988-861-1385x833
5503313022
+1-443-597-3546x8676
776-383-6621x37984
+1-628-201-9287
(624)983-1797

models.py
from django.db import models

# Create your models here.
class Student(models.Model):
    rollno=models.IntegerField()
    name=models.CharField(max_length=30)
    dob=models.DateField()
    marks=models.IntegerField()
    email=models.EmailField()
    phonenumber=models.CharField(max_length=30)
    address=models.TextField()

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0003_alter_student_phonenumber.py
    ~ Alter field phonenumber on student

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK

Admin.py
from django.contrib import admin
from firstapp.models import Student

# Register your models here.
class StudentAdmin(admin.ModelAdmin):
    list_display=['rollno','name','dob','marks','email','phonenumber','address']

admin.site.register(Student,StudentAdmin)

C:\Users\abc\Desktop\django\firstproject>py manage.py createsuperuser
Username (leave blank to use 'abc'):
Email address: abc@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

to insert data to the table:
C:\Users\abc\Desktop\django\firstproject>py manage.py seed firstapp --number=1
ModuleNotFoundError: No module named 'psycopg2'

pip install --upgrade pip
pip install psycopg2

but still error so, 
pip install psycopg2-binary
pip show psycopg2-binary

C:\Users\abc\Desktop\django\firstproject>py manage.py seed firstapp --number=1
{'verbosity': 1, 'settings': None, 'pythonpath': None, 'traceback': False, 'no_color': False, 'force_color': False, 'skip_checks': False, 'number': 1, 'seeder': None}
Seeding 1 Students
Model Student generated record with primary key 1

py manage.py runserver
http://127.0.0.1:8000/admin/ -- check records are added or not?

use seeddb;
show tables;
mysql> select * from firstapp_student;
+----+--------+---------------------+------------+--------+--------------------------+---------------+---------------------------------------------+
| id | rollno | name                | dob        | marks  | email                    | phonenumber   | address                                     |
+----+--------+---------------------+------------+--------+--------------------------+---------------+---------------------------------------------+
|  1 |  10564 | Hit free say scene. | 2019-01-04 | -27527 | walterfisher@example.net | (325)538-9599 | 155 Martha Rapid
West Briannaview, DE 37892 |
+----+--------+---------------------+------------+--------+--------------------------+---------------+---------------------------------------------+
1 row in set (0.04 sec)

sangamsoftsoljobs.com
views
templates
staticfiles
database

project name: Welcome to sangamsoftsol jobs
continuous updates for every minute
Hydjobs	punejobs	chennaijobs

Date	Company	Title	Eligibility	Address	Email	PhoneNumber 

__str__() method:
----------------
class Student:
    def __init__(self,name,rollno):
        self.name=name
        self.rollno=rollno
    def __str__(self):
        return 'Student Name:{} and Rollno:{}'.format(self.name,self.rollno)
s1=Student('Sai',101)
s2=Student('virat',102)
print(s1)
print('hi')

C:\Users\abc\Desktop\django>py test.py
<__main__.Student object at 0x00000217A5FEC9B0>
<__main__.Student object at 0x00000217A5FEC9E0>

C:\Users\abc\Desktop\django>py test.py
Student Name:Sai and Rollno:101
Student Name:virat and Rollno:102

C:\Users\abc\Desktop\django>py test.py
Student Name:Sai and Rollno:101
hi

Diff between str() and repr() or __str__() and __repr__()?
str(): possible only one way obj to string

import datetime
today=datetime.datetime.now()
print(type(today))
s=repr(today) #converting datetime obj to str
print(type(s))
# d=eval(s) #converting str obj to datetime
# print(type(d))

C:\Users\abc\Desktop\django>py test.py
<class 'datetime.datetime'>
<class 'str'>

C:\Users\abc\Desktop\django>py test.py
<class 'datetime.datetime'>
<class 'str'>
Traceback (most recent call last):
  File "C:\Users\abc\Desktop\django\test.py", line 6, in <module>
    d=eval(s) #converting str obj to datetime
      ^^^^^^^
  File "<string>", line 1
    2025-01-14 15:56:36.318545
         ^
SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers

C:\Users\abc\Desktop\django>py test.py
<class 'datetime.datetime'>
<class 'str'>
<class 'datetime.datetime'>

eval
-----
x=input('Enter some value:')
print(type(x))

# x=eval(input('Enter some value:'))
# print(type(x))

C:\Users\abc\Desktop\django>py test.py
Enter some value:10
<class 'str'>

C:\Users\abc\Desktop\django>py test.py
Enter some value:True
<class 'str'>

C:\Users\abc\Desktop\django>py test.py
Enter some value:10+3j
<class 'str'>

# x=input('Enter some value:')
# print(type(x))

x=eval(input('Enter some value:'))
print(type(x))

C:\Users\abc\Desktop\django>py test.py
Enter some value:10
<class 'int'>

C:\Users\abc\Desktop\django>py test.py
Enter some value:10.2
<class 'float'>

C:\Users\abc\Desktop\django>py test.py
Enter some value:10+3j
<class 'complex'>

C:\Users\abc\Desktop\django>py test.py
Enter some value:True
<class 'bool'>
===============================================
project name: Welcome to sangamsoftsol jobs
continuous updates for every minute
Hydjobs	punejobs	chennaijobs

Date	Company	Title	Eligibility	Address	Email	PhoneNumber 

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py 

views.py
from django.shortcuts import render

# Create your views here
def homepage_view(request):
    return render(request,'testapp/wish.html')

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.homepage_view),
]

settings.py
TEMPLATE_DIR=BASE_DIR/'templates'
STATIC_DIR=BASE_DIR/'static'

STATIC_URL = 'static/'
STATICFILES_DIRS=[STATIC_DIR]

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Jobs</title>
    <!-- <link rel="stylesheet" href="{% static 'css/style.css' %}"> -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
</head>
<body>    
    <div class="container">
        <div class="jumbtron">
            <h1>Welcome To Sangam Softsol Jobs</h1>
            <p>continuous job updates for every hour</p>
            <a class="btn btn-primary btn-lg" href="#" role="button">Hyderabad Jobs</a>
            <a class="btn btn-primary btn-lg" href="#" role="button">Pune Jobs</a>
            <a class="btn btn-primary btn-lg" href="#" role="button">Banglore Jobs</a>
        </div>
    </div>
</body>
</html>

models.py
from django.db import models

# Create your models here.
class HydJobs(models.Model):
    date=models.DateField()
    company=models.CharField(max_length=30)
    title=models.CharField(max_length=30)
    eligibility=models.CharField(max_length=30)
    address=models.CharField(max_length=30)
    email=models.EmailField()
    phonenumber=models.BigIntegerField()

class PuneJobs(models.Model):
    date=models.DateField()
    company=models.CharField(max_length=30)
    title=models.CharField(max_length=30)
    eligibility=models.CharField(max_length=30)
    address=models.CharField(max_length=30)
    email=models.EmailField()
    phonenumber=models.BigIntegerField()

class BglrJobs(models.Model):
    date=models.DateField()
    company=models.CharField(max_length=30)
    title=models.CharField(max_length=30)
    eligibility=models.CharField(max_length=30)
    address=models.CharField(max_length=30)
    email=models.EmailField()
    phonenumber=models.BigIntegerField()

database settings
-----------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jobsdb',
	    'USER': 'root',
	    'PASSWORD': 'root',
	    'HOST': 'localhost',
	    'PORT':3306,
    }
}

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0004_bglrjobs_hydjobs_punejobs_delete_student.py
    + Create model BglrJobs
    + Create model HydJobs
    + Create model PuneJobs
    - Delete model Student

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK

mysql> show tables;
+----------------------------+
| Tables_in_jobsdb           |
+----------------------------+
| firstapp_bglrjobs          |
| firstapp_hydjobs           |
| firstapp_punejobs          |
+----------------------------+

admin.py
from django.contrib import admin
from firstapp.models import HydJobs

# Register your models here.
class HydJobsAdmin(admin.ModelAdmin):
    list_display=['date','company','title','eligibility','address','email','phonenumber']

admin.site.register(HydJobs,HydJobsAdmin)

views.py
from django.shortcuts import render
from firstapp.models import HydJobs

# Create your views here
def homepage_view(request):
    return render(request,'testapp/wish.html')

def hydjobs_view(request):
    jobs_list=HydJobs.objects.all()
    my_dict={'jobs_list':jobs_list}
    return render(request,'testapp/wish.html',my_dict)

news.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hyderabad Sangam Softsol Jobs</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">

</head>
<body>
    <h1>Hyderabad Jobs Information</h1>
    {% if jobs_list %}  
    <table>
        <thead>
            <th>Date</th>
            <th>Company</th>
            <th>Title</th>
            <th>Eligibility</th>
            <th>Address</th>
            <th>Email</th>
            <th>Phone Number</th>
        </thead>
        {% for job in jobs_list %}
        <tr>
            <td>{{job.date}}</td>
            <td>{{job.company}}</td>
            <td>{{job.title}}</td>
            <td>{{job.eligibility}}</td>
            <td>{{job.address}}</td>
            <td>{{job.email}}</td>
            <td>{{job.phonenumber}}</td>
        </tr>
        {% endfor %}
    </table>
    {% else %} 
    <p id="specialp">No Jobs In Hyderabad</p>
    {% endif %}     
</body>
</html>

populate.py
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','firstproject.settings')
import django
django.setup()

from firstapp.models import HydJobs
from faker import Faker
from random import *

fake=Faker()
def phonenumbergen():
    d1=randint(6,9)
    num=''+str(d1)
    for i in range(9):
        num+=str(randint(0,9))
    return int(num)

def populate(n):
    for i in range(n):
        fdate=fake.date()
        fcompany=fake.company()
        ftitle=fake.random_element(elements=('Project Manager','Team Lead','Software Engineer','Associate Engineer'))
        feligibility=fake.random_element(elements=('B.Tech','M.Tech','MCA','PhD'))
        faddress=fake.address()
        femail=fake.email()
        fphonenumber=phonenumbergen()
        hyd_job_record=HydJobs.objects.get_or_create(date=fdate,company=fcompany,title=ftitle,eligibility=feligibility,address=faddress,email=femail,phonenumber=fphonenumber)

n=int(input('Enter number of records:'))
populate(n)
print(f'{n} records inserted successfully...')

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.homepage_view),
    path('hyd/',views.hydjobs_view)
]

style.css
.container{
    margin-top: 200px;
    text-align: center;
}

.container .jumbtron{
    background: white;
    color: rgba(31,180,161,255);  
}

.jumbtron a{
    background: white;
    color: rgba(31,180,161,255);
    border: 2px solid red;
}

#specialp{
    color: rgba(31,180,161,255);
    text-align: center;
    font-size: 50px;
}

table{
    color: rgba(31,180,161,255);
    background: white;
    margin: auto;
}

===============================================
Working with Django Forms

very important concept in web application
the main pupose of forms is to take user input, Ex: login form,registration form, enquiry form,etc..

from the forms, we can read end user provided input data and we can use that data based on our requirement, we may store the data
in the data base for future purpose, we use just for authentication or validation purpose

here we have to use djnago specific forms but not html forms

Advantages of django forms over html forms:
we can develop forms very easily with python code
we can generate html form widgets/components(like text area, forms, email, pwd etc,..) very quickly
validating data will become very easy
processing data into python data structures like list,set,dict will become very easy
creation model based forms will become easy

model class--> converted to database table
form class --> converted to html form

process to generate djnago forms
django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py 

step1: creation of forms.py file in our application folder with our required fields.

from django import forms

class StudentForm(forms.Form):
    name=forms.CharField()
    marks=forms.IntegerField()

Note: name and marks are the field names which will be available in html forms

forms.py-->views.py-->Template file(HTML)

Step2: usage of forms.py inside view.py file
views.py file is responsible to send this form to the template html file

views.py
from django.shortcuts import render
from firstapp.forms import StudentForm

# Create your views here
def studentinput_view(request):
    form=StudentForm()
    my_dict={'form':form}
    return render(request,'testapp/wish.html',my_dict)

Alternate short way
from django.shortcuts import render
from firstapp.forms import StudentForm

# Create your views here
def studentinput_view(request):
    form=StudentForm()
    return render(request,'testapp/wish.html',{'form':form})

Creation of HTML file to hold the form
inside template file we have to use template tag to inject form {{form}}

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <h1>Student Input Form</h1>
    <div class="container" align="center">
        <form method="post">
            {{form.as_p}}
            <input type="submit" name="" class="btn btn-primary" value="Submit">
        </form>
    </div>    
</body>
</html>

style.css
h1{
    text-align: center;
}

body{
    background: white;
    color: rgba(31,180,161,255);
}

if we submit the form we will get Forbidden (403) status code response
Forbidden (403)
CSRF verification failed. Request aborted

CSRF(Cross Site Request forgery) Token:

every form should satisfy CSRF verification, otherwise django wont accept our form
it is meant for website security pupose, being a programmer we are not required to worry anything about this. django will take care
everything
but we have to add {% csrf_token %} CSRF token in our form

<body> 
    <h1>Student Input Form</h1>
    <div class="container" align="center">
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" name="" class="btn btn-primary" value="Submit">
        </form>
    </div>    
</body>

if w add csrf token then in the generated form the follwoing hidden field will be added, which makes our post request secure
Bql47mqB4149BF23jyuWhecGaG3jf9sgzsWZk2arFxbZrn9qxiDOnVrWxl7HMSvW 

Write a python program to extract all mobile numbers present in input.txt where numbers are mixed with normal text data 
test.py
import re

# Open the input and output files
f1 = open('input.txt', 'r')
f2 = open('output.txt', 'w')

# Read each line from the input file
for line in f1:
    # Use a raw string for the regex pattern
    mobile_numbers = re.findall(r'[7-9]\d{9}', line)
    # Write each extracted number to the output file
    for n in mobile_numbers:
        f2.write(n + '\n')

print('Extracted all mobile numbers into output.txt')

# Close the files
f1.close()
f2.close()

input.txt
jsdhfjshfsjkhfjks987654321
2
jhfkahfkfhs9876543212khghj
3
kjahshfksfhksgh7890987654
4
hkjhkjfhkfhsak1234567890
5
jsdhfjshfsjkhfjks987654321
6
jhfkahfkfhs9876543212khghj
7
kjahshfksfhksgh7890987654
8
hkjhkjfhkfhsak1234567890
9
jsdhfjshfsjkhfjks987654321
10
jhfkahfkfhs9876543212khghj
11
kjahshfksfhksgh7890987654
12
hkjhkjfhkfhsak1234567890
13
jsdhfjshfsjkhfjks987654321
14
jhfkahfkfhs9876543212khghj
15
kjahshfksfhksgh7890987654
16
hkjhkjfhkfhsak1234567890

output
9876543212
7890987654
9876543212
7890987654
9876543212
7890987654
9876543212
7890987654
========================================================
How to process input data from the form inside views.py
-------------------------------------------------------
inside views.py, we have to read data provided by end user and we have to use that data based on our requirement

form=StudentForm() -- empty form object to display form to the end user

form=StudentForm(request.POST) -- this form object contains end user provided data

cleaned_data -- its a dictionary which contains end user provided data
d={'a':100,'b':200,'c':300}
d['a']

form.cleaned_data['name'] -- the name entered by end user  
form.cleaned_data['marks'] -- the marks entered by end user 

form.is_valid() -- to check whether validations are successfull or not

Diff between GET and POST
there are multiple ways to send GET request:
	Typing URL in the address bar
	Clicking on hyperlinks
	submitting the html form without attribute
	submitting the html form with the method attribute of GET value

there is only one way to send POST request:
	submitting the html form with the method attribute of POST value

views.py
from django.shortcuts import render
from firstapp.forms import StudentForm

# Create your views here
def studentinput_view(request):
    # form=StudentForm()
    # my_dict={'form':form}
    submitted=False
    name=''
    if request.method == 'POST':
        form=StudentForm(request.POST)
        if form.is_valid():
            print('Form validation is success and print data')
            print('Roll No:',form.cleaned_data['rollno'])
            print('Name:',form.cleaned_data['name'])
            print('Marks:',form.cleaned_data['marks'])
            name=form.cleaned_data['name']
            submitted=True
    form=StudentForm()   
    return render(request,'testapp/wish.html',{'form':form,'submitted':submitted,'name':name})

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <!-- <h1>Student Input Form</h1> -->
    <div class="container" align="center">
        {% if submitted %}
        <!-- <h1>Thanks for providing info</h1> -->
        <h1>Student with the name:{{name}} Processed Successfully</h1>
        <h2>Enter Next Student Informatio</h2><hr>
        {% else %}
        <h1>Student Input Form</h1>
        {% endif %}
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" name="" class="btn btn-primary" value="Submit">
        </form>
    </div>    
</body>
</html>

forms.py
from django import forms

class StudentForm(forms.Form):
    rollno=forms.CharField()
    name=forms.CharField()
    marks=forms.IntegerField()

output:
Form validation is success and print data
Roll No: 101
Name: sai
Marks: 65

Feedback Project
Student Feedback Form
Name:
Rollno:
Email:
Feedback
Submit Feedback

after clicking submit, the message should display hello 'name',thanks for submitting feedback, 
it is very helpful for us to provide better servoces

diff between listdir() and walk()?
tell() and seek() methods?

__file__
__doc__

__add__()
__sub__()


overloading and overriding

x=10
def add(a,b):
    return a+b
print(dir())

C:\Users\abc\Desktop\django>py test.py
['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'add', 'x']

print(__builtins__)
print(__cached__)
print(__doc__)
print(__file__)
print(__loader__)
print(__name__)
print(__package__)
print(__spec__)

C:\Users\abc\Desktop\django>py test.py
<module 'builtins' (built-in)>
None
None
C:\Users\abc\Desktop\django\test.py
<_frozen_importlib_external.SourceFileLoader object at 0x000002E68966BD10>
__main__
None
None

__name__ waht it contains (its module related question)

test.py
def f1():
    if __name__=='__main__':
        print('the code directly executed as a program')
        print('The value of __name__:',__name__)
    else:
        print('the code executed indirectly as a module from some other module')
        print('the value of __name__:',__name__)
f1()

C:\Users\abc\Desktop\django>py test.py
the code directly executed as a program
The value of __name__: __main__

test1.py
import test
test.f1()

C:\Users\abc\Desktop\django>py test1.py
the code executed indirectly as a module from some other module
the value of __name__: test
the code executed indirectly as a module from some other module
the value of __name__: test
========================================================
feedback project

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py 

forms.py
from django import forms

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.CharField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

views.py
from django.shortcuts import render
from firstapp.forms import FeedbackForm

# Create your views here
def feedback_view(request):
    submitted=False
    name=''
    if request.method=='POST':
        form=FeedbackForm(request.POST)
        if form.is_valid():
            print('Form validation success and printing feedback information')
            print('*'*55)
            print('Name:',form.cleaned_data['name'])
            print('Rollno:',form.cleaned_data['rollno'])
            print('Mail ID:',form.cleaned_data['email'])
            print('Feedback:',form.cleaned_data['feedback'])
            submitted=True
            name=form.cleaned_data['name']

    form=FeedbackForm()
    return render(request,'testapp/wish.html',{'form':form,'submitted':submitted,'name':name})

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <div class="container" align="center">
        {% if submitted %}
        <h1>hello {{name}}, thanks for providing feedback, it is very helpful for us to provide better services</h1>
        {% else %}
    <h1>Student Feedback Form</h1>
    <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" class="btn btn-primary" value="SubmitFeedback">
    </form>
    {% endif %}
    </div>    
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('feed/', views.feedback_view),
]

style.css
h1{
    text-align: center;
}

body{
    background: white;
    color: rgba(31,180,161,255);

    background: url(../images/bg.jpg);
    background-repeat: no-repeat;
    background-size: cover;
}

Form validations
Explicitly by the programmer by using clean methods
by using django inbuilt validation

Basic OOP knowledge
class Parent:
    def __init__(self):
        self.x=333
    def property(self):
        print('gold+land+cash')

class Child(Parent):
    def education(self):
        print('B.Tech+Job')

c=Child()
c.education()
c.property()
print(c.x)

C:\Users\abc\Desktop\django>py test.py
B.Tech+Job
gold+land+cash
333

Ex:
class Form:
    def __init__(self):
        self.cleaned_data={'name':'sai'}

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.CharField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

form=FeedbackForm()
form.cleaned_data['name']

Ex2: overriding
class Parent:
    def marry(self):
        print('Marry appu')

class Child(Parent):
    pass
    # def marry(self):
        # print('marry pooja hegde')
        # super().marry()

c=Child()
c.marry()

C:\Users\abc\Desktop\django>py test.py
Marry appu

class Parent:
    def marry(self):
        print('Marry appu')

class Child(Parent):
    def marry(self):
        print('marry pooja hegde')
        # super().marry()
    # pass

c=Child()
c.marry()

C:\Users\abc\Desktop\django>py test.py
marry pooja hegde

class Parent:
    def marry(self):
        print('Marry appu')

class Child(Parent):
    def marry(self):
        print('marry pooja hegde')
        super().marry()
    # pass

c=Child()
c.marry()
C:\Users\abc\Desktop\django>py test.py
marry pooja hegde
Marry appu

Explicitly by the programmer by using clean methods

Syn for clean method;
	clean_fieldname(self)

In the Form class, for any field, if we define clean method, then at the time of submit this form, django will call this method
automatically to perform validations

if clean method won't raise any error, then only request will be processed

view.py
from django.shortcuts import render
from firstapp.forms import FeedbackForm

# Create your views here
def feedback_view(request):
    form=FeedbackForm()
    submitted=False
    name=''
    if request.method=='POST':
        form=FeedbackForm(request.POST)
        if form.is_valid():
            print('Form validation success and printing feedback information')
            print('*'*55)
            print('Name:',form.cleaned_data['name'])
            print('Rollno:',form.cleaned_data['rollno'])
            print('Mail ID:',form.cleaned_data['email'])
            print('Feedback:',form.cleaned_data['feedback'])
            submitted=True
            name=form.cleaned_data['name']
        else:
            print('some field validation fails')

    # form=FeedbackForm()
    return render(request,'testapp/wish.html',{'form':form,'submitted':submitted,'name':name})

forms.py
from django import forms

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.CharField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

    def clean_name(self):
        print('validating name field')
        inputname=self.cleaned_data['name']
        if len(inputname)<4:
            raise forms.ValidationError('Minimum number of characters in the name field should be 4')
            return inputname

http://127.0.0.1:8000/feed/

Name: None
Rollno: 101
Mail ID: abc@gmail.com
Feedback: django
[15/Jan/2025 19:18:05] "POST /feed/ HTTP/1.1" 200 747
validating name field
Form validation success and printing feedback information
*******************************************************
========================================================
Form validation

class TooYoungException(Exception):
    def __init__(self, arg):
        self.msg = arg

class TooOldException(Exception):
    def __init__(self, arg):
        self.msg = arg

try:
    age = int(input('Enter Age:'))
    
    if age > 60:
        raise TooOldException('Don\'t waste your time')
    
    elif age < 18:
        raise TooYoungException('Wait till you get age')
    
    else:
        print('You will get match details soon')

except TooOldException as e:
    print(f"TooOldException: {e.msg}")
    
except TooYoungException as e:
    print(f"TooYoungException: {e.msg}")
    
except ValueError:
    print("Please enter a valid number for age.")

output:
C:\Users\abc\Desktop\django>py test.py
Enter Age:16
TooYoungException: Wait till you get age

forms.py
from django import forms

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.CharField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

    def clean_name(self):
        print('validating name field')
        inputname=self.cleaned_data['name']
        if len(inputname)<4:
            raise forms.ValidationError('Minimum number of characters in the name field should be 4')
            return inputname
    
    def clean_rollno(self):
        print('validating rollno field')
        inputrollno=self.cleaned_data['rollno']
        return inputrollno

    def clean_email(self):
        print('validating email field')
        inputemail=self.cleaned_data['email']
        return inputemail

    def clean_feedback(self):
        print('validating feedback field')
        inputfeedback=self.cleaned_data['feedback']
        return inputfeedback

at server console
validating name field
validating rollno field
validating email field
validating feedback field
Form validation success and printing feedback information
*******************************************************
Name: None
Rollno: 101
Mail ID: abc@gmail.com
Feedback: django

Note: Django will call these field level clean methods automatically and we are not required to call these methods explicitly, because
these are understandable by django

By using inbuilt django validators:
django.core module

from django import forms
from django.core import validators

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.CharField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea,validators=[validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])

How to implement custom validators by using validators parameter:

the name should starts with 's' or 'S'

forms.py
from django import forms
from django.core import validators
def starts_with_s(value):
    print('starts_with_s function execution')
    if value[0].lower()!='s':
        raise forms.ValidationError('Name should starts with s or S')

class FeedbackForm(forms.Form):
    name=forms.CharField(validators=[starts_with_s])
    rollno=forms.CharField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea,validators=[validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])

mail should contain @gmail.com
mail='sangamsoftsol@gmail.com'
print(mail[-10:])

C:\Users\abc\Desktop\django>py test.py
@gmail.com

forms.py
from django import forms
from django.core import validators
def starts_with_s(value):
    print('starts_with_s function execution')
    if value[0].lower()!='s':
        raise forms.ValidationError('Name should starts with s or S')

def gmail_validator(value):
    print('Checking for gmail validation')
    if value[-10:]!='@gmail.com':
        raise forms.ValidationError('mail extension should be gmail')

class FeedbackForm(forms.Form):
    name=forms.CharField(validators=[starts_with_s])
    rollno=forms.CharField()
    email=forms.EmailField(validators=[gmail_validator])
    feedback=forms.CharField(widget=forms.Textarea,validators=[validators.MaxLengthValidator(40),validators.MinLengthValidator(10)])

validation of total form directly using single clean method:
forms.py
from django import forms

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)

    def clean(self):
        print('Total form validation')
        total_cleaned_data=super().clean()
        print('validating the name field')
        inputname=total_cleaned_data['name']
        if inputname[0].lower()!='s':
            raise forms.ValidationError('Name should starts with s')
        print('validating rollno')
        inputrollno=total_cleaned_data['rollno']
        if inputrollno<=0:
            raise forms.ValidationError('Rollno should not be zero')
        print('validating email')
        inputemail=total_cleaned_data['email']
        if inputemail[-10:]!='@gmail.com':
            raise forms.ValidationError('email extension should be gmail')

at server side console:
Total form validation
validating the name field
validating rollno
validating email
Form validation success and printing feedback information
*******************************************************
Name: sai
Rollno: 101
Mail ID: abc@gmail.com
Feedback: dj

how to check original pwd and re-entered pwd are same or not?
forms.py
class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    # feedback=forms.CharField(widget=forms.Textarea)
    password=forms.CharField(label='Enter password',widget=forms.PasswordInput)
    rpassword=forms.CharField(label='Enter password again',widget=forms.PasswordInput)

    def clean(self):
        total_clean_data=super().clean()
        pwd=total_clean_data['password']
        rpwd=total_clean_data['rpassword']
        if pwd!=rpwd:
            raise forms.ValidationError('Both passwords must me same')
=======================================================
How to prevent request from BOT:

Generally form requests can be send by end user. sometimes we can write automated programming script, which is responsible to fill the
form and submit. this automated script is nothing but BOT

the main objective of BOT requests are:
To create unnecessary heavy traffic to the website, which may crash our application
To spread malware(virus)
Being a dev, compulsory we have to think about bot requests and we have to prevent this requests

How to prevent request from BOT:
In the form we will place one hidden field, which is not visible to the end user, hence there is no chance of providing value to the
hidden field

But BOT will send value to this hidden field also, if hidden field got some value, means it is the request from BOT and prevent that
submission

forms.py
from django import forms

class FeedbackForm(forms.Form):
    name=forms.CharField()
    rollno=forms.IntegerField()
    email=forms.EmailField()
    feedback=forms.CharField(widget=forms.Textarea)
    bot_handler=forms.CharField(required=False,widget=forms.HiddenInput)

    def clean(self):
        total_cleaned_data=super().clean()
        bot_handler_value=total_cleaned_data['bot_handler']
        if len(bot_handler_value)>0:
            raise forms.ValidationError("Request from BOT..., can't be submitted")

# password=forms.CharField(label='Enter password',widget=forms.PasswordInput)
    # rpassword=forms.CharField(label='Enter password again',widget=forms.PasswordInput)

    # def clean(self):
    #     total_clean_data=super().clean()
    #     pwd=total_clean_data['password']
    #     rpwd=total_clean_data['rpassword']
    #     if pwd!=rpwd:
    #         raise forms.ValidationError('Both passwords must me same')

Note:
Otherway to prevent BOT request
By using captchas
By using image recognizers(like choose 4 images where car present)

Model Form: Model Based Form
Read each field value

name=form.cleaned_data['name']
marks=form.cleaned_data['marks']
records=Student.get_or_create(name=name,marks=marks)

10 fields are there
100 fields are there, then with normal forms, would be hectic task

Model Based Form
only one line
form.save()

sometimes, we can create form based on model, such type of forms are called as model based or model forms.
the main advantage of model form is we can grab end user input and dataand we can save that data very easily in the DB
form.save() or
form.save(commit=True)

How to develop model based forms:
while developing form class, we have to inherit from forms.ModelForm class instead of forms.Form class
	class RegistrastionForm(forms.Form) -- Normal Form
	class RegistrastionForm(forms.ModelForm) -- Model Form

class RegistrationForm(forms.ModelForm):
	class Meta:
		model=Student
		fields='__all__'

Case1: Instead of all fields, if we required particular fields
class RegistrationForm(forms.ModelForm):
	class Meta:
		Model=Student
		fields=('field1','field2','field3')

Case2: Instead of all fields, if we want to exclude certain fields.
class RegistrationForm(forms.ModelForm):
	class Meta:
		Model=Student
		exclude=['field1','field2','field3']

How to save user's data to DB in Model based form:
def student_view(request):
	if request.method=='POST':
		form=StudentForm(request.POST)
		if form.is_valid():
			form.saved()

test.py
def f1():
    print('f1 function')

def f2():
    print('f2 function')

def f3():
    print('f3 function')

def f4():
    print('f4 function')

def f5():
    print('f5 function')

ch=input("Enter function name")
eval(ch+'()')
exec(ch+'()')

C:\Users\abc>python
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> "10+20+30"
'10+20+30'
>>> eval('10+20+30')
60
-----------
def f1(*,a,b):
    pass
-----------
def f1(a,b,/):
    pass
=============================================
ModelFormProject

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)
from django.db import models

# Create your models here.
class Student(models.Model):
    name=models.CharField(max_length=30)
    marks=models.IntegerField()

makemigrations and migrate
C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0006_student_delete_bglrjobs_delete_hydjobs_and_more.py
    + Create model Student
    - Delete model BglrJobs
    - Delete model HydJobs
    - Delete model PuneJobs

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0006_student_delete_bglrjobs_delete_hydjobs_and_more... OK

admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
from django.contrib import admin
from firstapp.models import Student

# Register your models here.
class StudentAdmin(admin.ModelAdmin):
    list_display=['name','marks']

admin.site.register(Student,StudentAdmin)

forms.py (C:\Users\abc\Desktop\django\firstproject\firstapp\forms.py)
from django import forms
from firstapp.models import Student

class StudentForm(forms.ModelForm):
    name=forms.CharField()
    marks=forms.IntegerField()
    class Meta:
        model=Student
        fields= '__all__'

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from firstapp.forms import StudentForm

# Create your views here
def student_view(request):
    # form=StudentForm()
    if request.method=='POST':
        form=StudentForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
            print('record inserted into db successfully...')
    form=StudentForm()
    return render(request,'testapp/wish.html',{'form':form})

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('stuform/', views.student_view),
]

wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <div class="container" align="center">
        <h1>Sangamsoftsol Student Registration Form</h1>
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" class="btn btn-warning" value="Register">
        </form>
    </div>    
</body>
</html>

style.css(C:\Users\abc\Desktop\django\firstproject\static\css\style.css)
h1{
    text-align: center;
}

body{
    background: white;
    color: rgba(31,180,161,255);

    background: url(../images/bg.jpg);
    background-repeat: no-repeat;
    background-size: cover;
}

Sangam Movies Project
Upto date movie information
ADD LIST buttons

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

models.py
from django.db import models

# Create your models here.
class Movie(models.Model):
    rdate=models.DateField()
    moviename=models.CharField(max_length=20)
    hero=models.CharField(max_length=20)
    heroine=models.CharField(max_length=20)
    rating=models.IntegerField()

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0007_movie_delete_student.py
    + Create model Movie
    - Delete model Student

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0007_movie_delete_student... OK

admin.py
from django.contrib import admin
from firstapp.models import Movie

# Register your models here.
class MovieAdmin(admin.ModelAdmin):
    list_display=['rdate','moviename','hero','heroine','rating']

admin.site.register(Movie,MovieAdmin)

views.py
from django.shortcuts import render

# Create your views here
def movie_view(request):
        return render(request,'testapp/wish.html')

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.movie_view),
]

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <div class="container" align="center">
        <h1>Sangamsoftsol Movies...</h1>
        <p>upto date movies information</p>
        <a href="#" class="btn btn-primary" role="button">ADD</a>
        <a href="#" class="btn btn-primary" role="button">Movies List</a>
    </div>    
</body>
</html>

add 2 more html files for ADD and MOVIES LIST

#{ is a special symbol
print(f'{{{{ is a special symbol')

C:\Users\abc\Desktop\django>py test.py
{{ is a special symbol

name='Sai'
print(f'name:{name}')
print(f'name:{{name}}')
print(f'name:{{{name}}}')
print(f'name:{{{{name}}}}')

C:\Users\abc\Desktop\django>py test.py
name:Sai
name:{name}
name:{Sai}
name:{{name}}

#} is my favourite symbol
print(f'}} is my favourite symbol')

C:\Users\abc\Desktop\django>py test.py
  File "C:\Users\abc\Desktop\django\test.py", line 2
    print(f'} is my favourite symbol')
            ^
SyntaxError: f-string: single '}' is not allowed

C:\Users\abc\Desktop\django>py test.py
} is my favourite symbol

x=10
y=20
print(f'x={x}')
print(f'y={y}')
print(f'{x=}')
print(f'{y=}')

C:\Users\abc\Desktop\django>py test.py
x=10
y=20
x=10
y=20

walrus operator
positional only operator
keyword only parameters
ooprogramming problems
formatting (%,str.format(),f-strings)
timeit module
handling quotes in f-string
how to process dict data
how to define multiple f-strings
f-strings for objects
expressions inside f-strings
dict features from 3.7.3.8,3.9 vers
new syntax warnings
=============================================
continuation to the past project

views.py
from django.shortcuts import render
from firstapp.models import Movie

# Create your views here
def movie_view(request):
    return render(request,'testapp/wish.html')

def movie_list_view(request):
    movie_list=Movie.objects.all()
    return render(request,'testapp/news.html',{'movie_list':movie_list})

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <div class="container" align="center">
        <h1>Sangamsoftsol Movies...</h1>
        <p>upto date movies information</p>
        <a href="/addmovie/" class="btn btn-primary" role="button">ADD</a>
        <a href="/movie/" class="btn btn-primary" role="button">Movies List</a>
    </div>    
</body>
</html>

news.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Movies List</title>
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> -->
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">

</head>
<body>
    {% if movies_list %} 
    <h1>Movies Information</h1> 
    <table border="2">
        <thead>
            <th>Release Date</th>
            <th>Movie Name</th>
            <th>Hero</th>
            <th>Heroine</th>
            <th>Rating</th>
        </thead>
        {% for movie in movies_list %}
        <tr>
            <td>{{movie.rdate}}</td>
            <td>{{movie.moviename}}</td>
            <td>{{movie.hero}}</td>
            <td>{{movie.heroine}}</td>
            <td>{{movie.rating}}</td>
        </tr>
        {% endfor %}
    </table>
    {% else %} 
    <h1>No Movies Found</h1>
    {% endif %}     
</body>
</html>

thankyou.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Students Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
</head>
<body>
    <div class="container" align="center">
    <h1>Add Movies Information</h1> 
    <form method="post">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" class="btn btn-primary" value="Add Movie">
    </form>
    </div>   
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.movie_view),
    path('movie/', views.movie_list_view),
    path('addmovie/', views.add_movie_view),
]

forms.py
from django import forms
from firstapp.models import Movie

class MovieForm(forms.ModelForm):
    class Meta:
        model=Movie
        fields= '__all__'

views.py
from django.shortcuts import render
from firstapp.models import Movie
from firstapp.forms import MovieForm

# Create your views here
def movie_view(request):
    return render(request,'testapp/wish.html')

def movie_list_view(request):
    movies_list = Movie.objects.all()  # Use 'movies_list' to match the template
    return render(request, 'testapp/news.html', {'movies_list': movies_list})

def add_movie_view(request):
    form=MovieForm()
    if request.method=='POST':
        form=MovieForm(request.POST)
        if form.is_valid():
            form.save(commit=True)
	return movie_view(request)
    return render(request, 'testapp/thankyou.html',{'form':form})

style.css
h1{
    text-align: center;
}

body{
    background: white;
    color: rgba(31,180,161,255);

    background: url(../images/bg.jpg);
    background-repeat: no-repeat;
    background-size: cover;
}


Working with advanced template features:
Advanced Templates:
1. Template Inheritance
2. Template Filters

Template Inheritance:
If multiple template files have common code, it is not recommended to write common that common code in every template html file.
It increases length of the code and reduce readability. it is also increase development time
we have to seperate that common code into a new template file, which is also known as base template
the remaining template files should required to extend base templates. so that the common code will be inherited automatically

Inheriting common code from base template to remaining templates is nothing but template inheritance

How to implement template inheritance:

base.html
<body>
  commoncode required for every child template
  {% block child_block %}
	Anything outside of this block available to child tag.
	In child template the specific code should be in this block
  {% endblock %}

child.html
<!DOCTYPE html>
{% extends 'firstapp/base.html' %}
{% block child_block %}
	child specific code
{% endblock %}

how to add seperate css files to child templates?
django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol News</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <nav class="navbar">
        <a class="navbar" href="#">Sangam Softsol News</a>
        <div class="container">
            <ul class="navbar-nav">
                <li><a class="navbar" href="/movie/">Movies</a></li>
                <li><a class="navbar" href="/sports/">Sports</a></li>
                <li><a class="navbar" href="/politics/">Politics</a></li>
            </ul>
        </div>
    </nav>
    {% block body_block %}
    {% endblock %}
</body>
</html>

news.html
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% load static %}
{% block body_block %}
<h1>This is Movies Information</h1>
{% endblock %}
</html>

thankyou.html
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% load static %}
{% block body_block %}
<h1>This is sports Information</h1>
{% endblock %}
</html>

politics.html
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% load static %}
{% block body_block %}
<h1>This is Politics Information</h1>
{% endblock %}
</html>

views.py
from django.shortcuts import render

# Create your views here
def base_view(request):
    return render(request,'testapp/wish.html')

def movie_view(request):
    return render(request,'testapp/news.html')

def sports_view(request):
    return render(request,'testapp/thankyou.html')

def politics_view(request):
    return render(request,'testapp/politics.html')

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.base_view),
    path('movie/', views.movie_view),
    path('sports/', views.sports_view),
    path('politics/', views.politics_view),
]

style.css
h1{
    text-align: center;
    color: rgba(31,180,161,255);
}

body{
    background: white;
    color: rgba(31,180,161,255);

    background: url(../images/bg.jpg);
    background-repeat: no-repeat;
    background-size: cover;
}

.navbar{
    background: white;
}

.navbar.a{
    color: blue;
}

li a{
    color: red;
}

how to merge 2 list into a new list

l1=[10,20,30]
l2=[40,50,60]
# l3=l1+l2
l3=[*l1,*l2]
print(l3)

C:\Users\abc\Desktop\django>py test.py
[10, 20, 30, 40, 50, 60]

C:\Users\abc\Desktop\django>py test.py
[10, 20, 30, 40, 50, 60]

How to update existing list with elements of another list

l1=[10,20,30]
l2=[40,50,60]
# l3=l1+l2
# l3=[*l1,*l2]
l1.extend(l2)
print(l1)

C:\Users\abc\Desktop\django>py test.py
[10, 20, 30, 40, 50, 60]

how to merge 2 tuples into a tuple
t1=(10,20,30)
t2=(40,50,60)
t3=t1+t2
print(t3)
t4=[*t1,*t2]
print(t4)

C:\Users\abc\Desktop\django>py test.py
(10, 20, 30, 40, 50, 60)
[10, 20, 30, 40, 50, 60]

How to update existing tuple with elements of another tuple
it is impossible

how to merge 2 sets into a new set?
s1={10,20,30}
s2={40,50,60}
s3=s1|s2
print(s3)
s4={*s1,*s2}
print(s4)

C:\Users\abc\Desktop\django>py test.py
{50, 20, 40, 10, 60, 30}

How to update existing set with elements of another set
s1={10,20,30}
s2={40,50,60}
# s1.update(s2)
s1|=s2
print(s1)

C:\Users\abc\Desktop\django>py test.py
{50, 20, 40, 10, 60, 30}
=============================================
Advanced Templates
template inheritance
	base.html
	common code
	{block}

Note: In the parent template, we can define any number of blocks, But child template is responsible to implement these blocks

Its not mandatory to implement every parent block in child. based on our requirement, child template can decide which blocks are 
required to implement.

While implementing blocks in child template its not required to follow the order

child template can extend any number of parent templates. i.e, multiple inheritance allowed

Advantages of template inheritance:
whatever code available in base template is by default available to child templates and we are not required to write again.
hence it promotes code reusability.

it reduces length of the code and improves readability

it reduces project development time

it provides unique and same look and feel for total web application

Template Filters
In the template file the injected data can be displayed by using template tags.

before displaying to the end user, if we want to perform some modifications to the injected text, like add something or cut something,
case conversion, etc.. then we should go for filter.

Syntax for template filter
{{value | filtername}}  
{{value | filtername:'arguement'}}

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

Ex: Filter Project

models.py
from django.db import models

# Create your models here.
class Filter(models.Model):
    name=models.CharField(max_length=20)
    subject=models.CharField(max_length=20)
    dept=models.CharField(max_length=20)
    date=models.DateTimeField()

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0008_filter_delete_movie.py
    + Create model Filter
    - Delete model Movie

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0008_filter_delete_movie... OK

Admin.py
from django.contrib import admin
from firstapp.models import Filter

# Register your models here.
class FilterAdmin(admin.ModelAdmin):
    list_display=['name','subject','dept','date']

admin.site.register(Filter,FilterAdmin)

create superuser and add some data

views.py
from django.shortcuts import render
from firstapp.models import Filter

# Create your views here
def upper_data_view(request):
    records=Filter.objects.all()
    return render(request,'testapp/wish.html',{'records':records})

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Pagecount</title>
    <style>
        span{
        font-size: 150px;
        font-weight: 600;
        color: red;
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    {% for record in records %}
    <h1>{{record.name}} Informatio</h1>
    <ul>
        <li>{{record.name | upper}}</li>
        <li>{{record.subject | lower}}</li>
        <li>{{record.dept | title}}</li>
        <li>{{record.date | date:'d-m-Y'}}</li>
    </ul><hr>
    {% endfor %}  
</body>
</html>

<li>{{record.date | date:'m-d-Y'}}</li>
<li>{{record.date | date:'d/m/Y'}}</li>
<li>{{record.date | timesince}}</li>
<li>{{record.date | date:'d-b-Y'}}</li>
<li>{{record.date | date:'l-F j-Y'}}</li>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('upper/', views.upper_data_view),

]

How to create our own filters:
Based on our requirement, we can create own filters, if predefined fields are not fulfilled our requirement

steps:
create a folder 'templatetags' inside our application
create special file named with '__init__.py' inside this folder(templatetags), so the django will consider this folder as python package
create a python file inside this folder to define our filters 'cust_filters.py'

cust_filter.py (C:\Users\abc\Desktop\django\firstproject\firstapp\templatetags\cust_filter.py)
from django import template
register=template.Library()

def first_five_upper(value):
    result=value[:5].upper()
    return result

register.filter('ffu',first_five_upper)

in wish.html
<body> 
    {% load cust_filter %}
    {% for record in records %}
    <h1>{{record.name}} Informatio</h1>
    <ul>
        <li>{{record.name | ffu}}</li>
        <li>{{record.subject | lower}}</li>
        <li>{{record.dept | title}}</li>
        <li>{{record.date | date:'d-m-Y'}}</li>
    </ul><hr>
    {% endfor %}  
</body>
=============================================
Session Management

The client and server can communicate with some common lanuage, which is nothing but HTTP.

the basic limitation of HTTP is, it is stateless protocol, it is unable to remember client information for future purpose across 
multiple requests

Every request to the server is treated as new request only.

To remember client information at server side, some special mechanism must be required whic is nothing but session management 
mechanism.

Different session management mechanisms are:
Cookies
Session API

Session Management by using cookies concept:
OP Record of Doctor

cookie is a small amount of information created by server and maintained by client. Cookies are key-value pairs

To add cookies to response.
  response.set_cookie(cname,cvalue)

To get the cookies send by client.
  request.COOKIES[cname]
  request.COOKIES.get(cname)
  request.COOKIES.get(cname,defaultvalue)

>>> d={'A':10,'B':20}
>>> type(d)
<class 'dict'>
>>> d
{'A': 10, 'B': 20}
>>> d['A']
10
>>> d.get('A')
10
>>> d.get('C')
>>> print(d.get('C'))
None
>>> print(d.get('C',30))
30
>>> print(d.get('C',0))
0
>>> d
{'A': 10, 'B': 20}

Page Count Application

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
No changes detected

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  No migrations to apply.

views.py
from django.shortcuts import render

# Create your views here
def page_count_view(request):
    print('Cookies from the client:',request.COOKIES)
    count=int(request.COOKIES.get('count',0))
    count+=1
    response=render(request,'testapp/wish.html',{'count':count})
    response.set_cookie('count',count)
    return response

wish.html
<!DOCTYPE html>
<!-- {% load static %} -->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol Pagecount</title>
    <style>
        span{
        font-size: 150px;
        font-weight: 600;
        color: red;
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <h1>The Page Count:<span>{{count}}</span></h1>   
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('page/', views.page_count_view),

]

output at server console
C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 18, 2025 - 15:45:30
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

[18/Jan/2025 15:45:47] "GET /page HTTP/1.1" 301 0
Cookies from the client: {}
[18/Jan/2025 15:45:48] "GET /page/ HTTP/1.1" 200 731
[18/Jan/2025 15:45:48] "GET /static/css/style.css HTTP/1.1" 200 344
[18/Jan/2025 15:45:49] "GET /static/images/sangamsoft.jpg HTTP/1.1" 200 7164
[18/Jan/2025 15:45:49] "GET /static/images/bg.jpg HTTP/1.1" 200 53307
Cookies from the client: {'count': '1'}
[18/Jan/2025 15:46:04] "GET /page/ HTTP/1.1" 200 731
Cookies from the client: {'count': '2'}
[18/Jan/2025 15:46:08] "GET /page/ HTTP/1.1" 200 731

output on ui page:
The Page Count:3

if we keep on refreshing the page, then automatically count changes, if we close the browser, start again then count again starts
from zero, if we open another browser same thing happen

for the first request, client(browser) doesn't contain any data 
 
client is sending the first request:
whatever information required for future purpose, server will decide, with that information, server will create cookie and it should
be handedover to the client, response will be sent to the client.

server will add cookie to the response then automatically cookie will be reached to the client

simply cookie means, server creating and browser maintaining

in older versions like 3.1 decorator not available

#bolier plate code
from dataclasses import dataclass
@dataclass
class Employee: 
    # def __init__(self,eno,ename,esal,eaddr):
        # self.eno=eno
        # self.ename=ename
        # self.esal=esal
        # self.eaddr=eaddr
    eno:int
    ename:str
    esal:int
    eaddr:str
        
    # def __repr__(self):
    #     return f'Employee({self.eno},{self.ename},{self.esal},{self.eaddr})'
    # def __eq__(self,other):
    #     # if self.eno==other.eno and self.ename==other.ename and self.esal==other.esal and self.eaddr==other.eaddr:
    #     #     return True
    #     # else:
    #     #     False
    #     return (self.eno,self.ename,self.esal,self.eaddr)==(other.eno,other.ename,other.esal,other.eaddr)
e1=Employee(101,'sai',200000,'Guntur')
e2=Employee(102,'virat',150000,'delhi')
e3=Employee(101,'sai',200000,'Guntur')
print(e1)
# print(e2)
print(e1==e2)
print(e1==e3)
=============================================
django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

makemigrations and migrate

forms.py
from django import forms

class LoginForm(forms.Form):
    name=forms.CharField()

views.py
from django.shortcuts import render
from firstapp.forms import LoginForm

# Create your views here
def home_view(request):
    form=LoginForm()
    return render(request,'testapp/wish.html',{'form':form})

def date_time_view(request):
    name=request.GET['name']
    response=render(request,'testapp/news.html',{'name':name})
    response.set_cookie('name',name)
    return response

wish.html
<!DOCTYPE html>
<!-- {% load static %} -->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <!-- <style>
        span{
        font-size: 150px;
        font-weight: 600;
        color: red;
        }
    </style> -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body> 
    <h1>Welcome to sangamsoft</h1>
    <form action="/second">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" name="" value="Enter Name">
    </form> 
</body>
</html>

news.html<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
</head>
<body>
    <h1>Hello {{name}}</h1>
    <a href="/result">Click here to get the Date and Time</a>    
</body>
</html>

thankyou.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
</head>
<body>
    <h1>Hello {{name}}</h1><hr>
    <h1>current Date and Time:{{date_time}}</h1>
    <a href="#">Click here to update the time</a>
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('home/', views.home_view),
    path('second/', views.date_time_view),
    path('result/', views.result_view),
]

flow:
http://127.0.0.1:8000/home/
home.html will be displayed
if we submit then request will go to the url-pattern:/second which is associated with views.date_time_view
this view functions sends news.html as response and in that response name_cookie will be added for the future usage

Diff between data type and data structure
=============================================
name
submit

hello name
enter age
submit

hello name
enter gf name
submit

all details in final page

SessionProject
django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

makemigrations and migrate (to get system related tables)

views.py
from django.shortcuts import render

# Create your views here
def home_view(request):
    return render(request,'testapp/wish.html')

def age_view(request):
    print(request.COOKIES)
    username=request.GET['name']
    response=render(request,'testapp/news.html',{'name':username})
    response.set_cookie('name',username)
    return response

def gf_view(request):
    print(request.COOKIES)
    username=request.COOKIES['name']
    age=request.GET['age']
    response=render(request,'testapp/thankyou.html',{'name':username})
    response.set_cookie('age',age)
    return response

def result_view(request):
    print(request.COOKIES)
    username=request.COOKIES['name']
    age=request.COOKIES['age']
    gfname=request.GET['gf']
    response=render(request,'testapp/politics.html',{'name':username,'age':age,'gf':gfname})
    response.set_cookie('gf',gfname)
    return response

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
</head>
<body> 
    <h1>Welcome to sangamsoft</h1>
    <form action="/age">
        Enter name:<input type="text" name="name"><br><br>
        <input type="submit" value="Submit Name">
    </form> 
</body>
</html>

if we want to implement this code using forms then don't take 
<form action="/age">
        Enter name:<input type="text" name="name"><br><br>
        <input type="submit" value="Submit Name">
    </form> 
take form, create object then send this as form.as_p in wish.html
in forms.py 1st class home_form, 2nd class age_form, 3rd class gf_form,4th class result_form

news.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
</head>
<body>
    <h1>Hello {{name}}</h1>
    <form action="/gf">
        Enter Age:<input type="text" name="age" value=""><br><br>
        <input type="submit" name="" value="Submit Age">
    </form>    
</body>
</html>

thankyou.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
</head>
<body>
    <h1>Hello {{name}}</h1><hr>
    <form action="/result">
        Enter GF Name:<input type="text" name="gf" value=""><br><br>
        <input type="submit" value="Submit GF Name">
    </form>
</body>
</html>

politics.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Hello {{name}}, thanks for providing information</h1>
    <h2>Please cross check your data and confirm</h2>
    <ul>
        <li>Name:{{name}}</li>
        <li>Age:{{age}}</li>
        <li>GF Name:{{gf}}</li>
    </ul>
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('home/', views.home_view),
    path('age/', views.age_view),
    path('gf/', views.gf_view),
    path('result/',views.result_view)
]

style.css
h1{
    text-align: center;
    color: red;
}

body{
    background: white;
    color: red;

    background: url(../images/bg.avif);
    background-repeat: no-repeat;
    background-size: cover;
}

.navbar{
    background: white;
}

.navbar.a{
    color: blue;
}

li a{
    color: red;
}


at UI (http://127.0.0.1:8000/home/)
Enter name: sai
submit

Hello sai (http://127.0.0.1:8000/age/?name=sai)
Enter Age: 30
Submit Age

Hello sai (http://127.0.0.1:8000/gf/?age=30)
Enter GF Name: Pooja Hegde
Submit GF Name

at last page (http://127.0.0.1:8000/result/?gf=poojs)
Hello sai, thanks for providing information
Please cross check your data and confirm
Name:sai
Age:30
GF Name:poojs

at server console

C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 19, 2025 - 13:11:52
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

[19/Jan/2025 13:12:47] "GET /home/ HTTP/1.1" 200 722
[19/Jan/2025 13:12:48] "GET /static/css/style.css HTTP/1.1" 200 344
[19/Jan/2025 13:12:48] "GET /static/images/bg.jpg HTTP/1.1" 200 53307
[19/Jan/2025 13:12:48] "GET /static/images/sangamsoft.jpg HTTP/1.1" 200 7164
[19/Jan/2025 13:13:16] "GET /age?name=sai HTTP/1.1" 301 0
{}
[19/Jan/2025 13:13:16] "GET /age/?name=sai HTTP/1.1" 200 391
[19/Jan/2025 13:13:28] "GET /gf?age=30 HTTP/1.1" 301 0
{'name': 'sai'}
[19/Jan/2025 13:13:28] "GET /gf/?age=30 HTTP/1.1" 200 395
[19/Jan/2025 13:13:39] "GET /result?gf=pooja+hegde HTTP/1.1" 301 0
{'name': 'sai', 'age': '30'}
[19/Jan/2025 13:13:39] "GET /result/?gf=pooja+hegde HTTP/1.1" 200 417

if we close the browser and open again, http://127.0.0.1:8000/result/?gf=poojs key error comes, because here we are directly 
accessing username=request.COOKIES['name'] here COOKIES is a dictionary, that key not available. so we will get key error

once browser closed, cookes not available, coz they are temporary cookies

Temporary vs Permanent cookies:
If we are dont sent max_age to the cookie, then the cookie will be stored in browsers cache memory, once we close the browser the 
cookie automatically be expired, such type of cookies are called as temporary cookies

we can create temporary cookies:
	response.set_cookie(name,value)

if we set max_age to the cookies, then cookies will be stored in local file system permanently, once the specified max_age expired
then only cookies will be expired, call those cookies as permanent cookies or persistent cookies.

we can create permanent cookies:
response.set_cookie(name,value,120)

max_age= 3*30*24*60*60
3-months

response.set_cookie('name',username,120)
response.set_cookie('age',age,120)
response.set_cookie('gf',gfname,120)

Home Page

Sangam Softsol Shopping App
AddItem	DisplayItems

click on AddItem

Add Item Form

Itemname:
Quantity:

Add Item
Display Items 

click on display items

Shopping Cart Items

Inspect module: Inspection
From which module/function call is coming...

test.py
import inspect
# def get_info():pass
def get_info():
    # print(inspect.stack())
    # print(inspect.stack()[1])
    print('Caller Module Name:',inspect.stack()[1][1])
    print('Caller Function Name:',inspect.stack()[1][3])

test1.py
from test import get_info

def f1():
    get_info()  # Display stack info

f1()  # Call the function once

C:\Users\abc\Desktop\django>py test1.py
[FrameInfo(frame=<frame at 0x000002041C5E16F0, file 'C:\\Users\\abc\\Desktop\\django\\test.py', line 4, code get_info>, 
filename='C:\\Users\\abc\\Desktop\\django\\test.py', lineno=4, function='get_info', code_context=['    print(inspect.stack())\n'], 
index=0, positions=Positions(lineno=4, end_lineno=4, col_offset=10, end_col_offset=25)),

FrameInfo(frame=<frame at 0x000002041C560040, file 'C:\\Users\\abc\\Desktop\\django\\test1.py', line 4, code f1>, 
filename='C:\\Users\\abc\\Desktop\\django\\test1.py', lineno=4, function='f1', code_context=['    get_info()  # Display stack info\n'],
index=0, positions=Positions(lineno=4, end_lineno=4, col_offset=4, end_col_offset=14)),

FrameInfo(frame=<frame at 0x000002041C24A160, file 'C:\\Users\\abc\\Desktop\\django\\test1.py', line 6, code <module>>, 
filename='C:\\Users\\abc\\Desktop\\django\\test1.py', lineno=6, function='<module>', 
code_context=['f1()  # Call the function once\n'], index=0, positions=Positions(lineno=6, end_lineno=6, col_offset=0, 
end_col_offset=4))]

C:\Users\abc\Desktop\django>py test1.py
[FrameInfo(frame=<frame at 0x000002041C5E16F0, file 'C:\\Users\\abc\\Desktop\\django\\test.py', line 4, code get_info>, filename='C:\\Users\\abc\\Desktop\\django\\test.py', lineno=4, function='get_info', code_context=['    print(inspect.stack())\n'], index=0, positions=Positions(lineno=4, end_lineno=4, col_offset=10, end_col_offset=25)), FrameInfo(frame=<frame at 0x000002041C560040, file 'C:\\Users\\abc\\Desktop\\django\\test1.py', line 4, code f1>, filename='C:\\Users\\abc\\Desktop\\django\\test1.py', lineno=4, function='f1', code_context=['    get_info()  # Display stack info\n'], index=0, positions=Positions(lineno=4, end_lineno=4, col_offset=4, end_col_offset=14)), FrameInfo(frame=<frame at 0x000002041C24A160, file 'C:\\Users\\abc\\Desktop\\django\\test1.py', line 6, code <module>>, filename='C:\\Users\\abc\\Desktop\\django\\test1.py', lineno=6, function='<module>', code_context=['f1()  # Call the function once\n'], index=0, positions=Positions(lineno=6, end_lineno=6, col_offset=0, end_col_offset=4))]


C:\Users\abc\Desktop\django>py test1.py
FrameInfo(frame=<frame at 0x000002270697E480, file 'C:\\Users\\abc\\Desktop\\django\\test1.py', line 4, code f1>, filename='C:\\Users\\abc\\Desktop\\django\\test1.py', lineno=4, function='f1', code_context=['    get_info()  # Display stack info\n'], index=0, positions=Positions(lineno=4, end_lineno=4, col_offset=4, end_col_offset=14))

C:\Users\abc\Desktop\django>py test1.py
Caller Module Name: C:\Users\abc\Desktop\django\test1.py
Caller Function Name: f1
============================================
django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

makemigrations and migrate

views.py
from django.shortcuts import render
from firstapp.forms import AddItemForm

# Create your views here
def index_view(request):
    return render(request,'testapp/wish.html')

def additem_view(request):
    form=AddItemForm()
    # return render(request,'testapp/news.html',{'form':form})
    response=render(request,'testapp/news.html',{'form':form})
    if request.method =='POST':
        form=AddItemForm(request.POST)
        if form.is_valid():
            name=form.cleaned_data['itemname']
            quantity=form.cleaned_data['quantity']
            response.set_cookie(name,quantity,60)
    return response

def display_view(request):
    return render(request,'testapp/thankyou.html')

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
</head>
<body>
    <div class="container">
        <div class="jumbtron">
            <h1>sangamsoft Online Shopping App</h1>
            <a href="/aditem" class="btn btn-primary">Add Item</a>
            <a href="/display" class="btn btn-primary">Display Item</a>
        </div>
    </div>
</body>
</html>

forms.py
from django import forms

class AddItemForm(forms.Form):
    itemname=forms.CharField()
    quantity=forms.IntegerField()

news.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
</head>
<body>
    <div class="container" align="center">
        <h1>Add Item Form</h1>
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" value="Add Item"><br><br>
            <a href="/display" class="btn btn-primary">Display Item</a>
        </form>
    </div>   
</body>
</html>

thankyou.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
</head>
<body>
    <h1>Shopping Cart Items</h1><hr>
    {% if request.COOKIES %}
        <table border="3">
            <thead>
                <th>Item Name</th>
                <th>Quantity</th>
            </thead>
            {% for key, value in request.COOKIES.items %}
                {% if key != 'csrftoken' %}
                <tr>
                    <td>{{ key }}</td>
                    <td>{{ value }}</td>
                </tr>
                {% endif %}
            {% endfor %}
        </table>
    {% else %}
        <p>No Items in shopping cart</p>
    {% endif %}
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index_view),
    path('aditem/', views.additem_view),
    path('display/', views.display_view),
]

style.css
h1{
    text-align: center;
    color: red;
}

body{
    background: white;
    color: red;

    background: url(../images/bg.avif);
    background-repeat: no-repeat;
    background-size: cover;
}

.navbar{
    background: white;
}

.navbar.a{
    color: blue;
}

li a{
    color: red;
}

Limitations of cookies:
By using cookies, we can store less amount of information, the size of cookies is fixed, hence if we want to store huge amount of 
information then cookies is not best choice
we can store string data only using cookies, cookies info stored at client(browser) side, then there is no security
every time with every request, browser will send all cookies related to that applications, which creates network traffic problems
there is limit on max number of cookies supported by browser

chrome: cookies count limit per domain, total size of cookies 4096

To overcome these limitations we should go for session framework

django provides inbuilt support for session api

INSTALLED_APPS = [
    'django.contrib.sessions',
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
]

Session management by using session API(Django Session Framework)
cookies -- op record of patient

session framework: bank locker, chappal stand token in temple, hospital management system in superspeciality hosp, they give one PID

cookie: cookie+reponse next request+cookie
session: cookie+sessionID next request+session ID

useful methods for session management:
To add data to the session
	request.session['key']=value

To get the data from the session
	value=request.session['key']

reuest.session.set_expiry(seconds)
	set expiry time for the session

request.session.set_expiry_age()
	returns expiry age in seconds (the no.of seconds untill this session expires)

request.session.get_expiry_date():
reurns the date on which session get expired
============================================
Page Count App By Using Management:

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

make migrations and migrate

views.py
from django.shortcuts import render

# Create your views here
def page_count_view(request):
    print(request.COOKIES)
    count=request.session.get('count',0)
    count+=1
    request.session['count']=count
    # request.session.set_expiry(60)
    request.session.set_expiry(0)
    print(request.session.get_expiry_age())
    print(request.session.get_expiry_date())
    return render(request,'testapp/wish.html',{'count':count})

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <style>
        span {
            font-size: 300px;
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
    <h1>Page Count:<span>{{count}}</span></h1>
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('page/', views.page_count_view),
]

Note:
request.session.set_expiry(120)
    request.session.set_expiry(0) -- once we close the browser, session will automatically be expired

no expiry set
-------------
3 requests sent.. (means 3 times refreshed)
C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 20, 2025 - 18:32:25
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D'}
1209600
[20/Jan/2025 18:33:10] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': '7euiu4w3awpvfwz3cuc84r8zt8p71lgf'}
1209600
[20/Jan/2025 18:33:24] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': '7euiu4w3awpvfwz3cuc84r8zt8p71lgf'}
1209600
[20/Jan/2025 18:33:37] "GET /page/ HTTP/1.1" 200 663

with expiry date, done same, 3 requests sent..
C:\Users\abc\Desktop\django\firstproject\firstapp\views.py changed, reloading.
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 20, 2025 - 18:34:26
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D'}
1209600
2025-02-03 13:05:01.098192+00:00
[20/Jan/2025 18:35:04] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': '1g63dto6xy2rn2xi5l28zsbfcl29ht7f'}
1209600
2025-02-03 13:05:21.419331+00:00
[20/Jan/2025 18:35:21] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': '1g63dto6xy2rn2xi5l28zsbfcl29ht7f'}
1209600
2025-02-03 13:05:30.321634+00:00
[20/Jan/2025 18:35:31] "GET /page/ HTTP/1.1" 200 663


set expiry for 60 sec
---------------------
C:\Users\abc\Desktop\django\firstproject\firstapp\views.py changed, reloading.
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 20, 2025 - 18:36:49
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D'}
60
2025-01-20 13:08:03.143589+00:00
[20/Jan/2025 18:37:07] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': 'lvri92arfgh1flufmr6ua94knutxt7i8'}
60
2025-01-20 13:08:23.026589+00:00
[20/Jan/2025 18:37:23] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': 'lvri92arfgh1flufmr6ua94knutxt7i8'}
60
2025-01-20 13:08:26.814603+00:00
[20/Jan/2025 18:37:27] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D'}
60
2025-01-20 13:11:04.512792+00:00
[20/Jan/2025 18:40:04] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': '2laaxu5xfikodpkn0rj4lh0hrew7q554'}
60
2025-01-20 13:11:11.587471+00:00
[20/Jan/2025 18:40:11] "GET /page/ HTTP/1.1" 200 663

expiry set 0 (untill closing the browser, session will be maintained) open browser refresh thrice, then close, open again see the 
count is 1
------------
C:\Users\abc\Desktop\django\firstproject\firstapp\views.py changed, reloading.
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 20, 2025 - 18:42:28
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D'}
1209600
2025-02-03 13:13:13.876133+00:00
[20/Jan/2025 18:43:14] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': 'ta462kgnxvfche5urojvhumpb3fzkuxh'}
1209600
2025-02-03 13:13:19.320672+00:00
[20/Jan/2025 18:43:19] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': 'ta462kgnxvfche5urojvhumpb3fzkuxh'}
1209600
2025-02-03 13:13:20.442695+00:00
[20/Jan/2025 18:43:20] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D'}
1209600
2025-02-03 13:13:40.849786+00:00
[20/Jan/2025 18:43:41] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': 'zmp4g6o19wu4zd3bs1x64fs9i8tv4bwy'}
1209600
2025-02-03 13:13:49.598399+00:00
[20/Jan/2025 18:43:49] "GET /page/ HTTP/1.1" 200 663
{'csrftoken': '9V7rPGfe8rFXyJIZn60wETKFUozt0S9D', 'sessionid': 'zmp4g6o19wu4zd3bs1x64fs9i8tv4bwy'}
1209600
2025-02-03 13:13:51.008355+00:00
[20/Jan/2025 18:43:51] "GET /page/ HTTP/1.1" 200 663

Profile application:
Name:
Age:
GF:
Please check your complete info

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

make migrations and migrate

forms.py
from django import forms

class NameForm(forms.Form):
    name=forms.CharField()

class AgeForm(forms.Form):
    age=forms.IntegerField()

views.py
from django.shortcuts import render
from firstapp.forms import NameForm,AgeForm

# Create your views here
def name_view(request):
    form=NameForm()
    return render(request,'testapp/wish.html',{'form':form})

def age_view(request):
    name=request.GET['name']
    request.session['name']=name
    form=AgeForm()
    return render(request,'testapp/news.html',{'form':form,'name':name})

wish.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <style>
        span {
            font-size: 300px;
        }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
    <h1>Name Registration Form</h1>
    <form action="/age">
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" value="Submit Name">
    </form>
</body>
</html>

news.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
</head>
<body>
    <h1>Hello {{name}}, Provide Age</h1>
    <form>
        {{form.as_p}}
        {% csrf_token %}
        <input type="submit" value="Submit Age">
    </form>   
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('name/', views.name_view),
    path('age/', views.age_view),
]

=============================================
User Authentication and Authorization

Authentication: the process of validating the user

Authorization: the process of validating acess permission of a user

login page: username and password should be stored for future purpose, validation must be required

auth applications:
django.contrib.auth
django.contrib.contenttypes

Demo app for authentication
django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

make migrations and migrate

wish.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\wish.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
          <a class="navbar-brand" href="#">SANGAM SOFTSOL</a>
            <ul class="navbar-nav mr-auto">
              <li class="nav-item" active>
                <a class="nav-link" href="/">Home <span class="sr-only"></span></a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/fullstack">FullStack Development</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/uidev">UI Development</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/cloud">Cloud Solutions</a>
              </li>
            </ul>
            <ul class="navbar-nav ml-auto">
              <li class="nav-item">
                <a class="nav-link" href="/signup">Signup</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/accounts/login">Login</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/logout">Logout</a>
              </li>
            </ul>
        </div>
      </nav>
      {% block body_block %}
      {% endblock %}
</body>
</html>

news.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\news.html)
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}

<div class="jumbotron">
    <div class="container">
        <h1>Welcome to sangam Softsol Consultancy Services</h1>
        <h2>RULES:</h2>
            <li>Rule1: Graduation</li>
            <li>Rule2: Just Basics of Programming</li>
            <li>Rule3: Analytical Thinking</li>
            <li>Rule4: Problem Solving</li>
            <li>Rule5: All the above are not necessary, if you have passsion</li>
    </div>
</div>
{% endblock %}


thankyou.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\thankyou.html)
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}

<div class="jumbotron">
    <div class="container" align="center">
        <h1>Welcome to FullStack Development</h1>
    </div>
</div>
{% endblock %}

politics.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\politics.html)
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}

<div class="jumbotron">
    <div class="container" align="center">
        <h1>Welcome to UI Development</h1>
    </div>
</div>
{% endblock %}

cloud.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\cloud.html)
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}

<div class="jumbotron">
    <div class="container" align="center">
        <h1>Welcome to Cloud Solutions</h1>
    </div>
</div>
{% endblock %}

views.py
from django.shortcuts import render
from django.contrib.auth.decorators import login_required

# Create your views here
def home_view(request):
    return render(request,'testapp/news.html')

@login_required

def fullstack_dev_view(request):
    return render(request,'testapp/thankyou.html')

@login_required

def ui_dev_view(request):
    return render(request,'testapp/politics.html')

@login_required

def cloud_sol_view(request):
    return render(request,'testapp/cloud.html')


auth applications will use one table: user
create superuser and add one user

abc@123
aubNW3uuq7u8-wC

problem1:
Page not found (404)
Request Method:	GET
Request URL:	http://127.0.0.1:8000/accounts/login/?next=/fullstack/

solve this problem by including auth application url

Problem2:
TemplateDoesNotExist at /accounts/login/
registration/login.html
Request Method:	GET
Request URL:	http://127.0.0.1:8000/accounts/login/?next=/fullstack/
Django Version:	5.1.4
Exception Type:	TemplateDoesNotExist
Exception Value:	
registration/login.html

create a folder under templates with name registration and create a file login.html

login.html(C:\Users\abc\Desktop\django\firstproject\templates\registration\login.html)
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}
<div class="jumbotron">
    <div class="container" align="center">
        <h1>Please Login to Become FullStack Developer</h1>
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" value="Login">
        </form>
    </div>
</div>
{% endblock %}

logout.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\logout.html)
-----------


urls.py
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.home_view),
    path('fullstack/', views.fullstack_dev_view),
    path('uidev/', views.ui_dev_view),
    path('cloud/', views.cloud_sol_view),
    path('accounts/', include('django.contrib.auth.urls')),
]

http://127.0.0.1:8000/
http://127.0.0.1:8000/uidev/
http://127.0.0.1:8000/cloud/

=============================================
implementing login functionality

note:
login page url pattern from auth applicaton:/accounts/login/

Requested URLs
http://127.0.0.1:8000/accounts/login/?next=/fullstack/
http://127.0.0.1:8000/accounts/login/?next=/uidev/
http://127.0.0.1:8000/accounts/login/?next=/cloud/

if we click login button, after login next page is profile page bydefault
if we want to configure our own destination page, we have to write a line in settings.py

step1: update the login link as below
<a class="nav-link" href="/accounts/login">Login</a>

step2: configure destination page inside settings.py
STATIC_URL = 'static/'
STATICFILES_DIRS=[STATIC_DIR]
LOGIN_REDIRECT_URL='/'
LOGOUT_REDIRECT_URL='/logout'

Implement logout functionality
step1: update the logout link as below
<a class="nav-link" href="/accounts/logout">Logout</a>

Implementing signup button functionality
auth application having form class to provide login form
but auth application doesn't contain any form class for signup functionality
if a user signup, compulsory that information should be stored in DB(user table)

display form to signup and that information should be stored inside DB directly. for such type of requirement it is highly recommended
to go for model based form

forms.py
from django import forms
from django.contrib.auth.models import User
class SignUpForm(forms.ModelForm):
    class Meta:
        model=User
        fields=['username','password','email','first_name','last_name']

views.py
from django.shortcuts import render
from django.contrib.auth.decorators import login_required


# Create your views here
def home_view(request):
    return render(request,'testapp/news.html')

def logout_view(request):
    return render(request,'testapp/logout.html')

from django.http import HttpResponseRedirect
from firstapp.forms import SignUpForm

def signup_view(request):
    form = SignUpForm()
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():  # Check if the form is valid
            user = form.save(commit=False)  # Do not save yet
            user.set_password(user.password)  # Hash the password
            user.save()  # Now save the user
            return HttpResponseRedirect('/accounts/login/')
        else:
            # Optionally, you can add form errors to the context to show to the user
            return render(request, 'testapp/signup.html', {'form': form})

    return render(request, 'testapp/signup.html', {'form': form})

@login_required

def fullstack_dev_view(request):
    return render(request,'testapp/thankyou.html')

@login_required

def ui_dev_view(request):
    return render(request,'testapp/politics.html')

@login_required

def cloud_sol_view(request):
    return render(request,'testapp/cloud.html')

from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.home_view),
    path('fullstack/', views.fullstack_dev_view),
    path('uidev/', views.ui_dev_view),
    path('cloud/', views.cloud_sol_view),
    path('accounts/', include('django.contrib.auth.urls')),
    path('logout/',views.logout_view),
    path('signup/',views.signup_view),
]

settings.py
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR=BASE_DIR/'templates'
STATIC_DIR=BASE_DIR/'static'


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp',
    'secondapp',
    'django_seed',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
    
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jobsdb',
	    'USER': 'root',
	    'PASSWORD': 'root',
	    'HOST': 'localhost',
	    'PORT':3306,
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS=[STATIC_DIR]
LOGIN_REDIRECT_URL='/'
LOGOUT_REDIRECT_URL='/logout'

in django auth application, user model, the password should not be saved directly, it should be hashed by using some security 
algorithms, the default password hashing algorithm: pbkdf2_sha256

form.save() -- we are trying to save password in plain text form (error: invalid pwd format or unknown hashing algorithm)

Password hashers:
we can use other algorithms also: argon2,bcrypt etc..

pip install bcrypt -- 2nd most
pip install django[argon2] -- most secure
sha has least priority

in settings.py, we have to configure password hashers

PASSWORD_HASHERS=[
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

Extra things:
How to create our own login form?
social login?
create signup form in alternative way

Class Based Views and CRUD operations by using both FBV's and CBV's

CRUD Operations:
FBV Function Base
CBV Class base
Django ORM 

C -- Create(Insert Operation)
R -- Retrieve/Read(select query)
U -- Update
D -- Delete

CRUD Operations using FBV

Steps:
Employee Model class
makemigrations and migrate
register model in the admin interface
populate.py script with faker module to generate fake data and insert into database
view function to retrieve data and display by using template file: wish.html
To insert data:
	form to enter data from end user
	modelforms
	view function-- .Form object creations and send to template

Step1: 
django-admin startproject firstproject
cd firstproject

step:2
py manage.py startapp testapp

step3:
add app in settings.py

models.py
---------
from django.db import models

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=64)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=256)

py manage.py makemigrations
---------------------------
go to cmd by pressing win+R
project directory may changes from one machine to other

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0010_employee_delete_filter.py
    + Create model Employee
    - Delete model Filter

py manage.py migrate
--------------------
C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0010_employee_delete_filter... OK

the above ouput in cmd may vary, i got this kind of output, coz i am using already existing project

admin.py
--------
from django.contrib import admin
from firstapp.models import Employee

# Register your models here.
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']

admin.site.register(Employee,EmployeeAdmin)

populate_student_info.py
------------------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','firstproject.settings')
import django
django.setup()

from firstapp.models import Employee
from faker import Faker
from random import *

fake=Faker()
def phonenumbergen():
    d1=randint(6,9)
    num=''+str(d1)
    for i in range(9):
        num+=str(randint(0,9))
    return int(num)

def populate(n):
    for i in range(n):
        feno=randint(1001,9999)
        fename=fake.name()
        fesal=randint(100000,200000)
        feaddr=fake.city()
        emp_record=Employee.objects.get_or_create(
            eno=feno,
            ename=fename,
            esal=fesal,
            eaddr=feaddr)
n=int(input('Enter number of records:'))
populate(n)
print(f'{n} records inserted successfully...')

Output:
------
C:\Users\abc\Desktop\django\firstproject>py populate_student_info.py
Enter number of records:5
5 records inserted successfully...

views.py
--------
from django.shortcuts import render,redirect
from firstapp.models import Employee
from firstapp.forms import EmployeeForm


# Create your views here
def retrieve_view(request):
    emp_list=Employee.objects.all()

    return render(request,'testapp/logout.html',{'emp_list':emp_list})

def insert_view(request):
    form=EmployeeForm()
    if request.method== 'POST':
        form=EmployeeForm(request.POST)
        if form.is_valid():
            form.save()
        return redirect('/')
    return render(request,'testapp/politics.html',{'form':form})

def delete_view(request,id):
    employee=Employee.objects.get(id=id)
    employee.delete()
    return redirect('/')

def update_view(request,id):
    employee=Employee.objects.get(id=id)
    form=EmployeeForm(instance=employee)
    if request.method=='POST':
        form=EmployeeForm(request.POST,instance=employee)
        if form.is_valid():
            form.save()
        return redirect('/')
    return render(request,'testapp/cloud.html',{'form':form})
    

wish.html
---------
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
  <div class="container" align="center">
    {% block body_block %}
    {% endblock %}
  </div>
      
</body>
</html>


logout.html
------------
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}
<h1>Welcome Sangam Softsol Man Power</h1>
<table border="3">
    <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
        <th>Action</th>
    </thead>
    {% for emp in emp_list %}
    <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
        <td><a href="/update/{{emp.id}}">Update</a>&nbsp;<a href="/delete/{{emp.id}}">Delete</a></td>
    </tr>
    {% endfor %}
</table><br>
<a href="/insert" class="btn btn-success">Insert New Employee</a>
{% endblock %}


forms.py
--------
from django import forms
from firstapp.models import Employee

class EmployeeForm(forms.ModelForm):
    class Meta:
        model=Employee
        fields='__all__'


politics.py
-----------
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}
<h1>Employee Insert Form</h1>
<form method="post">
    {{form.as_p}}
    {% csrf_token %}
    <input type="submit" class="btn btn-success btn-lg" value="Insert Record">
</form>
{% endblock %}


cloud.html
----------
<!DOCTYPE html>
{% extends 'testapp/wish.html' %}
{% block body_block %}
<h1>Employee Update Form</h1>
<form method="post">
    {{form.as_p}}
    {% csrf_token %}
    <input type="submit" class="btn btn-success btn-lg" value="Update">
</form>
{% endblock %}


urls.py
-------
from django.contrib import admin
from django.urls import path, include
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
    path('insert/', views.insert_view),
    path('delete/<int:id>', views.delete_view),
    path('update/<int:id>', views.update_view),
]

py manage.py runserver
----------------------

Output:
-------
C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
January 26, 2025 - 14:13:47
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

http://127.0.0.1:8000/
http://127.0.0.1:8000/insert/
http://127.0.0.1:8000/update/

Types of views
FBVs
CBVs

Class Based Views(CBV)
FBVs are old, CBVs are Latest, introduced in Django 1.3 Version to implement generic views
CBVs are very easy to use when compare with FBVs, the most commonly used views in real time is CBV
FBVs are more powerful when compared with CBV, if you are unable to handle with with cbv, the one and only solution is FBV

Ex: Read data from one table(employee) -- CBV
Complex operations over different multiple tables(employee,customer) simultaneously -- FBV

Readymade clothes:
waist, length, ankle, thighs fitting fixed w.r.t size (CBV)

stitching at Tailor (FBV): properly fit irrespective of excess sizes

Every CBV will be converted to FBV internally
CBV is a wrapper over FBV to reduce complexity

bootstrap(CBV)
css(FBV)
===============================

Note:
While defining class based view we have to extend view class

to provide response to the GET request, Django will always calls get() method, hence we have to override this method in our view class,
similarly other http methods put(), post(), delete(),..

while redefining url pattern we have to use as_view method

Template based application by using class based view

How to send context parameters

Hello world application using CBV

django-admin startproject firstproject
cd firstproject
py manage.py startapp testapp

add app in settings.py

views.py
from django.shortcuts import render
from django.views.generic import View,TemplateView
from django.http import HttpResponse

#Create your views here
class SaiWorldView(View):
    def get(self,request):
        return HttpResponse('<h1>This response from class based view</h1>')

class TemplateCBV(TemplateView):
    template_name='testapp/logout.html'
    
class TemplateCBV2(TemplateView):
    template_name='testapp/cloud.html'
    def get_context_data(self, **kwargs):
        context=super().get_context_data(**kwargs)
        context['name']='sai'
        context['marks']=90
        context['subject']='django'
        return context

logout.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Template based application by using class based view</h1>
</body>
</html>


cloud.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Student Information</h1>
    <h2>Student Name:{{name}}</h2>
    <h2>Student Marks:{{marks}}</h2>
    <h2>Student Subject:{{subject}}</h2>
</body>
</html>

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('cbv/', views.SaiWorldView.as_view()),
    path('tempres/', views.TemplateCBV.as_view()),
    path('tempres1/', views.TemplateCBV2.as_view()),
]


http://127.0.0.1:8000/cbv/
http://127.0.0.1:8000/tempres/
http://127.0.0.1:8000/tempres1/

Model Related view classes to perform CRUD operations:
so far we used 2 types of views
view
TemplateView

To perform CRUD operations, predefined view classes are:
ListView -- to select all records(R)
DetailView -- to get details of a particular record
CreateView -- to insert a record(C)
DeleteView -- to delete record(D)
UpdateView -- to update records(U)

ListView:
we can use ListView class to list out all records from DB(Model)
Its an alternative way to: ModelClassName.objects.all()

default template filename:modelname_list.html Ex: book_list.html
default context object name:modelname_list Ex: book_list

Example for ListView class by using CBVs:

django-admin startproject firstproject
cd firstproject

py manage.py startapp testapp

add app in settings.py

models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)
----------
from django.db import models

# Create your models here.
class Book(models.Model):
    title=models.CharField(max_length=30)
    author=models.CharField(max_length=30)
    pages=models.IntegerField()
    price=models.FloatField()
    
makemigrations and migrate


admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
--------
from django.contrib import admin
from firstapp.models import Book

# Register your models here.
class BookAdmin(admin.ModelAdmin):
    list_display=['title','author','pages','price']

admin.site.register(Book,BookAdmin)

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
--------
from django.shortcuts import render

#Create your views here
# def list_view(request):
#     book_list=Book.objects.all()
#     return render(request,'testapp/book.html',{'book_list':book_list})

from django.views.generic import ListView
from firstapp.models import Book

class BookListView(ListView):
    model=Book
    #default template file:book_list.html
    #the default context object name:book_list

book_list.html (C:\Users\abc\Desktop\django\firstproject\firstapp\templates\firstapp\book_list.html)
--------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    {% comment %} <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> {% endcomment %}
    
    {% comment %} <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">  {% endcomment %}
</head>
<body>
    <div class="container">
        <h1>All Books Information</h1>
        {% for book in book_list %}
        <ul>
            <li>Title:<strong>{{book.title}}</strong></li>
            <li>Author:<strong>{{book.author}}</strong></li>
            <li>Pages:<strong>{{book.pages}}</strong></li>
            <li>Price:<strong>{{book.price}}</strong></li>
        </ul>
        <hr>
        {% endfor %}
    </div>    
</body>
</html>

settings.py (C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py)
----------
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR=BASE_DIR/'templates'
STATIC_DIR=BASE_DIR/'static'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp',
    'secondapp',
    'django_seed',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        # 'DIRS': [],

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jobsdb',
	    'USER': 'root',
	    'PASSWORD': 'root',
	    'HOST': 'localhost',
	    'PORT':3306,
    }
}



urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
-------
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('list/', views.BookListView.as_view()),
]

How to configure our own template file
By using template_name variable, we have to specify our own template file

how to configure our own context object
we have to use context_object_name variable

views.py
--------
from django.views.generic import ListView
from firstapp.models import Book

class BookListView(ListView):
    model=Book
    template_name='firstapp/books.html'
    context_object_name='books'
    #default template file:book_list.html
    #the default context object name:book_list


books.html(C:\Users\abc\Desktop\django\firstproject\firstapp\templates\firstapp\books.html)
----------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    {% comment %} <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> {% endcomment %}
    
    {% comment %} <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">  {% endcomment %}
</head>
<body>
    <div class="container">
        <h1>All Books Information From Customized Template File</h1>
        {% for book in books %}
        <ul>
            <li>Title:<strong>{{book.title}}</strong></li>
            <li>Author:<strong>{{book.author}}</strong></li>
            <li>Pages:<strong>{{book.pages}}</strong></li>
            <li>Price:<strong>{{book.price}}</strong></li>
        </ul>
        <hr>
        {% endfor %}
    </div>    
</body>
</html>

remaining files are same
=============================
ListView: To list out all records present in DB table
default template_file:book_list.html
default context_object_name

models.py
---------
from django.db import models
from django.urls import reverse

# Create your models here.
class Book(models.Model):
    title=models.CharField(max_length=30)
    author=models.CharField(max_length=30)
    pages=models.IntegerField()
    price=models.FloatField()

    def get_absolute_url(self):
        return reverse("detail", kwargs={"pk": self.pk})
        

views.py
--------
from django.shortcuts import render

#Create your views here
# def list_view(request):
#     book_list=Book.objects.all()
#     return render(request,'testapp/book.html',{'book_list':book_list})

from django.views.generic import ListView,DetailView,CreateView,UpdateView,DeleteView
from firstapp.models import Book

class BookListView(ListView):
    model=Book
    template_name='firstapp/books.html'
    context_object_name='books'
    #default template file:book_list.html
    #the default context object name:book_list

class BookListView2(ListView):
    model=Book
    template_name='firstapp/books.html'
    context_object_name='books'

class BookDetailView(DetailView):
    model=Book
    # default template_file:book_detail.html
    # default context_object_name:book or object

class BookCreateView(CreateView):
    model=Book
    # fields=['title','author','pages','price']
    fields='__all__'

class BookUpdateView(UpdateView):
    model=Book
    fields='__all__'
    # fields=('pages','price')

from django.urls import reverse_lazy
class BookDeleteView(DeleteView):
    model=Book
    success_url=reverse_lazy('listbooks')

books.html (C:\Users\abc\Desktop\django\firstproject\firstapp\templates\firstapp)
----------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    {% comment %} <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> {% endcomment %}
    
    {% comment %} <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">  {% endcomment %}
</head>
<body>
    <div class="container">
        <h1>All Books Information</h1>
        <ol>
            {% for book in books %}
            <li><a href="/{{book.id}}">{{book.title}}</a></li>
            {% endfor %}
        </ol>
        <a href="/create" class="btn btn-success">Insert Book Information</a>
    </div>    
</body>
</html>

book_detail.html (C:\Users\abc\Desktop\django\firstproject\firstapp\templates\firstapp)
----------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    {% comment %} <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous"> {% endcomment %}
    
    {% comment %} <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">  {% endcomment %}
</head>
<body>
    <div class="container">
        <h1>{{book.title}}Information</h1>
        {% comment %} {% for book in book_list %} {% endcomment %}
        <ul>
            <li>Title:<strong>{{book.title}}</strong></li>
            <li>Author:<strong>{{book.author}}</strong></li>
            <li>Pages:<strong>{{book.pages}}</strong></li>
            <li>Price:<strong>{{book.price}}</strong></li>
        </ul>
        {% comment %} <hr> {% endcomment %}
        {% comment %} {% endfor %} {% endcomment %}
    </div> 
    <a href="/update/{{book.id}}" class="btn btn-warning">Update this book</a>
    <a href="/delete/{{book.id}}" class="btn btn-danger">Delete this book</a>   
</body>
</html>

book_form.html (C:\Users\abc\Desktop\django\firstproject\firstapp\templates\firstapp)
--------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
</head>
<body>
    <div class="container" align='center'>
        <h1>Book Insert/Update Form</h1>
        <form method="post">
            {{form.as_p}}
            {% csrf_token %}
            <input type="submit" class="btn btn-success" value="Insert/Update New Book">
        </form>
    </div>    
</body>
</html>

if we fill the form and submit
the record will be inserted into DB, but we will get an error
after inserting, to what page, control has to go, we didn't define anywhere, this is the reason for error.

ImproperlyConfigured at /create/
No URL to redirect to. Either provide a url or define a get_absolute_url method on the model 

book_confirm_delete.html (C:\Users\abc\Desktop\django\firstproject\firstapp\templates\firstapp\book_confirm_delete.html)
------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
</head>
<body>
    <div class="container" align='center'>

        <h1>Do you want to really delete book {{book.title}} ???</h1>
        <form method='post'>
            {% csrf_token %}
            <input type="submit" class="btn btn-danger" value="Delete Book">
            <a href="/list2" class='btn btn-success'>Cancel(Don't Delete)</a>
        </form>
    </div>    
</body>
</html>

urls.py
-------
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('list/', views.BookListView.as_view()),
    path('list2/', views.BookListView2.as_view(),name='listbooks'),
    path('<int:pk>', views.BookDetailView.as_view(),name='detail'),
    path('create/', views.BookCreateView.as_view()),
    path('update/<int:pk>', views.BookUpdateView.as_view()),
    path('delete/<int:pk>', views.BookDeleteView.as_view()),
]

if we send the request, we will get an error
ImproperlyConfigured at /create/
Using ModelFormMixin (base class of BookCreateView) without the 'fields' attribute is prohibited

class BookCreateView(CreateView):
    model=Book
    fields=['title','author','pages','price']

if we send request, again we will get error
TemplateDoesNotExist at /create/
firstapp/book_form.html  

the default template is: book_form.html
Adding update button in book_detail.html page

DeleteView

http://127.0.0.1:8000/list/
http://127.0.0.1:8000/create/
http://127.0.0.1:8000/1
================================
CRUD Operations using CBV's
ListView: To list out all records information
DetailView: To get information about a particular object
CreateView: To insert/Create a record into the table
UpdateView: To Update existing record
DeleteView: to Delete a particular record

django-admin startproject firstproject
cd firstproject

py manage.py startapp testapp

add app in settings.py

models.py
---------
from django.db import models
from django.urls import reverse

# Create your models here.
class Company(models.Model):
    name=models.CharField(max_length=128)
    location=models.CharField(max_length=64)
    ceo=models.CharField(max_length=64)

    def get_absolute_url(self):
        return reverse("detail", kwargs={"pk": self.pk})
    

makemigrations and migrate

admin.py
--------
from django.contrib import admin
from firstapp.models import Company

# Register your models here.
class CompanyAdmin(admin.ModelAdmin):
    list_display=['name','location','ceo']

admin.site.register(Company,CompanyAdmin)


views.py
--------
from django.shortcuts import render
from django.views.generic import ListView,DetailView,CreateView,UpdateView,DeleteView
from firstapp.models import Company
from django.urls import reverse_lazy

class CompanyListView(ListView):
    model=Company
    #default template file name: company_list.html
    #default context_object_name: company_list

class CompanyDetailView(DetailView):
    model=Company
    #default template file name:company_detail.html
    #default context_object_name:company or object

class CompanyCreateView(CreateView):
    model=Company
    fields='__all__'
    #default template file: company_form.html

class CompanyUpdateView(UpdateView):
    model=Company
    fields=('location','ceo')
    #default template file: company_form.html

class CompanyDeleteView(DeleteView):
    model=Company
    success_url=reverse_lazy('list')


base.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">
    </head>
<body>
    <div class="container">
        {% block body_block %}
        {% endblock %}
    </div>    
</body>
</html>

company_list.html
<!DOCTYPE html>
{% extends 'firstapp/base.html' %}
{% block body_block %}
<h1>List of all companies</h1>
<ul>
    {% for company in company_list %}
    <li><a href="/{{company.id}}">{{company.name}}<a/></li>

    {% comment %} <li>{{company.name}}</li>
    <li>{{company.location}}</li>
    <li>{{company.ceo}}</li> {% endcomment %}
    <hr>
    {% endfor %}
</ul>
<a href="/create" class="btn btn-primary">Insert Company</a>
{% endblock %}

company_detail.html
<!DOCTYPE html>
{% extends 'firstapp/base.html' %}
{% block body_block %}
<h1>{{company.name}} Information</h1>
<ul>
    <h2><li>Company Name:{{company.name}}</li></h2>
    <h2><li>Company Location:{{company.location}}</li></h2>
    <h2><li>Company CEO:{{company.ceo}}</li></h2>
</ul>
<a href="/update/{{company.id}}" class="btn btn-warning">Update Record</a>
<a href="/delete/{{company.id}}" class="btn btn-danger">Delete Record</a>
<a href="/" class="btn btn-success">Companies List</a>
{% endblock %}

companyform.html
<!DOCTYPE html>
{% extends 'firstapp/base.html' %}
{% block body_block %}
<h1>Company Insert/Update Form</h1>
<form method='post'>
    {{form.as_p}}
    {% csrf_token %}
    <input type="submit" class="btn btn-primary" value="Insert/Update Record">
</form>
{% endblock %}

company_confirm_delete.html
<!DOCTYPE html>
{% extends 'firstapp/base.html' %}
{% block body_block %}
<h1>Do you want to really delete the company:{{company.name}} ??</h1><hr>
<form method="post">
    {% csrf_token %}
    <input type="submit" class="btn btn-danger" value="Delete Record">
    <a href="/{{company.id}}" class="btn btn-success">Cancel</a>
</form>
{% endblock %}

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.CompanyListView.as_view(),name='list'),
    path('<int:pk>', views.CompanyDetailView.as_view(),name='detail'),
    path('create/', views.CompanyCreateView.as_view()),
    path('update/<int:pk>', views.CompanyUpdateView.as_view()),
    path('delete/<int:pk>', views.CompanyDeleteView.as_view()),
    ]

http://127.0.0.1:8000/
http://127.0.0.1:8000/create/
http://127.0.0.1:8000/1
http://127.0.0.1:8000/update/1
http://127.0.0.1:8000/delete/1

ImproperlyConfigured at /create/
No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.

Difference between CBV and FBV
	CBV								FBV
	===								====
CBV can be easily extended					FBV can't extended easily
it promotes reusability of the code				FBV can't promotes reusability of the code
CBV can use OO techniques such as mixins(multiple inheritence)	FBV can't use OO Technique
CBV less Coding							FBV more coding
Default template files and context object support is available	Default template files and context object support is not available
There is restriction on the functionality hence less powerful	There is no restriction on the functionality hence more powerful
implicit execution flow, hence reduce readability		Explicit execution flow, hence improves readability		

ImproperlyConfigured at /create/
No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model.
=================================
Django ORM (Object Relational Mapping)

To select all employees from the employee table
sql: select * from employee
ORM: Employee.objects.all()

django-admin startproject firstproject
cd firstproject

py manage.py startapp testapp

add app in settings.py

models.py
---------
from django.db import models
from django.urls import reverse

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)


makemigrations and migrate


admin.py
from django.contrib import admin
from firstapp.models import Employee

# Register your models here.
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['id','eno','ename','esal','eaddr']

admin.site.register(Employee,EmployeeAdmin)


create superuser

adding fake data to the table by running populate_student_info.py

C:\Users\abc\Desktop\django\firstproject>py populate_student_info.py
Enter number of records:5
5 records inserted successfully...

base.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\base.html.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
  <div class="container" align="center">
    {% block body_block %}
    {% endblock %}
  </div>
      
</body>
</html>


index.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\index.html)
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Employee Informatio DashBoard</h1>
<table border="3" align="center">
    <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
    </thead>
    {% for emp in emp_list %}
    <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
    </tr>
    {% endfor %}
</table><br>

{% endblock %}



views.py
from django.shortcuts import render
from firstapp.models import Employee
from django.db.models import Q 

# Create your views here
def retrieve_view(request):
    # emp_list = Employee.objects.all()  # Fetch employee data
    print(type(emp_list))
    
    # emp_list=Employee.objects.filter(esal__gt=16000)
    # emp_list=Employee.objects.filter(esal__gte=16000)
    
    # emp_list=Employee.objects.filter(esal__lt=16000)
    # emp_list=Employee.objects.filter(esal__lte=16000)
    
    # emp_list=Employee.objects.get(id=8)
    
    # emp_list=Employee.objects.filter(ename__contains='Sai')
    # emp_list=Employee.objects.filter(ename__contains='sai')
    # emp_list=Employee.objects.filter(ename__icontains='sai')
    
    # emp_list=Employee.objects.filter(id__in=[7,8,9])

    # emp_list = Employee.objects.filter(Q(ename__startswith='S') | Q(esal__gt=14000))

    # emp_list=Employee.objects.filter(ename__startswith='S') & Employee.objects.filter(esal__gt=15000)
    # emp_list=Employee.objects.filter(Q(ename__startswith='S') & Q(esal__gt=15000))
    # emp_list=Employee.objects.filter(ename__startswith='S',esal__gt=15000)

    emp_list=Employee.objects.exclude(ename__startswith='S')

    return render(request, 'testapp/index.html', {'emp_list': emp_list})  # Use correct template path


urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
   
    ]


print(type(emp_list))
return type of all() method:<class 'django.db.models.query.QuerySet'>

to get a particular record
we have to use get() method

C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from firstapp.models import Employee
>>> emp=Employee.objects.get(id=5)
>>> emp
<Employee: Employee object (5)>
>>> emp.eno
2247
>>> emp.ename
'John Robinson'
>>> emp.esal
173692.0
>>> emp.eaddr
'Melissamouth'
>>>

C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from firstapp.models import Employee
>>> emp=Employee.objects.get(id=7)
>>> emp
<Employee: Employee object (7)>
>>> emp.eno
701
>>> emp.ename
'Sai'
>>> emp=Employee.objects.get(id__exact=7)
>>> emp.ename
'Sai'
>>> emp=Employee.objects.get(ename='Sai')
>>> emp.eno
701
>>> emp.ename
'Sai'

>>> emp.esal
15000.0
>>> emp=Employee.objects.get(ename='sai')
>>> emp=Employee.objects.get(ename__iexact='sai')
------------------------------------------------------
the return type of get() method is Employee object

how to find the corresponding query associated with QuerySet
Every ORM Statement will be converted into sql query, we can find query from the query set

>>> qs=Employee.objects.all()
>>> type(qs)
<class 'django.db.models.query.QuerySet'>
>>> qs.query
<django.db.models.sql.query.Query object at 0x0000020B8C6AD880>
>>> str(qs.query)
'SELECT `firstapp_employee`.`id`, `firstapp_employee`.`eno`, `firstapp_employee`.`ename`, `firstapp_employee`.`esal`, `firstapp_employee`.`eaddr` FROM `firstapp_employee`'
>>>



How to filter records based on some condition
# emp_list=Employee.objects.filter(esal__gt=160000)
it returns all employees whose salaries greater than 160000

emp_list=Employee.objects.filter(esal__gte=160000)
it returns all employees whose salaries greater than or equal to 160000

similarly we can use lt and lte also

various possible fields
exact --> exact match
emp=Employee.objects.get(id=4)
emp=Employee.objects.get(id__exact=4)

iexact -- case insesitive
emp=Employee.objects.get(ename__iexact='sunny')
emp.ename

contains


icontains


in


gt


gte


lt


lte


startswith
emp_list=Employee.objects.filter(ename__startswith='A')


istartswith


endswith


iendswith


range
emp_list=Employee.objects.filter(esal__range=[12000,15000])

Q)select all employees where ename starts with 'A'
queryset1=Employee.objects.filter(ename__startswith='A')

Q) select all employees whose salary is <15000
queryset2=Employee.objects.filter(esal__gt=15000)

select all employees where ename starts with 'A' or esal <15000

1st way
queryset1=Employee.objects.filter(ename__startswith='A')
queryset2=Employee.objects.filter(esal__gt=15000)
emplist=queryset1 | queryset2

2nd way
filter(Q(condition1)| Q(condition2))

from django.db.models import Q
emp_list=Employee.objects.filter(Q(ename_startswith='A') | Q(esal__gt=19500))
=============================================
How to implement AND queries in Djnago ORM
and: all condition should be satisfied

3 ways:
queryset1 & queryset2
filter(Q(cond1)|Q(cond2))
filter(cond1,cond2)

Ex: select all employees where ename starts with 'A' and esal>15000

emp_list=Employee.objects.filter(ename__startswith='A') & Employee.objects.filter(esal__gt=160000)

emp_list=Employee.objects.filter(Q(ename__startswith='A') & Q(esal__gt=160000))

emp_list=Employee.objects.filter(ename__startswith='A',esal__gt=160000)

How to implement not queries in django ORM
all() -- to get all records
filter condition -- to get records, where condition is satisfied
we can implement Not queries in 2 ways

1st way exclude condition -- to get the records, where condition is failed
2nd way: filter(~Q(condition))

Ex: To select all employees, whose name not starts with 'A'
emp_list=Employee.objects.exclude(ename__startswith='A')
emp_list=Employee.objects.exclude(~Q(ename__startswith='A'))

How to select only required columns in the query set
select * from employee;
select ename,esal from employee;

3 ways
by using values_list():
emp_list=Employee.objects.all().values_list('ename','esal')

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from firstapp.models import Employee
from django.db.models import Q 

# Create your views here
# def retrieve_view(request):
    # emp_list = Employee.objects.all()  # Fetch employee data
    # print(type(emp_list))
    
    # emp_list=Employee.objects.filter(esal__gt=16000)
    # emp_list=Employee.objects.filter(esal__gte=16000)
    
    # emp_list=Employee.objects.filter(esal__lt=16000)
    # emp_list=Employee.objects.filter(esal__lte=16000)
    
    # emp_list=Employee.objects.get(id=8)
    
    # emp_list=Employee.objects.filter(ename__contains='Sai')
    # emp_list=Employee.objects.filter(ename__contains='sai')
    # emp_list=Employee.objects.filter(ename__icontains='sai')
    
    # emp_list=Employee.objects.filter(id__in=[7,8,9])

    # emp_list = Employee.objects.filter(Q(ename__startswith='S') | Q(esal__gt=14000))

    # emp_list=Employee.objects.filter(ename__startswith='S') & Employee.objects.filter(esal__gt=15000)
    # emp_list=Employee.objects.filter(Q(ename__startswith='S') & Q(esal__gt=15000))
    # emp_list=Employee.objects.filter(ename__startswith='S',esal__gt=15000)

    # emp_list=Employee.objects.exclude(ename__startswith='S')

    # return render(request, 'testapp/index.html', {'emp_list': emp_list})  # Use correct template path

def retrieve_view(request):
    # emp_list=Employee.objects.all().values_list('ename','esal')
    # emp_list=Employee.objects.all().values('ename','esal')
    # print(type(emp_list))
    emp_list=Employee.objects.all().only('ename','esal')
    return render(request,'testapp/specificcolumns.html',{'emp_list':emp_list})


specificcolumns.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\specificcolumns.html)
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Employee Informatio DashBoard</h1>
<table border="3">
    <thead>
        <th>Employee Name</th>
        <th>Employee Salary</th>
    </thead>
    {% for emp in emp_list %}
    <!-- the below code for By using values(): emp_list=Employee.objects.all().values('ename','esal') -->
    <!-- <tr>
        {% for e,k in emp.items %}
        <td>{{k}}</td>
        {% endfor %} 
    </tr> -->
    <tr>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
    </tr>
    {% endfor %}
</table><br>
{% endblock %}

models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)
from django.db import models
from django.urls import reverse

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
   
    ]

base.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\base.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
  <div class="container" align="center">
    {% block body_block %}
    {% endblock %}
  </div>
      
</body>
</html>

index.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\index.html)
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Employee Informatio DashBoard</h1>
<table border="3" align="center">
    <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
    </thead>
    {% for emp in emp_list %}
    <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
    </tr>
    {% endfor %}
</table><br>

{% endblock %}

By using values():
emp_list=Employee.objects.all().values('ename','esal')

By using only():
emp_list=Employee.objects.all().only('ename','esal') -- this is the best one to use

Note:
values_list() -- returns QuerySet contains tuple
values() -- returns Queryset contains dict object
only() -- returns Queryset contains employee objects (highly recommended to use)

Aggregate Functions:
Avg(), max(), Min(), Sum(), Count() etc..

views.py(C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)

from django.shortcuts import render
from firstapp.models import Employee
from django.db.models import Q 

def retrieve_view(request):
    # emp_list=Employee.objects.all().values_list('ename','esal')
    # emp_list=Employee.objects.all().values('ename','esal')
    # print(type(emp_list))
    emp_list=Employee.objects.all().only('ename','esal')
    return render(request,'testapp/specificcolumns.html',{'emp_list':emp_list})

from django.db.models import Avg,Max,Min,Sum,Count
def aggregate_view(request):
    avg=Employee.objects.all().aggregate(Avg('esal'))
    max=Employee.objects.all().aggregate(Max('esal'))
    min=Employee.objects.all().aggregate(Min('esal'))
    sum=Employee.objects.all().aggregate(Sum('esal'))
    count=Employee.objects.all().aggregate(Count('esal'))
    # print(avg)
    my_dict={'avg':avg['esal__avg'],'max':max['esal__max'],'min':min['esal__min'],'sum':sum['esal__sum'],'count':count['esal__count']}
    return render(request,'testapp/aggregate.html',my_dict)


aggregate.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\aggregate.html)
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Employee Aggregate Information</h1>
<ul>
    <h2><li>Average Salary:{{avg}}</li></h2>
    <h2><li>Maximum Salary:{{max}}</li></h2>
    <h2><li>Minimum Salary:{{min}}</li></h2>
    <h2><li>Total Salary:{{sum}}</li></h2>
    <h2><li>Number of Employees:{{count}}</li></h2>
</ul>
{% endblock %}

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
    path('agg', views.aggregate_view),   
    ]

http://127.0.0.1:8000/agg/

How to create, update and delete records

1way:
C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from firstapp.models import Employee
>>> Employee.objects.all().count()
4
>>> e=Employee(eno=700,ename='virat',esal=10000,eaddr='delhi')
>>> e.save()
>>> Employee.objects.all().count()
5

2nd way:
>>> Employee.objects.create(eno=699,ename='rohit',esal=10000,eaddr='mumbai')
<Employee: Employee object (13)>
>>> Employee.objects.all().count()
6

How to add multiple records at a time? (bulk_create)

>>> Employee.objects.bulk_create([Employee(eno=698,ename='rahul',esal=10000,eaddr='punjab'),Employee(eno=697,ename='hardik',esal=10000,eaddr='ahmedabad'),])
[<Employee: Employee object (None)>, <Employee: Employee object (None)>]
>>> Employee.objects.all().count()
8

How to delete a single record?
>>> e=Employee.objects.get(eno=700)
>>> e.delete()
(1, {'firstapp.Employee': 1})

How to delete multiple records?
>>> qs=Employee.objects.filter(esal__gte=15000)
>>> qs.count()
3
>>> qs.delete()
(3, {'firstapp.Employee': 3})

How to delete all records
>>> qs=Employee.objects.all()
>>> qs.delete()
(4, {'firstapp.Employee': 4})

(or)

>>> Employee.objects.all().delete()
(2, {'firstapp.Employee': 2})

How to update a record?
>>> e=Employee.objects.get(eno=700)
>>> e.eno
700
>>> e.ename
'rahul'
>>> e.esal
10000.0
>>> e.esal=20000
>>> e.save()
>>> e.esal
20000
============================================
How to order queries in sorting order
emp_list = Employee.objects.all()  # Fetch employee data

To sort all employees according to ascending order eno
emp_list=Employee.objects.all().order_by('eno')

To sort all employees according to descending order eno
emp_list=Employee.objects.all().order_by('-eno')

To get highest salaried employee object
arrange all employees in descending order and select first employee
>>> from firstapp.models import Employee
>>> e=Employee.objects.all().order_by('-esal')[0]
>>> e.esal
189251.0

To get second highest salary employee
>>> e=Employee.objects.all().order_by('-esal')[1]
>>> e.esal
188371.0

To get all employees based on alphabetical order of names
emp_list=Employee.objects.all().order_by('ename')

To ignore case?
By using Lower function
emp_list=Employee.objects.all().order_by(Lower('ename'))

views.py
# Create your views here
def retrieve_view(request):
    emp_list=Employee.objects.all().order_by('eno')
    # emp_list=Employee.objects.all().order_by('-eno')
    # emp_list=Employee.objects.all().order_by('ename')
    # emp_list=Employee.objects.all().order_by(Lower('ename'))
    q1=Employee.objects.filter(esal__lt=110000)
    q2=Employee.objects.filter(ename__startswith='M')
    q3=q1.union(q2)
    emp_list=q3
    print(request.user)	
    return render(request, 'testapp/index.html', {'emp_list': emp_list})  # Use correct template path

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.retrieve_view),
    # path('agg', views.aggregate_view),   
    ]


How to perform union operations for queryset
By using union operator, we can combine results of 2 or more queries from same model or different models

q1=Employee.objects.filter(esal__lt=110000)
q2==Employee.objects.filter(ename__startswith='M')
q3=q1.union(q2)
emp_list=q3

To work with multiple models
Student(name,mailid,aadharnumber)
Teacher(name,mailid,aadharnumber)
q1=Students.objects.all().values_list('name','mailid','aadharnumber')
q2=Teacher.objects.all().values_list('name','mailid','aadharnumber')
q3=q1.union(q2)

Working with Django middleware (rarely used but vvimp)
if we fire any url from browser, directly it doesn't hit function written in views.py, some preprocessing will be done
while get response post processing will be done, that will be done by middleware

if we want to perform any activity automatically then we should go for middleware
for ex: if a server is under maintenance then we will get "server is under maintenance services will be resumed by 2 hours" message
we will get

its like filters concept in java servlet

http://127.0.0.1:8000 -- we are typing this one only
http://127.0.0.1:8000/ -- but middleware adding / will be done by CommonMiddleware

submit form -- csrf verification by CsrfViewMiddleware

print(request.user)	-- this will print user name by AuthenticationMiddleware
http to https by SecurityMiddleware

enduser (req) --> middleware --> modified req --> view func
view func --> response --> middleware --> modified response --> enduser

middleware is applicable for every incoming request and outgoing response

views.py
# Create your views here
def retrieve_view(request):
    emp_list=Employee.objects.all().order_by('eno')
    # emp_list=Employee.objects.all().order_by('-eno')
    # emp_list=Employee.objects.all().order_by('ename')
    # emp_list=Employee.objects.all().order_by(Lower('ename'))
    q1=Employee.objects.filter(esal__lt=110000)
    q2=Employee.objects.filter(ename__startswith='M')
    q3=q1.union(q2)
    emp_list=q3
    print(request.user)	-- this will print user name by AuthenticationMiddleware
    return render(request, 'testapp/index.html', {'emp_list': emp_list})  # Use correct template path


Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

abc -- this is the user we will get

settings.py
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ERRORS:
?: (admin.E408) 'django.contrib.auth.middleware.AuthenticationMiddleware' must be in MIDDLEWARE in order to use the admin application.

System check identified 1 issue (0 silenced).

we can comment "'django.contrib.auth.middleware.AuthenticationMiddleware'," then check, we wont get page


middleware Architecture
based on our requirement, we can configure our own middleware, every customized middleware is a python class and it is the child class
object

class CustomizedMiddleware(object):
class CustomizedMiddleware:

this python class should contain 2-mandatory methods and 3 optional methods

1) def__init__(self,get_response):

get response is a predefined function which can be used to send request to the next level and to get required response

this method will be executed only once at the time of creating middleware class object, which is mostly happens at the time of server
starting

2) def__call__(self,get_response):
this method will be executed for every request separately 
# code for preprocessing of the request
response=self.get_response(request) #trigger request to next level
# code for post preprocessing of the request
return Response

def__init__(self,get_response):
def__call__(self,get_response):
#preprocessing
#forward request to next level and get response
#post processing
return response
===========================================
middleware classes we have to define in middleware.py file(inside firstapp)

Application for customized middleware execution flow

create a project
win+r -- cmd
cd desktop/django
djnago-admin startproject firstproject
cd firstproject 
py manage.py startapp firstapp

add app in settings.py (C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py)

C:\Users\abc\Desktop\django\firstproject\firstapp\views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here
def welcome_view(request):
    print('This line added by view function')
    return HttpResponse('<h1>custom middleware</h1>')

C:\Users\abc\Desktop\django\firstproject\firstapp\middleware.py
class ExecutionFlowMiddleware(object):
    def __init__(self,get_response):
        print('init method execution')
        self.get_response=get_response

    def __call__(self,request):
        print('preprocessing of request')
        response=self.get_response(request)
        print('Post processing of request')
        return response

C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.welcome_view),   
    ]

http://127.0.0.1:8000/hello/

C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp',
    'secondapp',
    'django_seed',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'firstapp.middleware.ExecutionFlowMiddleware'********************
]

output:
-------
C:\Users\abc\Desktop\django\firstproject>py manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
init method execution***********************
February 26, 2025 - 21:12:10
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

preprocessing of request********************
This line added by view function************
Post processing of request******************
[26/Feb/2025 21:12:22] "GET /hello/ HTTP/1.1" 200 26
preprocessing of request********************
This line added by view function************
Post processing of request******************
[26/Feb/2025 21:13:40] "GET /hello/ HTTP/1.1" 200 26

views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here
def home_page_view(request):
    # print('This line added by view function')
    return HttpResponse('<h1>this response is from view function response</h1>')

middleware.py
from django.http import HttpResponse 
class AppMaintenanceMiddleware(object):
    def __init__(self,get_response):
        # print('init method execution')
        self.get_response=get_response

    def __call__(self,request):
        # print('preprocessing of request')
        # response=self.get_response(request)
        # print('Post processing of request')
        # return response
        return HttpResponse('<h1>currently application under maitenance... kindly try in business hours</h1>')

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.home_page_view),   
    ]

settings.py
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'firstapp.middleware.ExecutionFlowMiddleware'**********
    'firstapp.middleware.AppMaintenanceMiddleware'***********
]

http://127.0.0.1:8000/hello/

if maintenance activity over, then simply uncomment the middleware then request goes to the views


Middleware application to show meaningful response if view function raise any error apart from try & catch
try:
  Mysql
except:
  oracle --> problem
except:
  mongodb --> still problem

test.py
try:
    print(10/0)
# except ArithmeticError:
#     print('Arithmetic Error')
# except ZeroDivisionError:
#     print('ZeroDivisionError')

except ZeroDivisionError:
    print('ZeroDivisionError')
except ArithmeticError:
    print('Arithmetic Error')

C:\Users\abc\Desktop\django>py test.py
Arithmetic Error

C:\Users\abc\Desktop\django>py test.py
ZeroDivisionError

test.py
try:
    print(10/0)

C:\Users\abc\Desktop\django>py test.py
  File "C:\Users\abc\Desktop\django\test.py", line 2
    print(10/0)
SyntaxError: expected 'except' or 'finally' block

test.py
print(10/0)
C:\Users\abc\Desktop\django>py test.py
Traceback (most recent call last):
  File "C:\Users\abc\Desktop\django\test.py", line 1, in <module>
    print(10/0)
          ~~^~
ZeroDivisionError: division by zero

ZeroDivisionError=class name & division by zero=msg provided by the class

test.py
try:
    print(10/0)
except ZeroDivisionError:
    print('cant divide with zero')

C:\Users\abc\Desktop\django>py test.py
cant divide with zero

test.py
try:
    print(10/0)
except ZeroDivisionError as msg:
    print(msg)

C:\Users\abc\Desktop\django>py test.py
division by zero

process_exception(self,request,exception)

views.py
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here
def home_page_view(request):
    # print('This line added by view function')
    print(10/0)
    return HttpResponse('<h1>this response is from view function response</h1>')

middleware.py
from django.http import HttpResponse 
# class AppMaintenanceMiddleware(object):
class ErrorMessageMiddleware(object):
    def __init__(self,get_response):
        # print('init method execution')
        self.get_response=get_response

    def __call__(self,request):
        # print('preprocessing of request')
        response=self.get_response(request)
        # print('Post processing of request')
        return response
        # return HttpResponse('<h1>currently application under maitenance... kindly try in business hours</h1>')

    def process_exception(self,request,exception):
        # return HttpResponse('<h1>currently we are facing some technical glitches... kindly try after some time</h1>')
        return HttpResponse(f'<h1>currently we are facing some technical glitches<br>The Raised Exception:{exception.__class__.__name__}<br>The Exception Message:{exception}</h1>')

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.home_page_view),   
    ]

settings.py
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'firstapp.middleware.ExecutionFlowMiddleware'
    # 'firstapp.middleware.AppMaintenanceMiddleware'
    'firstapp.middleware.ErrorMessageMiddleware'
]

http://127.0.0.1:8000/hello/

Configuration of multiple middleware classes:


djnago-admin startproject firstproject
cd firstproject 
py manage.py startapp firstapp

add app in settings.py (C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py)

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here
def home_page_view(request):
    print('This line print by view function')
    # print(10/0)
    return HttpResponse('<h1>this response is from view function response</h1>')

C:\Users\abc\Desktop\django\firstproject\firstapp\middleware.py
from django.http import HttpResponse 
# class AppMaintenanceMiddleware(object):
# class ErrorMessageMiddleware(object):
class FirstMiddleware(object):
    def __init__(self,get_response):
        print('init method execution')
        self.get_response=get_response

    def __call__(self,request):
        # print('preprocessing of request')
        print('This is printed by middleware-1 before processing request')
        response=self.get_response(request)
        # print('Post processing of request')
        print('This is printed by middleware-1 after processing request')
        return response
        # return HttpResponse('<h1>currently application under maitenance... kindly try in business hours</h1>')
 
class SecondMiddleware(object):
    def __init__(self,get_response):
        print('init method execution of second middleware')
        self.get_response=get_response

    def __call__(self,request):
        print('This is printed by middleware-2 before processing request')
        response=self.get_response(request)
        print('This is printed by middleware-2 after processing request')
        return response
        

C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', views.home_page_view),   
    ]

C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'firstapp.middleware.ExecutionFlowMiddleware'
    # 'firstapp.middleware.AppMaintenanceMiddleware'
    # 'firstapp.middleware.ErrorMessageMiddleware'
    'firstapp.middleware.FirstMiddleware',
    'firstapp.middleware.SecondMiddleware',
]

output1:
-------
C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py changed, reloading.
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
init method execution
February 27, 2025 - 17:57:23
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

This is printed by middleware-1 before processing request
This line print by view function
This is printed by middleware-1 after processing request
[27/Feb/2025 17:57:46] "GET /hello/ HTTP/1.1" 200 53


output2:
------
C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py changed, reloading.
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
init method execution of second middleware
init method execution
February 27, 2025 - 18:03:10
Django version 5.1.4, using settings 'firstproject.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

This is printed by middleware-1 before processing request
This is printed by middleware-2 before processing request
This line print by view function
This is printed by middleware-2 after processing request
This is printed by middleware-1 after processing request
[27/Feb/2025 18:03:20] "GET /hello/ HTTP/1.1" 200 53

if we change the order of middlewares in the settings.py then the above outputs will also change
	'firstapp.middleware.SecondMiddleware', 
	'firstapp.middleware.FirstMiddleware',
    
we can configure any no.of middlewares and all these middlewares will be executed according to order declared inside settings.py
===============================
working with advanced model concepts
Model Inheritance: 5 types of model inheritance
1) abstract base class model inheritance
2) multi table inheritance
	3) multi level inheritance
	4) multiple inheritance
5) proxy model inheritance

1) abstract base class model inheritance: (only code reusability not table reusability )
if several model classes having some common fields, then it is not recommended to write these fields in every model class separately,
because it increases lenght of code and reduces readability

we have to separate those common fields into separate model class which is nothing but base class, if we extend base class then 
automatically common fields will be inherited to every child class

without inheritance:
class Student(models.Model):
	name=models.CharField(max_length=30)
	email=models.EmailField()
	address=models.CharField(max_length=30)
	rollno=models.IntegerField
	marks=models.IntegerField

class Teacher(models.Model):
	name=models.CharField(max_length=30)
	email=models.EmailField()
	address=models.CharField(max_length=30)
	subject=models.CharField(max_length=30)
	salary=models.FloatField()

with inheritance
class ContactInfo(models.Model):
	name=models.CharField(max_length=30)
	email=models.EmailField()
	address=models.CharField(max_length=30)
	class Meta:
		abstract=True

class Student(ContactInfo):
	rollno=models.IntegerField(default=0)
	marks=models.IntegerField(default=0)

class Teacher(ContactInfo):
	subject=models.CharField(max_length=30)
	salary=models.FloatField()

django-admin startproject firstproject
cd firstproject

py manage.py startapp testapp

add app in settings.py

models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)
from django.db import models
from django.urls import reverse

# Create your models here.
class ContactInfo(models.Model):
	name=models.CharField(max_length=30)
	email=models.EmailField()
	address=models.CharField(max_length=30)
	class Meta:
		abstract=True

class Student(ContactInfo):
	rollno=models.IntegerField(default=0)
	marks=models.IntegerField(default=0)

class Teacher(ContactInfo):
	subject=models.CharField(max_length=30)
	salary=models.FloatField()

Note: ContactInfo is an abstract class, so table wont get created, this type of inheritance is applicable at code level not DB level

settings.py (C:\Users\abc\Desktop\django\firstproject\firstproject\settings.py)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jobsdb',
	    'USER': 'root',
	    'PASSWORD': 'root',
	    'HOST': 'localhost',
	    'PORT':3306,
    }
}


makemigrations and migrate
C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0017_student_marks_student_rollno.py
    + Add field marks to student
    + Add field rollno to student

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0017_student_marks_student_rollno... OK

admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
from django.contrib import admin
from firstapp.models import Student,Teacher

# Register your models here.
admin.site.register(Student)
admin.site.register(Teacher)

create superuser
C:\Users\abc\Desktop\django\firstproject>py manage.py createsuperuser
Username: abc
pwd:1234
Error: That username is already taken.

go and check in mysql command line as well
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| hospital           |
| information_schema |
| it2                |
| it3                |
| jobsdb             |
| keylogger_db       |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| seeddb             |
| studentdb          |
| students           |
| sys                |
| world              |
+--------------------+
15 rows in set (1.66 sec)

mysql> use jobsdb;
Database changed
mysql> show tables;
+----------------------------+
| Tables_in_jobsdb           |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| firstapp_student           |
| firstapp_teacher           |
+----------------------------+
12 rows in set (0.14 sec)

mysql> desc firstapp_student;
+---------+--------------+------+-----+---------+----------------+
| Field   | Type         | Null | Key | Default | Extra          |
+---------+--------------+------+-----+---------+----------------+
| id      | bigint       | NO   | PRI | NULL    | auto_increment |
| name    | varchar(30)  | NO   |     | NULL    |                |
| email   | varchar(254) | NO   |     | NULL    |                |
| address | varchar(30)  | NO   |     | NULL    |                |
| marks   | int          | NO   |     | NULL    |                |
| rollno  | int          | NO   |     | NULL    |                |
+---------+--------------+------+-----+---------+----------------+
6 rows in set (0.06 sec)

mysql> desc  firstapp_teacher;
+---------+--------------+------+-----+---------+----------------+
| Field   | Type         | Null | Key | Default | Extra          |
+---------+--------------+------+-----+---------+----------------+
| id      | bigint       | NO   | PRI | NULL    | auto_increment |
| name    | varchar(30)  | NO   |     | NULL    |                |
| email   | varchar(254) | NO   |     | NULL    |                |
| address | varchar(30)  | NO   |     | NULL    |                |
| subject | varchar(30)  | NO   |     | NULL    |                |
| salary  | double       | NO   |     | NULL    |                |
+---------+--------------+------+-----+---------+----------------+
6 rows in set (0.00 sec)

mysql> select * from firstapp_teacher;
+----+--------------+-------------------+---------+---------+--------+
| id | name         | email             | address | subject | salary |
+----+--------------+-------------------+---------+---------+--------+
|  1 | Dr.Siraj sir | Drsiraj@gmail.com | guntur  | OS      | 150000 |
+----+--------------+-------------------+---------+---------+--------+
1 row in set (0.01 sec)

go to the following url and check the tables http://127.0.0.1:8000/admin/

Multi Table Inheritance: (here the base class is not abstract type as the above said example)
this type applicable at both code and DB level
inside DB tables will get created for both parent and child

models.py
from django.db import models
from django.urls import reverse

# Create your models here.
# class ContactInfo(models.Model):
# 	name=models.CharField(max_length=30)
# 	email=models.EmailField()
# 	address=models.CharField(max_length=30)
# 	class Meta:
# 		abstract=True

# class Student(ContactInfo):
# 	rollno=models.IntegerField(default=0)
# 	marks=models.IntegerField(default=0)

# class Teacher(ContactInfo):
# 	subject=models.CharField(max_length=30)
# 	salary=models.FloatField()

class ContactInfo1(models.Model):
	name=models.CharField(max_length=30)
	email=models.EmailField()
	address=models.CharField(max_length=30)
	# class Meta:
	# 	abstract=True

class Student1(ContactInfo1):
	rollno=models.IntegerField(default=0)
	marks=models.IntegerField(default=0)

class Teacher1(ContactInfo1):
	subject=models.CharField(max_length=30)
	salary=models.FloatField()

admin.py
from django.contrib import admin
# from firstapp.models import Student,Teacher
from firstapp.models import Student1,Teacher1,ContactInfo1

# Register your models here.
# admin.site.register(Student)
# admin.site.register(Teacher)

admin.site.register(ContactInfo1)
admin.site.register(Student1)
admin.site.register(Teacher1)


C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0018_contactinfo1_delete_student_delete_teacher_student1_and_more.py
    + Create model ContactInfo1
    - Delete model Student
    - Delete model Teacher
    + Create model Student1
    + Create model Teacher1

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0018_contactinfo1_delete_student_delete_teacher_student1_and_more... OK

go to the following url and check contactinfo1 http://127.0.0.1:8000/admin/

mysql> show tables;
+----------------------------+
| Tables_in_jobsdb           |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| firstapp_contactinfo1**************
| firstapp_student1          |
| firstapp_teacher1          |
+----------------------------+
13 rows in set (0.21 sec)

mysql> desc firstapp_student1;
+---------------------+--------+------+-----+---------+-------+
| Field               | Type   | Null | Key | Default | Extra |
+---------------------+--------+------+-----+---------+-------+
| contactinfo1_ptr_id | bigint | NO   | PRI | NULL    |       |
| rollno              | int    | NO   |     | NULL    |       |
| marks               | int    | NO   |     | NULL    |       |
+---------------------+--------+------+-----+---------+-------+
3 rows in set (0.12 sec)

mysql> desc firstapp_teacher1;
+---------------------+-------------+------+-----+---------+-------+
| Field               | Type        | Null | Key | Default | Extra |
+---------------------+-------------+------+-----+---------+-------+
| contactinfo1_ptr_id | bigint      | NO   | PRI | NULL    |       |
| subject             | varchar(30) | NO   |     | NULL    |       |
| salary              | double      | NO   |     | NULL    |       |
+---------------------+-------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> desc firstapp_contactinfo1;
+---------+--------------+------+-----+---------+----------------+
| Field   | Type         | Null | Key | Default | Extra          |
+---------+--------------+------+-----+---------+----------------+
| id      | bigint       | NO   | PRI | NULL    | auto_increment |
| name    | varchar(30)  | NO   |     | NULL    |                |
| email   | varchar(254) | NO   |     | NULL    |                |
| address | varchar(30)  | NO   |     | NULL    |                |
+---------+--------------+------+-----+---------+----------------+
4 rows in set (0.04 sec)

mysql> select * from firstapp_teacher1;
+---------------------+---------+--------+
| contactinfo1_ptr_id | subject | salary |
+---------------------+---------+--------+
|                   1 | OS      | 150000 |
+---------------------+---------+--------+
1 row in set (0.00 sec)

mysql> select * from firstapp_contactinfo1;
+----+--------------+-------------------+---------+
| id | name         | email             | address |
+----+--------------+-------------------+---------+
|  1 | Dr.Siraj Sir | Drsiraj@gmail.com | guntur  |
+----+--------------+-------------------+---------+
1 row in set (0.05 sec)

Multi level Inheritance (inheritance at multiple level)

models.py
from django.db import models
from django.urls import reverse

# Create your models here.
# class ContactInfo(models.Model):
# 	name=models.CharField(max_length=30)
# 	email=models.EmailField()
# 	address=models.CharField(max_length=30)
# 	class Meta:
# 		abstract=True

# class Student(ContactInfo):
# 	rollno=models.IntegerField(default=0)
# 	marks=models.IntegerField(default=0)

# class Teacher(ContactInfo):
# 	subject=models.CharField(max_length=30)
# 	salary=models.FloatField()

# class ContactInfo1(models.Model):
# 	name=models.CharField(max_length=30)
# 	email=models.EmailField()
# 	address=models.CharField(max_length=30)
# 	# class Meta:
# 	# 	abstract=True

# class Student1(ContactInfo1):
# 	rollno=models.IntegerField(default=0)
# 	marks=models.IntegerField(default=0)

# class Teacher1(ContactInfo1):
# 	subject=models.CharField(max_length=30)
# 	salary=models.FloatField()
 
class Person(models.Model):
    name=models.CharField(max_length=30)
    age=models.IntegerField()

class Employee(Person):
    eno=models.IntegerField()
    esal=models.FloatField()

class Manager(Employee):
    exp=models.IntegerField()
    team_size=models.IntegerField()

admin.py
from django.contrib import admin
# # from firstapp.models import Student,Teacher
# from firstapp.models import Student1,Teacher1,ContactInfo1
from firstapp.models import Person,Employee,Manager

# # Register your models here.
# # admin.site.register(Student)
# # admin.site.register(Teacher)

# admin.site.register(ContactInfo1)
# admin.site.register(Student1)
# admin.site.register(Teacher1)

admin.site.register(Person)
admin.site.register(Employee)
admin.site.register(Manager)

C:\Users\abc\Desktop\django\firstproject>py manage.py makemigrations
Migrations for 'firstapp':
  firstapp\migrations\0019_person_remove_teacher1_contactinfo1_ptr_employee_and_more.py
    + Create model Person
    - Remove field contactinfo1_ptr from teacher1
    + Create model Employee
    - Delete model Student1
    - Delete model ContactInfo1
    - Delete model Teacher1
    + Create model Manager

C:\Users\abc\Desktop\django\firstproject>py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, firstapp, sessions
Running migrations:
  Applying firstapp.0019_person_remove_teacher1_contactinfo1_ptr_employee_and_more... OK

mysql> show tables;
+----------------------------+
| Tables_in_jobsdb           |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| firstapp_employee          |
| firstapp_manager           |
| firstapp_person            |
+----------------------------+
13 rows in set (0.02 sec)

mysql> select * from firstapp_manager;
+-----------------+-----+-----------+
| employee_ptr_id | exp | team_size |
+-----------------+-----+-----------+
|               1 |  18 |         7 |
+-----------------+-----+-----------+
1 row in set (0.00 sec)

mysql> select * from firstapp_Employee;
+---------------+-----+--------+
| person_ptr_id | eno | esal   |
+---------------+-----+--------+
|             1 | 999 | 150000 |
+---------------+-----+--------+
1 row in set (0.01 sec)

mysql> select * from firstapp_Person;
+----+--------------+-----+
| id | name         | age |
+----+--------------+-----+
|  1 | Dr.Siraj Sir |  40 |
+----+--------------+-----+
1 row in set (0.00 sec)

mysql> desc firstapp_Person;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | bigint      | NO   | PRI | NULL    | auto_increment |
| name  | varchar(30) | NO   |     | NULL    |                |
| age   | int         | NO   |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

mysql> desc firstapp_Employee;
+---------------+--------+------+-----+---------+-------+
| Field         | Type   | Null | Key | Default | Extra |
+---------------+--------+------+-----+---------+-------+
| person_ptr_id | bigint | NO   | PRI | NULL    |       |
| eno           | int    | NO   |     | NULL    |       |
| esal          | double | NO   |     | NULL    |       |
+---------------+--------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> desc firstapp_Manager;
+-----------------+--------+------+-----+---------+-------+
| Field           | Type   | Null | Key | Default | Extra |
+-----------------+--------+------+-----+---------+-------+
| employee_ptr_id | bigint | NO   | PRI | NULL    |       |
| exp             | int    | NO   |     | NULL    |       |
| team_size       | int    | NO   |     | NULL    |       |
+-----------------+--------+------+-----+---------+-------+
3 rows in set (0.00 sec)

============================================
Multiple Inheritance
if model class extends multiple parent classes simultaneously then such type of inheritance is called as multiple inheritance

parent classes shouldn't contain common fileds, otherwise we will get an error
internally this inheritance is also multitable inheritance

models.py
from django.db import models
class Parent1(models.Model):
    f1 = models.CharField(max_length=30)
    f2 = models.CharField(max_length=30)

class Parent2(models.Model):
    f3 = models.CharField(max_length=30,primary_key=True)
    f4 = models.CharField(max_length=30)

class Child(models.Model):
    # parent1 = models.OneToOneField(Parent1, on_delete=models.CASCADE, primary_key=True)
    # parent2 = models.OneToOneField(Parent2, on_delete=models.CASCADE)
    f5 = models.CharField(max_length=30)
    f6 = models.CharField(max_length=30)

makemigrations and migrate

C:\Users\abc\Desktop\django\firstproject>python manage.py makemigrations firstapp
Migrations for 'firstapp':
  firstapp\migrations\0001_initial.py
    + Create model Child
    + Create model Parent1
    + Create model Parent2

C:\Users\abc\Desktop\django\firstproject>python manage.py migrate firstapp
Operations to perform:
  Apply all migrations: firstapp
Running migrations:
  Applying firstapp.0001_initial... OK

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| hospital           |
| information_schema |
| it2                |
| it3                |
| jobsdb             |
| keylogger_db       |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| seeddb             |
| studentdb          |
| students           |
| sys                |
| world              |
+--------------------+
15 rows in set (0.00 sec)
mysql> USE jobsdb;
Database changed
mysql> show tables;
+----------------------------+
| Tables_in_jobsdb           |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| firstapp_child             |
| firstapp_parent1           |
| firstapp_parent2           |
+----------------------------+
13 rows in set (0.00 sec)

mysql> desc firstapp_parent1;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | bigint      | NO   | PRI | NULL    | auto_increment |
| f1    | varchar(30) | NO   |     | NULL    |                |
| f2    | varchar(30) | NO   |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
3 rows in set (0.06 sec)

mysql> desc firstapp_parent2;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| f3    | varchar(30) | NO   | PRI | NULL    |       |
| f4    | varchar(30) | NO   |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> desc firstapp_child;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | bigint      | NO   | PRI | NULL    | auto_increment |
| f5    | varchar(30) | NO   |     | NULL    |                |
| f6    | varchar(30) | NO   |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

Model Manager:
we can use this to interact with DB
we can get default model manager by using Model.objects property
Model.objects is type:

manager=Employee.objects	DMM (Default model manager)
employee_list=manager.all()

C:\Users\abc\Desktop\django\firstproject>py manage.py shell
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from firstapp.models import Parent1;
>>> type(Parent1.objects)
<class 'django.db.models.manager.Manager'>

Q) What is the purpose of Model Manager?
To interact with DB

Q) How to get Default model manager?
By using Model.objects property

Q) Model manager of what type?
django.db.models.manager.Manager

Based on our requirement, we can define and use our own custom model managers

Employee model contains: 1000 records
Employees=Employee.objects.all()--> to get all records based on insertion order but not possible to get all records based on ascending
order of enos

How to define our own custom manager:
we can create a child class for Models.manager
whenever we are calling all() method, internally it will call get_queryset() method.
to customize behaviour, we have to override this method in our custom manager class

Ex: to get all records based on ascending order of enos, we have to define CustomManager class

models.py (C:\Users\abc\Desktop\django\firstproject\firstapp\models.py)
from django.db import models

class CustomManager(models.Manager):
    def get_queryset(self):
        qs=super().get_queryset().order_by('eno')
        return qs
    def get_emp_sal_range(self,minsal,maxsal):
        qs=super().get_queryset().filter(esal__range=(minsal,maxsal))
        return qs
    def get_emp_sorted_by(self,param):
        qs=super().get_queryset().order_by(param)
        return qs

# Create your models here.
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)
    objects=CustomManager()

makemigrations and migrate

admin.py (C:\Users\abc\Desktop\django\firstproject\firstapp\admin.py)
from django.contrib import admin
from firstapp.models import Employee

# Register your models here
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

views.py (C:\Users\abc\Desktop\django\firstproject\firstapp\views.py)
from django.shortcuts import render
from firstapp.models import Employee

# Create your views here
def display_view(request):
    # emp_list=Employee.objects.all()
    # emp_list=Employee.objects.get_emp_sal_range(150000,180000)
    # emp_list=Employee.objects.get_emp_sorted_by('ename')
    # emp_list=Employee.objects.get_emp_sorted_by('esal')
    emp_list=Employee.objects.get_emp_sorted_by('-esal')
    return render(request,'testapp/index.html',{'emp_list':emp_list})

base.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\base.html)
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
  <div class="container" align="center">
    {% block body_block %}
    {% endblock %}
  </div>
      
</body>
</html>

index.html (C:\Users\abc\Desktop\django\firstproject\templates\testapp\index.html)
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Welcome To Employee List</h1>
<table border="3" align="center">
    <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
    </thead>
    {% for emp in emp_list %}
    <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
    </tr>
    {% endfor %}
</table>

{% endblock %}

urls.py (C:\Users\abc\Desktop\django\firstproject\firstproject\urls.py)
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('data/', views.display_view),   
    ]

C:\Users\abc\Desktop\django\firstproject>py populate_student_info.py
Enter number of records:15
15 records inserted successfully...

http://127.0.0.1:8000/data/

Bases on our requirement, we can define our own new methods also inside CustomManager class
============================================
Proxy Model Inheritance
-->For the same model, we can provide a customized view without touching the database. This is possible by using proxy model 
inheritance. 
 
-->In this inheritance, a separate new table wont be created and new proxy model also pointing to the same old table. 
 
 class Emplyee: 
 fields 
 
class ProxyEmployee(Employee): 
  class Meta: 
    proxy = True 
-->Both Employee and ProxyEmployee are posinting to the same table only. 

models.py
from django.db import models

# Create your models here.
class CustomManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(esal__gte=180000)
    
class CustomManager2(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(esal__lte=120000)
    
class CustomManager3(models.Manager):
    def get_queryset(self):
        return super().get_queryset().order_by('eno')
    
class Employee(models.Model):
    eno=models.IntegerField()
    ename=models.CharField(max_length=30)
    esal=models.FloatField()
    eaddr=models.CharField(max_length=30)
    objects=CustomManager()

class ProxyEmployee(Employee):
    objects=CustomManager2()
    class Meta:
        proxy=True

class ProxyEmployee1(Employee):
    objects=CustomManager3()
    class Meta:
        proxy=True

makemigrations and migrate

admin.py
from django.contrib import admin
from firstapp.models import Employee,ProxyEmployee,ProxyEmployee1

# Register your models here
class EmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']
admin.site.register(Employee,EmployeeAdmin)

class ProxyEmployeeAdmin(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']
admin.site.register(ProxyEmployee,ProxyEmployeeAdmin)

class ProxyEmployeeAdmin1(admin.ModelAdmin):
    list_display=['eno','ename','esal','eaddr']
admin.site.register(ProxyEmployee1,ProxyEmployeeAdmin1)

C:\Users\abc\Desktop\django\firstproject>py populate_student_info.py
Enter number of records:15
15 records inserted successfully...

views.py
from django.shortcuts import render
from firstapp.models import Employee,ProxyEmployee,ProxyEmployee1

# Create your views here
def display_view(request):
    # emp_list=Employee.objects.all()
    # emp_list=ProxyEmployee.objects.all()
    emp_list=ProxyEmployee1.objects.all()
    return render(request,'testapp/index.html',{'emp_list':emp_list})

urls.py
from django.contrib import admin
from django.urls import path
from firstapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('data/', views.display_view),   
    ]

base.html
<!DOCTYPE html>
{% load static %}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sangam Softsol</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link rel="icon" href="{% static 'images/sangamsoft.jpg' %}">
    
</head>
<body>
  <div class="container" align="center">
    {% block body_block %}
    {% endblock %}
  </div>
      
</body>
</html>

index.html
<!DOCTYPE html>
{% extends 'testapp/base.html' %}
{% block body_block %}
<h1>Welcome To Employee List</h1>
<table border="3" align="center">
    <thead>
        <th>Employee Number</th>
        <th>Employee Name</th>
        <th>Employee Salary</th>
        <th>Employee Address</th>
    </thead>
    {% for emp in emp_list %}
    <tr>
        <td>{{emp.eno}}</td>
        <td>{{emp.ename}}</td>
        <td>{{emp.esal}}</td>
        <td>{{emp.eaddr}}</td>
    </tr>
    {% endfor %}
</table>

{% endblock %}

http://127.0.0.1:8000/data/


Employee Number	Employee Name	Employee Salary	Employee Address
5906	Rachel Hopkins	110981.0	Morrischester
7806	Tina Fox	118125.0	Petersonstad
------------------------------------------------------
True and False
True or False
not True=False

10 and 20
0 and 20
20 and 10

C:\Users\abc\Desktop\django\firstproject>py
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> 10 and 20
20
>>> 0 and 20
0
>>> 10 or 20
10
>>> 0 or 20
20
>>> 20 or 0
20
>>> 'charan' and 'surekha'
'surekha'
>>> 'charan' or 'surekha'
'charan'
>>> '' and 'charan'
''
>>> 'surekha' or ''
'surekha'
>>> not 'surekha'
False
>>> 3&4
0
>>> 3 & 4
0
>>> 4&5
4
>>> 4|5
5
>>> 4^5
1
>>> ~4
-5

compound assignment operator
+=
-=
*=
>>> x=10
>>> x+=10
>>> x
20
assignment operator
=
==
=== (not in python, in js)

diff between is and ==
>>> x=10
>>> y=20
>>> x is y
False
>>> x == y
False
>>> y=10
>>> x is y
True
>>> x == y
True
>>> x=10
>>> y='10'
>>> x is y
False
>>> x == y
False

diff between = and copy
= meant for aliasing
copy() for cloning
shallow and deep cloning

:= (walrous operator) -- assignment expression operator
python 3.8 --> 14 oct 2019
python 3.9 --> 5 oct 2020

its available in plsql also
PEP 572 (Python Enhancement Proposal)

test1.py
l=[10,20,30,40,50]
# n=len(l)
# if len(l)>3:
if (n:=len(l))>3:
    print('List contains more than 3 elements')
    # print('The length of the list:',len(l))
    print('The length of the list:',n)

C:\Users\abc\Desktop\django\firstproject>cd ..

C:\Users\abc\Desktop\django>py test1.py
List contains more than 3 elements
The length of the list: 5

C:\Users\abc\Desktop\django>py test1.py
List contains more than 3 elements
The length of the list: 5

C:\Users\abc\Desktop\django>py test1.py
List contains more than 3 elements
The length of the list: 5

test1.py
teachers=[]
teacher=input('Enter your admiring teacher:')
while teacher!='charan':
    teachers.append(teacher)
    teacher=input('Enter your admiring teacher:')
print(teachers)

C:\Users\abc\Desktop\django>py test1.py
Enter your admiring teacher:rajasir
Enter your admiring teacher:sirajsir
Enter your admiring teacher:jubairsir
Enter your admiring teacher:charan
['rajasir', 'sirajsir', 'jubairsir']

C:\Users\abc\Desktop\django>py test1.py
Enter your admiring teacher:charan
[]

C:\Users\abc\Desktop\django>py test1.py
Enter your admiring teacher:sirajsir
Enter your admiring teacher:rajasir
Enter your admiring teacher:jubairsir
Enter your admiring teacher:charan
['sirajsir', 'rajasir', 'jubairsir']

# feature available since 3.0
def f1(*,a,b):
    print(a,b)
# f1(10,20)
# f1(a=10,b=20)
f1(10,b=20)

after * all parameters become keyword only parameters
at the time of calling we should pass by keyword only

C:\Users\abc\Desktop\django>py test1.py
Traceback (most recent call last):
  File "C:\Users\abc\Desktop\django\test1.py", line 3, in <module>
    f1(10,20)
TypeError: f1() takes 0 positional arguments but 2 were given

C:\Users\abc\Desktop\django>py test1.py
10 20

C:\Users\abc\Desktop\django>py test1.py
Traceback (most recent call last):
  File "C:\Users\abc\Desktop\django\test1.py", line 5, in <module>
    f1(10,b=20)
TypeError: f1() takes 0 positional arguments but 1 positional argument (and 1 keyword-only argument) were given

# feature available since 3.8v as the part of PEP 570
def f1(a,b,/):
    print(a,b)
f1(10,20)
# f1(a=10,b=20)

before / all parameters, will become positional only parameters

C:\Users\abc\Desktop\django>py test1.py
Traceback (most recent call last):
  File "C:\Users\abc\Desktop\django\test1.py", line 5, in <module>
    f1(a=10,b=20)
TypeError: f1() got some positional-only arguments passed as keyword arguments: 'a, b'

C:\Users\abc\Desktop\django>py test1.py
10 20
============================================
Deployment
the process of moving application to the live/production (heroku,digital ocean,amazon,godaddy)

there are several deployment options are available for django web application. these options will be based on  
Scalability
Performance
Price
Security
Easy to use etc..

for ex: web server--> 10 req, 100 req, 1000 req, 10000000 req

various deployment options
pythonanywhere.com -- very simple and easy to use

digital ocean --VPS(virtual private server)
heroku -- https://devcenter.heroku.com/articles/git
Amazon cloud etc..

git,github,gitlab,bitbucket etc..

version control system
remote hosting server
deployment platform

Need of version control system:
To maintain multiple versions of the same project
at any point of time, we can have backup of previous versions
can see diff between 2 or more versions of the same project simultaneously
it helps to track history over time and collaborate easily with other

top 15 version control software tools
git
svn
cvs
mercurial
monotone
bazar
tfs
vsts
perforce helix core
IBM rational clearcase
revision control system
visual source safe
ca harvest software change manager
pvcs
darcs

Note: git is a version control system, which maintain and track diff versions

git vs github
Git is a version control system that helps to track change in our code
github is remote hosting platform to host our files remotely
github is to host our remote code repo

remote hosting platforms: github,bitbucket,gitlab,..

Note: if our app at remote hosting platform then deployment on various platforms will become very easy

deployment platforms
where we have to deploy our app

pythonanywhere
digital ocean
heroku
amazon cloud

version control sys vs remote hosting platform vs deployment platform
how to install git:
https://github.com/git-for-windows/git/releases/download/v2.48.1.windows.1/Git-2.48.1-64-bit.exe

Activities related to Git Repository: 
1). Create a directory named with my_cwd. It is our current working directory. 
2). We required a local repository to track our files. For this we have to use the command: 
git init: 
This command will create a folder named with .git, which acts as a local repository. 
3). Bydefault git wont track any files. We have to add files to the stagging area, such files only can be tracked vy git. 
We can add files to the stagging area by using. 
Igit add abc.txt 
git add .==>means all files present in current working ditrectory. 
4). We have to commit the changes in the files present in stagging area. Then the files changes will be moved to local repository. 
git commit -m 'first commit by mahesh' 
5). We can find status of files by using 
git status 
6). We can find all commits related to our local repo? 
git log 
git init 
git add. 
git coomit -m 'message' 
git status 
git log

github:
push an existing repo from the CLI
git remote add origin https://github.com/saidevopseng/django.git
git branch -M master
git push -u origin master

these are the steps till the repo gets uploaded into remote repo(github) from local machine to local to local repo(git)
cd Desktop
    cd django
    git init
    git add .
    git status
    git commit -m 'first commit by charan'
    git status
    git log

theese are to push from local repo to github
    git remote add origin https://github.com/saidevopseng/django.git
    git branch -M master
    git push -u origin master

once its get uploaded to github, then do small changes and try to push to github again to just check
git add .
git commit -m 'second commit by charan'
git push -u origin master
============================================

============================================

============================================

============================================ 
Java Script
To add functionality to the html components

Fullstack
MEAN -- mongo+express+angular+node
MERN -- mongo+express+react+node

Fullstack webdevelopment with python+django
java script developers console
5 basic java script primitive data types
declare variables
the 3 most commonly used js functions

java script developers console
10+20

snippets -- js develper console, python shell, python idle

how to launch: browser--> right click --> inspect --> console (ctrl+shift+j or f12)

to clear console -- ctrl+l or clear()

5 basis js primitive data types
1. number 
var x=10
undefined
typeof x
'number'
x=10.5
10.5
typeof x
'number'
x= -10
-10
typeof x
'number'

diff between x=10 and var y=20
x=10

10
typeof x
'number'
var y=20
undefined
typeof y
'number'
		
10+20
30
10-20
-10
20/10
2
20*10
200
10**2
100
10.5+2.6
13.1

2. string data type
s='charan'
'charan'
typeof s
'string'
s="charan"
'charan'
typeof s
'string'
s='''charan'''
VM701:1 Uncaught SyntaxError: Unexpected string

any sequence of characters either within the single quotes or double quotes
'charan' or "charan"

+ operator acts as concatination
'sangam'+'soft'

'sangam'+'soft'
'sangamsoft'
'sangam'+10 -- in python it gives an error
'sangam10'
'sangam'+true
'sangamtru 

if both args are number type then + acts as addition
if atleast one arguements is string type, then concatination operator

how to find length of the string?
s='sangamsoft'
'sangamsoft'
s.length
10

How to access characters of a string
s
'sangamsoft'
s[0]
's'
s[7]
'o'
s[-1] -- -ve supported by python not js
undefined
s[100] -- if index not available, we will get index error
undefined
 
3. boolean type:
true/false
True/False (in python)

3.boolean
var x=10(in python)
var name='charan'
var isMarried=false

var x=10
undefined
typeof x
'number'
var name='charan'
undefined
typeof name
'string'
var isMarried=false
undefined
typeof isMarried
'boolean 

so js also a dynamically typed language

variable naming convention in js
studentMobileNumber -- camelcase(java/js)
student_mobile_number -- snake case(python)
student-mobile-number -- kebab case(LISP)
pascal case also available

4.undefined (variables are declared but not initialized or if the value is not available)
var y
undefined
typeof y
'number'
var z -- not initialized
undefined
typeof z
'undefine

5.null (means nothing)
if the value of the variable is null means its not pointing to any value

var currentPlayer='dhoni'
undefined
currentPlayer
'dhoni'
currentPlayer=null -- if game over then no current player
null
currentPlayer
null

3 most commonly used methods in js
alert()
console.log()
alert()

1.alert()
To display some alerts to the end user
alert('hello charan, i am js')
undefined
alert(1000)
undefined
alert(true)
undefined
alert('students..prioritize your activities..short cut for success:'+100)

can we use expressions in alert?
alert(10+20)
undefined
alert('10'+'20')
undefined

2.console.log():
to print messages to the developer console

console.log('hello students')
VM1895:1 hello students
console.log(10*20)
VM1923:1 200

3.prompt()
to get input from the end user
name=input('enter your name:') -- in python

var name=prompt('Enter your name')
undefined
var quote=prompt('enter your quote')
undefined
alert('hello'+name+',thanks for your quote:\n'+quote)

separate file: .js file
how to write js code to a separate file and configure to html

create a folder javascript in C:\Users\abc\Desktop\django\
open the above created folder in vs code
create 2 files with the names
test.html(C:\Users\abc\Desktop\django\javascript\test.html)
<!DOCTYPE html>
<html lang="en">
<head>
    <script type="text/javascript" src="test.js">

    </script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Welcome to Sangam softsol:IT service provider</h1>
    <!-- <script type="text/javascript" src="test.js"> -->
</body>
</html>

test.js (C:\Users\abc\Desktop\django\javascript\test.js)
alert('hello students good evening')

we can link js file to html file using <script type="text/javascript" src="test.js">
we can take this script tag either inside head tag or body tag
if we are taking inside head tag then js code will be executed before processing body (first js code then html code)
if script tag inside body then js code will be executed as part of the body execution(it will be executed with the body)

test.html(C:\Users\abc\Desktop\django\javascript\test.html)
<!DOCTYPE html>
<html lang="en">
<head>
    <script type="text/javascript" src="test.js">

    </script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Welcome to Sangam softsol:IT service provider</h1>
    <!-- <script type="text/javascript" src="test.js"> -->
</body>
</html>

test.js
var name=prompt('Enter your name:')
var age=prompt('enter age:')
ageInDays=(60-age)*365
reaminingDays=(60-age)*365
alert('Hello'+name+'...\n your current age:'+ageInDays+'days\n you will be there on earth only'+reaminingDays+'hence enjoy every day of life ass very less number of days remaining') 

Operators
1.Arithmetic operators (+,-,*,/,%,**)

10+20
30
20-10
10
10*20
200
20/2
10
20%2
0
20//2 -- meant for commenting, not floor division operator
20

comparison operators
10<20
true
10>20
false
10<=20
true
10>=20
false
10==20
false
10!=20
true

diff between == and ===
10==10
true
10=='10'
true
10==10.0
true

(==) here content in the variables are important not data type

10===10
true
10==='10'
false
10===10.0
true

(===) here type is important

recommended to use "==="

true==1
true
false==0
true
null==undefined
true

true=='1'
true
true==='1'
false
false==0
true
false===0
false
null===undefined
false
false=='0'
true
false==='0'
false 

0/1
0
1/0
Infinity
0/0
NaN

10<NaN
false
10<=NaN
false
10>NaN
false
10>=NaN
false
10==NaN
false
NaN==NaN
false

0/1==NaN
false

Above all are false

10!=NaN
true
NaN!=NaN
true
the above 2 only true

Logical Operators
&& -- AND
|| -- OR
! -- NOT

x && y both should be true,then only it returns true
x || y atleast one is true, it returns true

C:\Users\abc>py
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> bool(0)
False
>>> bool(1)
True
>>> bool(10)
True
>>> bool('')
False
>>> bool("")
False

for logical operators
zero -- false
non-zero -- true
empty string -- false
non-empty string -- true
null,undefined,NaN -- false

!true
false
!NaN
true
!null
true
!undefined
true
!0
true

x=10
10
y=20
20
x<10 && x!=5
false

!(x=='10' || x===y) && (y!=8 && x<=y)
false


'10'+2
'102'
'10'-2
8
'10'%2
0
'10'-'2'
8
'10'+'2'
'102

'10'+'20' -- it shoud give 30
do type casting

Number('10')+Number('20')
30
Number('10')+'20'
'1020

conditional statements
if
if-else
if-else-if

if(b){
action if b is true
}
else{
action if b is false
}

test.html
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- <script type="text/javascript" src="test.js"></script> -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Welcome to Java Script Examples</h1>
    <script type="text/javascript" src="test.js"></script>
</body>
</html>

test.js
x=Number(prompt('Enter any number to check:'));
if(x%2==0){
    alert('given number is even');
    console.log('the given number:'+x+'is even')
}
else{
    alert('given number is odd');
    console.log('the given number:'+x+'is odd')
}

";" is optional, as python
=============================================
test.html
same as last file

test.js
var age=Number(prompt('Enter Your age:'))
if(age>60){
    alert('Please wait some more time definitely you will get best match')
}else if(age<18){
    alert('you crossed marriage age, no chance of getting marriage..')
}else{
    alert('Thanks for registration..you will get match details soon by mail')
}

read brand from end user and provide meaningful message


test.js
var brand=prompt('Enter Your favourite brand:')
if(brand=='bmw'){
    alert('its just ordinary in brands')
}else if(brand=='mercedes'){
    alert('safety with speed')
}else if(brand=='ferrari'){
    alert('great experience with safety features and unimaginable speed')
}
else{
    alert('other brands not brands')
}

Number guess application
test.js
var sno=3
var num=Number(prompt('enter your guess between 1 to 9:'))
if(num>sno){
    alert('its too high guess again')
}else if(num<sno){
    alert('its too low..guess again')
}else{
    alert('Congratulations..your guess matched')
}

Iterative statements
to execute a group of statements iteratively
DRY principle

its highly recommended to follow DRY principle, if not development cost, time and length of the code increases and reduces the 
readability

in js there are 2 types of iterative statements
while
for

while loop: as long as the condition true, then we should go for while loop (we dont know, how many times it will get executed, 
untill the given condition false loop will keep on running)

while (condition){
body
----
----
}

ex: to print hello 10 times to the console

var count=1
while (count<=10){
    console.log('hello')
    count++
}

output
10 test.js:3 hello

print first 10 numbers
var count=1
while (count<=10){
    console.log(count)
    count++
}

output
test.js:3 1
test.js:3 2
test.js:3 3
test.js:3 4
test.js:3 5
test.js:3 6
test.js:3 7
test.js:3 8
test.js:3 9
test.js:3 10

to print each character present in the given string
var s=prompt('Enter any string:')
var i=0
while(i<s.length){
    console.log('the character present at index:'+i+s[i])
    i++
}

test.js:4 the character present at index:0c
test.js:4 the character present at index:1h
test.js:4 the character present at index:2a
test.js:4 the character present at index:3r
test.js:4 the character present at index:4a
test.js:4 the character present at index:5n

to print nth table

var n=Number(prompt('Enter a Number:'))
var i=1
while(i<=10){
    console.log(i+'*'+n+'='+(i*n))
    i++
}

test.js:4 1*17=17
test.js:4 2*17=34
test.js:4 3*17=51
test.js:4 4*17=68
test.js:4 5*17=85
test.js:4 6*17=102
test.js:4 7*17=119
test.js:4 8*17=136
test.js:4 9*17=153
test.js:4 10*17=170

to print all numbers divisible by 3 and 5 between 100
var n=5
while(n<=100){
    if(n%3==0 && n%5==0)
    console.log(n)
    n++
}

test.js:4 15
test.js:4 30
test.js:4 45
test.js:4 60
test.js:4 75
test.js:4 90

if we dont know number of iterations in advance then we will go for while loop

write a program to read faculty name from end user until entering 'sirajsir' by using while loop
var faculty=prompt('Enter your admiring faculty:')
while(name!='sirajsir'){
    var name=prompt('enter your admiring faculty:')
}
alert('Thanks for the confirmation of your admiring faculty:'+faculty)


for loop: (exact iteration)-- if we know the no.of iterations in advance
for(init;cond_check;incr_decr){
body
---
---
}

ex: to print 'hello' 10 times
for(var i=0;i<10;i++){
    console.log('hello')
}

to print numbers from 1 to 10
for(var i=1;i<=10;i++){
    console.log(i)
}

to print all numbers which are divisible by 9 from 1 to 100
for(var i=1;i<=100;i++){
    if(i%9==0)
    console.log(i)
}

var s=prompt('Enter any string:')
for(var i=0;i<s.length;i++){
    console.log(s[i])
}

while vs for

secret agent application
rules:
first character of the name should be 's'
the last character of favourite faculty should be 'j'
the lucky number should be 7
the length of favourite dish(no of characters) should be >=6

test.js
var name=prompt('Enter your name:')
var faculty=prompt('Enter your admiring faculty name:')
var lucky=prompt('enter your lucky number:')
var dish=prompt('Enter your favourite dish')

var nameCondition=false
var facultyCondition=false
var luckyCondition=false
var dishCondition=false

if (name[0]=='s'){
    nameCondition=true
}
if(faculty[faculty.length-1]=='j'){
    facultyCondition=true
}
if(lucky==7){
    luckyCondition=true
}
if(dish.length>=6){
    dishCondition=true
}
alert('hello'+name+'\n thanks for your information')
if(nameCondition&&facultyCondition&&luckyCondition&&dishCondition){
    console.log('hello secret agent our next operation is:')
    console.log('we have to kill atleast 10-talking students in the class, because these are burden to the family and country as well')
}

===================================
Higher order functions:
the function which can take another function as an arguement, such type of special functions are called as higher order functions
setInterval(function_name,time_in_milliseconds)

function singAsong(){
    console.log('Aanaluguru..')
    console.log('mounamganey..')
}

go to dev console in browser
setInterval(singAsong,5000)
2
test.js:2 Aanaluguru..
test.js:3 mounamganey..
test.js:2 Aanaluguru..
test.js:3 
clearInterval(id_gen_at_start)-- here id=2

Anonymous function
defining a function without a name, objective of this kind is instant usage(one time usage)

setInterval(function(){console.log('Anonymous function')},5000) 
3
3VM277:1 Anonymous function
clearInterval(3)
undefined

code examples
prob1: sleep_in

write a function called sleep_in that takes 2 boolean parameters: weekday and vacations
the parameter weekday is True if its a weekday, and the parameter vacation is True if we are on vacation. we sleep in if it is not a
weekday or we are on vacation.

return true if we sleep in

sleep_in(false,false) -- true
sleep_in(true,false) -- false
sleep_in(false,true) -- true

test.js
// function sleep_in(weekday,vacation){
//     if (weekday==false){
//         return true
//     }else if(vacation==true){
//         return true
//     }else{
//         return false
//     }
//     }

function sleep_in(weekday,vacation){
    return !weekday || vacation
}
console.log('Is Student sleeping:',sleep_in(true,true))
console.log('Is Student sleeping:',sleep_in(false,false))
console.log('Is Student sleeping:',sleep_in(true,false))
// console.log('Is Student sleeping:',sleep_in(false,true))

Is Student sleeping: true
test.js:5 Is Student sleeping: true
test.js:6 Is Student sleeping: false

prob2: monkey_trouble
we have 2 monkeys, a and b, and the parameters a_smile and b_smile indicate if each is smiling. we are in trouble they both are 
smiling or if neither of them is smiling. return true if we are in trouble

monkey_trouble(true,true)
monkey_trouble(false,false)
monkey_trouble(true,false)

test.js
// function monkey_trouble(a_smile,b_smile){
//     if ((a_smile==true && b_smile==true)||(a_smile==false && b_smile==false)){
//         return true
//     }else{
//         return false
//     }
// }

function monkey_trouble(a_smile,b_smile){
    return ((a_smile && b_smile)||(!a_smile && !b_smile))
}
console.log('Is person in trouble:'+monkey_trouble(true,true))
console.log('Is person in trouble:'+monkey_trouble(true,false))
console.log('Is person in trouble:'+monkey_trouble(false,false))

test.js:9 Is person in trouble:true
test.js:10 Is person in trouble:false
test.js:11 Is person in trouble:true

prob3: string_times
given a string and non negative int n, return a larger string that is n copies of the original string i.e, string repitition operator

string_times('Hi',2) -- 'hihi'
string_times('Hi',3) -- 'hihihi'
string_times('Hi',1) -- 'hi'

test.js
function string_times(str,n){
    result=''
    count=1
    while (count<=n){
        result=result+str
        count++
}
return result
    }
console.log(string_times('Hi',2))
console.log(string_times('Hi',3))
console.log(string_times('Hi',1))

test.js:10 HiHi
test.js:11 HiHiHi
test.js:12 Hi

above case using for loop
test.js
function string_times(str, n) {
    result = '';
    for (var count = 1; count <= n; count++) {
        result += str;
    }
    return result;
}

console.log(string_times('s', 2));       // Output: "ss"
console.log(string_times('sai', 3));     // Output: "saisaisai"
console.log(string_times('charan', 1));  // Output: "charan"
    
test.js:22 ss
test.js:23 saisaisai
test.js:24 charan

prob4: lucky_sum
given 3 int values a,b,c return their sum. however, if one of the values is 13 then it doesn't count towards the sum and values to its
right do not count. so for ex if b is 13, then both b and c do not count

lucky_sum(1, 2, 3)
lucky_sum(1, 2, 13)
lucky_sum(1, 13, 3)
lucky_sum(13, 2, 3)

// function lucky_sum(a, b, c) {
//     if (a === 13) return 0;
//     if (b === 13) return a;
//     if (c === 13) return a + b;
//     return a + b + c;
// }

function lucky_sum(a, b, c) {
    return a === 13 ? 0 : 
           b === 13 ? a : 
           c === 13 ? a + b : 
           a + b + c;
}

console.log(lucky_sum(1, 2, 3));   
console.log(lucky_sum(1, 2, 13));  
console.log(lucky_sum(1, 13, 3));  
console.log(lucky_sum(13, 2, 3));

test.js:8 6
test.js:9 3
test.js:10 1
test.js:11 0

alternative way: ternary operator
result = (condition)?x:y
if condition is true then x value will be considered, else y value will be considered

test.js
Problem-5:caught_speeding 
You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no 
ticket, 1=small ticket, 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 
1. If speed is 81 or more, the result is 2. 

Unless it is your birthday -- on that day, your speed can be 5 higher in all cases. 

caught_speeding(60, False) --> 0 
caught_speeding (65, False) --> 1 
caught_speeding (65, True) --> 0

test.js
// function caught_speeding(speed, isBirthday) {
//     var limit = isBirthday ? 5 : 0; // Allow 5 extra speed on birthday

//     if (speed <= 60 + limit) {
//         return 0; // No ticket
//     } else if (speed <= 80 + limit) {
//         return 1; // Small ticket
//     } else {
//         return 2; // Big ticket
//     }
// }

function caught_speeding(speed, isBirthday) {
    var limit = isBirthday ? 5 : 0;  // Allow 5 extra speed on birthday
    return speed <= 60 + limit ? 0 : 
           speed <= 80 + limit ? 1 : 
           2;
}

console.log('Getting ticket with number'+caught_speeding(60, false)); // Output: 0
console.log('Getting ticket with number'+caught_speeding(65, false)); // Output: 1
console.log('Getting ticket with number'+caught_speeding(65, true));  // Output: 0

test.js:8 Getting ticket with number0
test.js:9 Getting ticket with number1
test.js:10 Getting ticket with number0

java script arrays
its an indexed collection of elements
the main advantage of array concept is we can represent multiple values by using a single variable so that the length of the code 
will be reduced and readability will be improved

without array
var n1=10
var n2=20
var n3=30
var n4=40

with an array
var numbers=[10,20,30,40]

accessing array elements by using index
by using index, we can access array elements. java script arrays follow 0-based index. i.e, the index of the first element is 0

var numbers=[10,20,30,40]
undefined
faculty=['siraj sir','jubair sir','raja sir']
(3) ['siraj sir', 'jubair sir', 'raja sir']
typeof numbers
'object'
typeof faculty
'object'
console.log(faculty[0])
VM349:1 siraj sir
undefined
console.log(faculty[1])
VM356:1 jubair sir
undefined
console.log(faculty[2])
VM365:1 raja sir
undefined
console.log(faculty[3])
VM372:1 undefined
undefined

note: if we are trying to access array elements by using out of range index, then we will get undefined value but we won't get error

updating array elements by using index
faculty
(3) ['siraj sir', 'jubair sir', 'raja sir']
faculty[1]='charan'
'charan'
faculty
(3) ['siraj sir', 'charan', 'raja sir']
console.log(faculty[1])
VM449:1 charan
undefined

adding new element to the array
faculty[4]='chandu'
'chandu'
faculty[40]='akhilesh sir'
'akhilesh sir'
faculty
(41) ['siraj sir', 'charan', 'raja sir', empty, 'chandu', empty × 35, 'akhilesh sir']
0: "siraj sir"
1: "charan"
2: "raja sir"
4: "chandu"
40: "akhilesh sir"
length: 41
[[Prototype]]: Array(0)

How to create an empty array
var numbers=[]
undefined
var numbers=new Array()
undefined

How to find length of an array
by using length variable

faculty=['siraj sir','jubair sir','raja sir']
(3) ['siraj sir', 'jubair sir', 'raja sir']
faculty.length
3
console.log(faculty.length)
VM255:1 3
undefined

java script can hold heterogenious elements
var numbers=[10,10.5,'sai',true,null]
undefined

important methods related to javascript arrays
push()
pop()
unshift()
indexOf()
slice()

push():
numbers
(5) [10, 10.5, 'sai', true, null]
numbers.push(50)
6
numbers
(6) [10, 10.5, 'sai', true, null, 50]

pop():
it will and return last element of the array

numbers
(6) [10, 10.5, 'sai', true, null, 50]
numbers.pop()
50
numbers.pop()
null
numbers
(4) [10, 10.5, 'sai', true]

unshift()
it adds value to the first position, acts as a counterpart to the push()
numbers.unshift(50)
5
numbers
(5) [50, 10, 10.5, 'sai', true]

shift()
it removes and returns the first element of the array, it acts as a counterpart of the pop()
numbers
(5) [50, 10, 10.5, 'sai', true]
numbers.shift()
50
numbers
(4) [10, 10.5, 'sai', true]

indexOf():
can find index of the specified element using this function, if element present multiple multiple times then it returns index of 
first occurence, if the specified element not available it gives -1

var numbers=[10,20,30,30,40,50]
undefined
numbers
(6) [10, 20, 30, 30, 40, 50]
numbers.indexOf(30)
2
numbers.indexOf(20)
1
numbers.indexOf(60)
-1

slice():
we can get part of an array as slice
slice(begin,end) -- returns the array of elements from begin to end-1
index.slice() -- returns total array, this can be used for cloning purpose

numbers
(6) [10, 20, 30, 30, 40, 50]
num1=numbers.slice(1,3)
(2) [20, 30]
num1
(2) [20, 30]
num2=numbers.slice()
(6) [10, 20, 30, 30, 40, 50]
num2
(6) [10, 20, 30, 30, 40, 50]

Multidimensional/nested Arrays:
sometimes arrays as elements, i.e, array inside an array is possible

numbers=[[10,20.5,30],[null,NaN,true],['sai',80,90]]
(3) [Array(3), Array(3), Array(3)]
numbers
(3) [Array(3), Array(3), Array(3)]
numbers[0]
(3) [10, 20.5, 30]
numbers[1]
(3) [null, NaN, true]
numbers[2]
(3) ['sai', 80, 90]

book management app
test.js
function bookManagementApp() {
    var books = []; // Multidimensional array to store book details

    while (true) {
        var choice = prompt("Choose an option:\n1. Add Book\n2. List Books\n3. Exit");

        if (choice === '1') {
            var title = prompt("Enter book title:");
            var author = prompt("Enter book author:");
            var year = prompt("Enter publication year:");

            books.push([title, author, year]); // Storing book details as an array

            console.log("Book added successfully!");

        } else if (choice === '2') {
            if (books.length === 0) {
                console.log("No books available.");
            } else {
                console.log("\nList of Books:");
                console.log("=================================");
                books.forEach((book, index) => {
                    console.log(`${index + 1}. Title: ${book[0]}, Author: ${book[1]}, Year: ${book[2]}`);
                });
                console.log("=================================");
            }

        } else if (choice === '3') {
            console.log("Exiting the Book Management App. Goodbye!");
            break;

        } else {
            console.log("Invalid choice! Please enter 1, 2, or 3.");
        }
    }
}

// Run the book management app
bookManagementApp();


VM1129:14 Book added successfully!
VM1129:20 
List of Books:
VM1129:21 =================================
VM1129:23 1. Title: dlco, Author: charan, Year: 2024
VM1129:25 =================================
VM1129:29 Exiting the Book Management App. Goodbye!
undefined

Retrieving elements of an array
while
for
for-of
forEach()

while:

nums=[10,20,30,40]
var i=0
while (i<nums.length){
    console.log(nums[i]);
    i++
}

﻿test.js:4 10
test.js:4 20
test.js:4 30
test.js:4 40

for

nums=[10,20,30,40]
for(var i=0;i<nums.length;i++){
    console.log(nums[i]); 
}

test.js:3 10
test.js:3 20
test.js:3 30
test.js:3 40

for-of loop
nums=[10,20,30,40]
for(num of nums){
    console.log(num); 
}

output same as above

forEach() method
its a specially designed method, to retrieve elements of an array

arrayObject.forEach(function)

for every element present inside an array the specified function will be applied

test.js
var faculty = ['siraj sir', 'jubair sir', 'raja sir'];

// Define a function to print an element
function printElement(element) {
    console.log(element);
}

// Use forEach to iterate and call printElement for each item
faculty.forEach(printElement);

test.js -- here i am using anonymous function
var faculty = ['siraj sir', 'jubair sir', 'raja sir'];

// Using forEach with an anonymous function
faculty.forEach(function(element) {
    console.log(element);
});

test.js -- here console.log as parameter
var faculty = ['siraj sir', 'jubair sir', 'raja sir'];

// Using forEach with an anonymous function
faculty.forEach(console.log)
// faculty.forEach(element => console.log(element));

test.js:4 siraj sir 0 (3) ['siraj sir', 'jubair sir', 'raja sir']
test.js:4 jubair sir 1 (3) ['siraj sir', 'jubair sir', 'raja sir']
test.js:4 raja sir 2 (3) ['siraj sir', 'jubair sir', 'raja sir']

test.js -- using alert
var faculty = ['siraj sir', 'jubair sir', 'raja sir'];

// Passing alert directly to forEach
faculty.forEach(alert);

for loop is general purpose loop and applicable everywhere, but ForEach() function is applicable for only arrays
by using for, we can iterate forward and backward, but forEach supports forward only

Feature		for Loop							forEach Method
Type		Traditional loop						Higher-order function
Syntax		Uses an index and condition					Takes a callback function
Use Case	Best for iterating when you need an index or breaking the loop	Best for simple iteration without modifying indices
Loop Control	Supports break and continue					Does not support break or continue
Performance	Slightly faster (no function calls)				Slightly slower (callback overhead)
Readability	More code, but flexible						Shorter and cleaner for simple iterations

var faculty = ['siraj sir', 'jubair sir', 'raja sir'];

console.log("Forward Iteration:");
for (var i = 0; i < faculty.length; i++) {
    console.log(faculty[i]); // Printing each faculty member
}

console.log("\nBackward Iteration:");
for (var i = faculty.length - 1; i >= 0; i--) {
    console.log(faculty[i]); // Printing in reverse order
}


test.js:3 Forward Iteration:
test.js:5 siraj sir
test.js:5 jubair sir
test.js:5 raja sir
test.js:8 
Backward Iteration:
test.js:10 raja sir
test.js:10 jubair sir
test.js:10 siraj sir

How to delete elements based on index
splice() function

arrayObject.splice(index,numerofElements)
it deleted specified number of elements starts from the specified index

using splice to delete
faculty=['siraj sir','jubair sir','raja sir','chandu sir','narasimha sir','akhilesh sir']
(6) ['siraj sir', 'jubair sir', 'raja sir', 'chandu sir', 'narasimha sir', 'akhilesh sir']
faculty.splice(1,1)
['jubair sir']
faculty.splice(2,2)
(2) ['chandu sir', 'narasimha sir']
faculty.splice(20,20)
[]
faculty
(3) ['siraj sir', 'raja sir', 'akhilesh sir']

using splice() to add elements at specified index
faculty
(3) ['siraj sir', 'raja sir', 'akhilesh sir']
faculty.splice(2,0,'jubair','chandu')
[]
faculty
(5) ['siraj sir', 'raja sir', 'jubair', 'chandu', 'akhilesh sir']

immutability vs mutability
arrays are mutable
strings are immutable

Q.Write A Javascript Function to take an array as argument and print its elements in reverse order. 
i/p:[10,20,30,40] 
o/p:[40,30,20,10] 
function reverseArray(arr) {
    var reversedArr = [];
    for (var i = arr.length - 1; i >= 0; i--) {
        reversedArr.push(arr[i]);
    }
    console.log(reversedArr);
}

reverseArray([10, 20, 30, 40]); // Output: [40, 30, 20, 10]

alternative
function reverseArray(arr) {
    console.log(arr.reverse());
}

reverseArray([10, 20, 30, 40]); // Output: [40, 30, 20, 10]


Q.Write A Javascript Function to check whether the elements of given array identical(same) or not. 
[10,20,30,40]--->false 
[10,10,10,10]--->true 
function areElementsIdentical(arr) {
    for (var i = 1; i < arr.length; i++) {
        if (arr[i] !== arr[0]) {
            return false;
        }
    }
    return true;
}

console.log(areElementsIdentical([10, 20, 30, 40])); // Output: false
console.log(areElementsIdentical([10, 10, 10, 10])); // Output: true

alternative
function areElementsIdentical(arr) {
    return arr.every((val) => val === arr[0]);
}

console.log(areElementsIdentical([10, 20, 30, 40])); // Output: false
console.log(areElementsIdentical([10, 10, 10, 10])); // Output: true


Q.Write A Javascript Function to find max value of the given array. 
[10,5,3,4,15,9]-->15 
function findMax(arr) {
    var max = arr[0];
    for (var i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

console.log(findMax([10, 5, 3, 4, 15, 9])); // Output: 15

alternative
function findMax(arr) {
    return Math.max(...arr);
}

console.log(findMax([10, 5, 3, 4, 15, 9])); // Output: 15


Q.To find Min and Max present in the given number?
function findMinMax(arr) {
    var min = arr[0];
    var max = arr[0];

    for (var i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return { min, max };
}

console.log(findMinMax([10, 5, 3, 4, 15, 9])); // Output: { min: 3, max: 15 }

alternative
function findMinMax(arr) {
    return {
        min: Math.min(...arr),
        max: Math.max(...arr)
    };
}

console.log(findMinMax([10, 5, 3, 4, 15, 9])); // Output: { min: 3, max: 15 }
===============================================
book management app using array methods

function bookManagementApp() {
    var books = []; // Array to store book objects

    while (true) {
        var choice = prompt("Choose an option:\n1. Add Book\n2. List Books\n3. Delete Book\n4. Exit");

        if (choice === '1') {
            var title = prompt("Enter book title:");
            var author = prompt("Enter book author:");
            var year = prompt("Enter publication year:");

            var book = { title: title, author: author, year: year };
            books.push(book); // Storing book object
            console.log("Book added successfully!");

        } else if (choice === '2') {
            if (books.length === 0) {
                console.log("No books available.");
            } else {
                console.log("\nList of Books:");
                console.log("=================================");
                var index = 1;
                for (var book of books) {
                    console.log(index + ". Title: " + book.title + ", Author: " + book.author + ", Year: " + book.year);
                    index++;
                }
                console.log("=================================");
            }

        } else if (choice === '3') {
            if (books.length === 0) {
                console.log("No books available to delete.");
            } else {
                var deleteTitle = prompt("Enter the title of the book to delete:");
                
                // Find the book object that matches the title
                var bookToDelete = books.find(book => book.title === deleteTitle);

                if (bookToDelete) {
                    var bookIndex = books.indexOf(bookToDelete); // Using indexOf() to get the index
                    books.splice(bookIndex, 1); // Remove book using splice
                    console.log("Book deleted successfully!");
                } else {
                    console.log("Book not found! Please check the title and try again.");
                }
            }

        } else if (choice === '4') {
            console.log("Exiting the Book Management App. Goodbye!");
            break;

        } else {
            console.log("Invalid choice! Please enter 1, 2, 3, or 4.");
        }
    }
}

// Run the book management app
bookManagementApp();


test.js:14 Book added successfully!
test.js:20 
List of Books:
test.js:21 =================================
test.js:24 1. Title: dlco, Author: charan, Year: 2024
test.js:24 2. Title: djnago, Author: sai, Year: 2025
test.js:27 =================================
test.js:42 Book deleted successfully!
test.js:20 
List of Books:
test.js:21 =================================
test.js:24 1. Title: dlco, Author: charan, Year: 2024
test.js:27 =================================
test.js:49 Exiting the Book Management App. Goodbye!

java script objects
by using arrays we can store a group of individual objects and it is not possible to store key-value pairs
if we want to represent a group of key key-value pairs then we should go for objects 

array is group of individual objects
object is a group of key-value pairs

js object stores information in the form of key-value pairs
these are similar to java map objects and python dictionary objects

var variableName{
	key1:value1,
	key2:value2,
	key3:value3,
}

https://jsonplaceholder.typicode.com/todos/1 -- api

api to get bitcoin price: https://api.coindesk.com/v1/bpi/currentprice.json

test.py
import requests 
r = requests.get('https://api.coindesk.com/v1/bpi/currentprice.json') 
datar.json() 
#print(data['time']) 
#print(data['time']['updated']) 
#print(data['bpi']) 
#print(data['bpi']['USD']) 
#print(data['bpi']['USD']['rate']) 
print('Hello friends, if you required bit coin price, please contact me:') 
print(f"As on {data['time']['updated']}, Bitcoin Price: ${data['bpi']['USD']['rate']}") 

var movie={name:'pushpa',year:2024,hero:'allu arjunn'}
undefined
typeof(movie)
'object'
movie
hero: "allu arjunn"
name: "pushpa"
year: 2024
[[Prototype]]: Object
console.log(typeof(movie))
VM237:1 object
undefined
console.log(movie)
VM303:1 {name: 'pushpa', year: 2024, hero: 'allu arjunn'}
undefined

in js objects no order, hence index concept is not possible
=================================
to add key-values to the object

var nums={}
undefined
typeof nums
'object'
nums['fno']=10
10
nums['sno']=20
20
nums['tno']=30
30
console.log(nums)
VM530:1 {fno: 10, sno: 20, tno: 30}
undefined

if the specified key is already available, then old values will be replaced with new value
nums.fno=40
40
console.log(nums)
VM578:1 {fno: 40, sno: 20, tno: 30}
undefined

how to update values
nums['fno']=50
50
console.log(nums)
VM608:1 {fno: 50, sno: 20, tno: 30}
undefined
nums.fno=60
60
console.log(nums)
VM632:1 {fno: 60, sno: 20, tno: 30}
undefined

iterating objects
to access all key value pairs we can use for-in loop
test.js
var nums={fno: 60, sno: 20, tno: 30}
for(key in nums){
    // console.log(key)
    // console.log(nums[key])
    console.log(key+'--->'+nums[key])
}

test.js:5 fno--->60
test.js:5 sno--->20
test.js:5 tno--->30

nested objects and arrays
inside array, we can take objects, similarly inside object we can take array
hence nesting of objects and arrays is possible

test.js
var movies=[{name:'pusha',year:2024,hero:'allu arjun'},
    {name:'daku',year:2025,hero:'balayya'},
    {name:'game changer',year:2025,hero:'ram charan'}]
console.log(movies)

(3) [{…}, {…}, {…}]0: {name: 'pusha', year: 2024, hero: 'allu arjun'}1: {name: 'daku', year: 2025, hero: 'balayya'}2: {name: 'game changer', year: 2025, hero: 'ram charan'}length: 3[[Prototype]]: Array(0)
movies[0]
{name: 'pusha', year: 2024, hero: 'allu arjun'}
movies[0].name
'pusha'

inside object we can take an array
test.js
var numbers={
    fg:[10,20,30],
    sg:[40,50,60],
    tg:[70,80,90]
}

numbers
{fg: Array(3), sg: Array(3), tg: Array(3)}
numbers.sg
(3) [40, 50, 60]
numbers.sg[1]
50
numbers.sg[2]
60

object methods
within object also can declare method

test.js
var myobj={
    A:'Apple',
    B:'Banana',
    m1:function(){
        console.log('Object method')
    }
}
myobj.m1()

this keyword: this means current object
inside object methods, if we want to access object properties then we should use this keyword

test.js
var myobj={
    A:'Apple',
    B:'Banana',
    m1:function(){
        console.log('first fruit:'+this.A)
        console.log('second fruit:'+this.B)
    }
}
myobj.m1()

first fruit:Apple
second fruit:Banana

its possible to refer already existing function as object method
function demo(){
    console.log('Demo function')
}

var movie={
    name:'spider',
    year:2018,
    hero:'mahesh',
    getInfo:demo
}

demo()

inside the demo, we can access the properties of object
test.js
function demo(){
    // console.log('Demo function')
    console.log('Movie Name:'+this.name)
    console.log('Hero Name:'+this.hero)
    console.log('Year of release:'+this.year)
}

var movie={
    name:'spider',
    year:2018,
    hero:'mahesh',
    getInfo:demo
}

movie.getInfo()

Movie Name:spider
test.js:4 Hero Name:mahesh
test.js:5 Year of release:2018

we can use named functions also
// function demo(){
//     // console.log('Demo function')
//     console.log('Movie Name:'+this.name)
//     console.log('Hero Name:'+this.hero)
//     console.log('Year of release:'+this.year)
// }

var movie={
    name:'spider',
    year:2018,
    hero:'mahesh',
    getInfo:function demo(){
        // console.log('Demo function')
        console.log('Movie Name:'+this.name)
        console.log('Hero Name:'+this.hero)
        console.log('Year of release:'+this.year)
    }
}

movie.getInfo()

note: even we are not required to use function keyword also for object methods inside object and we can declare function directly 
without key

even we can pass parameter also
test.js
var movie={
    name:'spider',
    year:2018,
    hero:'mahesh',
    getInfo(a){
        // console.log('Demo function')
        console.log('Movie Name:'+this.name)
        console.log('Hero Name:'+this.hero)
        console.log('Year of release:'+this.year)
        console.log('Rating:'+a)
    }
}

movie.getInfo(5)

Movie Name:spider
test.js:8 Hero Name:mahesh
test.js:9 Year of release:2018
test.js:10 Rating:5

Mini Application: 
var movies =[ 
{name:'pushpa', isWatched:true, isHit:true}, 
{name: 'leo', isWatched:false,isHit:true}, 
{name: 'bheemla nayak', is Watched:true, isHit:false}, 
] 

output: 
#I watched pushpa amd Movie is Hit!!! 
#I have not seen leo movie and movie is Hit!!! 
#I watched bheemla nayak and movie is Flop!!!!

test.java
var movies = [
    { name: 'pushpa', isWatched: true, isHit: true },
    { name: 'leo', isWatched: false, isHit: true },
    { name: 'bheemla nayak', isWatched: true, isHit: false }
];

movies.forEach(movie => {
    var watchStatus = movie.isWatched ? "I watched" : "I have not seen";
    var hitStatus = movie.isHit ? "Hit!!!" : "Flop!!!!";

    console.log(`# ${watchStatus} ${movie.name} and movie is ${hitStatus}`);
});


I watched pushpa and movie is Hit!!!
test.js:11 # I have not seen leo and movie is Hit!!!
test.js:11 # I watched bheemla nayak and movie is Flop!!!!
=======================================
Django Rest Framework: 

Prerequisit:Python + Django 
1. Most of the people dont know this technology. 
2. Mandatory Technology. 
   Django app without REST API(a man without hands and legs) 
3. It is very very easy technology. 
4. It is very small technology. 

Terminology: 
API 
Web API/Web Service 
REST 
REST API/RESTful Web API/Restful webservice
Django Rest Framework 

API: 
Application Programming Interface 
The main objective of API is two applications can communicate with each other. API allows external agent to communicate (Integrate and exchange information) with our application. 
In simple way: 'Method of communication between software components' 

Ex: 
Samsung mobile phone keypad 
ATM GUI pannel (withdraw, check balance) 
Internally one application is there by using GUI end user accessing that app. GUI is API

ex: by using java api a java app can communicate with python app

Note: Interface of communication between the user and app is nothing but api.
the user can be human user, an android app or desktop app

web API/web service
the interface of communication between the user and app over the web by using http is nothing but web API

java	web	web
web	api	app

ex: bookmyshow app can communicate with payment gateway app to complete our booking
ex: authentication with facebook

REST(Representational state transfer)
its an architectural style, it defines several rules/guide lines to develop web api/web service

by using REST, we can develop web API very easily in concise code 
hence REST is the most popular architecture to develop web services

RESTful API
the api which is developed by using REST architecture is nothing but RESTful API/REST API i.e, interface between the user and 
application where API implements REST architecture

Note: REST is basically an Architecture where as REST API is an API that implements REST

Django REST Framework:
its a powerful and flexible toolkit for building web API, its the most commonly used framework in python world to build web APIs
it uses all django facilities internally, like models, views, template ORM etc..

https://www.django-rest-framework.org/

ex: sangamsoft jobs
one job details share to all students(sms gateway)
how sms gateway communicate to our django app(API required)

Types of web services:
SOAP based webservices
RESTful web services

 


=============================================
1. Explain about Django architecture?
2. Explain about django project directory structure?
3. Explain about models in Django?
4. Explain the purpose of templates in Django?
5. Explain about views in django?
6.How many types of views are there in django?
7. Explain about Django ORM?
8. What is the purpose of static files in django?
9. How to configure static files inside template files of django?
10. Explain about django template language/jinja templating?
11. Explain adbout django-admin command?
12. Explain about the purpose of manage.py script?
13. Explain about django URL's?
14. Explain abt diff b/w project and app in django?
15. Explain about model inheritance and specify types ofmodel inheritance?
16. Explain the purpose signals in django?
17.What are the various built-in signals of django?
18. Explain th eimportance caching in django?
19. Explain various caching strategies of django?
20. How authentication will be performed in django?
21. Explain django request-response cycle?
22. What are various databases supported by django?
23. What is the purpose of session framework in django?
24. Explain the way of using cookies for session management in django?
25. Explain the purpose of middleware in django?
26. What is the context object in django?
27. What is the purpose of django.shortcuts.render() function?
28. Explain the need of settings.py file in django directory structure?
29. How to view all items of the model?
30. How to filter items from the model?
=================================================================================================================================

django-admin startproject django_test
cd django_test
python manage.py startapp myapp
pip install mysqlclient

django_test/settings.py
django_test/urls.py
myapp/models.py
myapp/forms.py
myapp/views.py
myapp/templates -- folder
templates/index.html
templates/login.html
templates/register.html
static
static/style.css

C:\Users\abc\Desktop\django\django_test\django_test\settings.py
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your_secret_key'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_test.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'node',
        'USER': 'root',
        'PASSWORD': '1234',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = '/static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

C:\Users\abc\Desktop\django\django_test\myapp\models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager

class MyUserManager(BaseUserManager):
    def create_user(self, email, username, password=None):
        if not email:
            raise ValueError('Users must have an email address')
        user = self.model(
            email=self.normalize_email(email),
            username=username,
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, username, password=None):
        user = self.create_user(
            email,
            password=password,
            username=username,
        )
        user.is_admin = True
        user.save(using=self._db)
        return user

class MyUser(AbstractBaseUser):
    email = models.EmailField(verbose_name='email address', max_length=255, unique=True)
    username = models.CharField(max_length=30, unique=True)
    is_active = models.BooleanField(default=True)
    is_admin = models.BooleanField(default=False)

    objects = MyUserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    def __str__(self):
        return self.email

    def has_perm(self, perm, obj=None):
        return True

    def has_module_perms(self, app_label):
        return True

    @property
    def is_staff(self):
        return self.is_admin

C:\Users\abc\Desktop\django\django_test\myapp\forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from .models import MyUser

class RegistrationForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = MyUser
        fields = ('username', 'email', 'password1', 'password2')

class LoginForm(AuthenticationForm):
    username = forms.EmailField(label='Email', max_length=255)

C:\Users\abc\Desktop\django\django_test\myapp\views.py
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth import login, authenticate, logout
from .forms import RegistrationForm, LoginForm

def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Registration successful!')
            return redirect('login')
    else:
        form = RegistrationForm()
    return render(request, 'register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            user = authenticate(username=form.cleaned_data['username'], password=form.cleaned_data['password'])
            if user is not None:
                login(request, user)
                messages.success(request, 'Login successful!')
                return redirect('index')
            else:
                messages.error(request, 'Invalid email or password')
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})

def logout_view(request):
    logout(request)
    messages.info(request, 'You have been logged out.')
    return redirect('index')

def index(request):
    return render(request, 'index.html')

C:\Users\abc\Desktop\django\django_test\django_test\urls.py
from django.contrib import admin
from django.urls import path
from myapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('register/', views.register, name='register'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
]

C:\Users\abc\Desktop\django\django_test\myapp\templates\index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Home</title>
    <link rel="stylesheet" href="{% static 'style.css' %}">
</head>
<body>
    <h1>Welcome {{ user.username if user.is_authenticated else 'Guest' }}!</h1>
    {% if user.is_authenticated %}
        <a href="{% url 'logout' %}">Logout</a>
    {% else %}
        <a href="{% url 'login' %}">Login</a>
        <a href="{% url 'register' %}">Register</a>
    {% endif %}
</body>
</html>

C:\Users\abc\Desktop\django\django_test\myapp\templates\login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login</title>
    <link rel="stylesheet" href="{% static 'style.css' %}">
</head>
<body>
    <h1>Login</h1>
    <form method="POST" action="{% url 'login' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Login</button>
    </form>
    <a href="{% url 'register' %}">Don't have an account? Register</a>
</body>
</html>

C:\Users\abc\Desktop\django\django_test\myapp\templates\register.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Register</title>
    <link rel="stylesheet" href="{% static 'style.css' %}">
</head>
<body>
    <h1>Register</h1>
    <form method="POST" action="{% url 'register' %}">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Sign Up</button>
    </form>
    <a href="{% url 'login' %}">Already have an account? Login</a>
</body>
</html>

C:\Users\abc\Desktop\django\django_test\myapp\static\style.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
}

form {
    display: flex;
    flex-direction: column;
    width: 300px;
}

form p {
    margin-bottom: 15px;
}

h1 {
    margin-bottom: 20px;
}

a {
    margin-top: 20px;
}
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
}

form {
    display: flex;
    flex-direction: column;
    width: 300px;
}

form p {
    margin-bottom: 15px;
}

h1 {
    margin-bottom: 20px;
}

a {
    margin-top: 20px;
}


Microsoft Windows [Version 10.0.18362.30]
(c) 2019 Microsoft Corporation. All rights reserved.

C:\Users\abc>cd Desktop/django

C:\Users\abc\Desktop\django>python -m venv venv

C:\Users\abc\Desktop\django>venv\Scripts\activate

(venv) C:\Users\abc\Desktop\django>pip install django
Collecting django
  Downloading Django-5.0.6-py3-none-any.whl.metadata (4.1 kB)
Collecting asgiref<4,>=3.7.0 (from django)
  Downloading asgiref-3.8.1-py3-none-any.whl.metadata (9.3 kB)
Collecting sqlparse>=0.3.1 (from django)
  Downloading sqlparse-0.5.0-py3-none-any.whl.metadata (3.9 kB)
Collecting tzdata (from django)
  Downloading tzdata-2024.1-py2.py3-none-any.whl.metadata (1.4 kB)
Downloading Django-5.0.6-py3-none-any.whl (8.2 MB)
   ---------------------------------------- 8.2/8.2 MB 50.1 kB/s eta 0:00:00
Downloading asgiref-3.8.1-py3-none-any.whl (23 kB)
Downloading sqlparse-0.5.0-py3-none-any.whl (43 kB)
   ---------------------------------------- 44.0/44.0 kB 94.0 kB/s eta 0:00:00
Downloading tzdata-2024.1-py2.py3-none-any.whl (345 kB)
   ---------------------------------------- 345.4/345.4 kB 89.4 kB/s eta 0:00:00
Installing collected packages: tzdata, sqlparse, asgiref, django
Successfully installed asgiref-3.8.1 django-5.0.6 sqlparse-0.5.0 tzdata-2024.1

[notice] A new release of pip is available: 24.0 -> 24.1.1
[notice] To update, run: python.exe -m pip install --upgrade pip

(venv) C:\Users\abc\Desktop\django>django-admin startproject django
CommandError: 'django' conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.

(venv) C:\Users\abc\Desktop\django>django-admin startproject django_test

(venv) C:\Users\abc\Desktop\django>cd django_test
python manage.py startapp myapp

C:\Users\abc\Desktop\django\django_test>venv\Scripts\activate
The system cannot find the path specified.

C:\Users\abc\Desktop\django\django_test>cd ..

C:\Users\abc\Desktop\django>venv\Scripts\activate

(venv) C:\Users\abc\Desktop\django>cd django_test

(venv) C:\Users\abc\Desktop\django\django_test>python -m django --version
5.0.6

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py makemigrations
No changes detected

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py migrate
Operations to perform:
  Apply all migrations: (none)
Running migrations:
  No migrations to apply.

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py makemigrations
SystemCheckError: System check identified some issues:

ERRORS:
?: (admin.E403) A 'django.template.backends.django.DjangoTemplates' instance must be configured in TEMPLATES in order to use the admin application.
?: (admin.E408) 'django.contrib.auth.middleware.AuthenticationMiddleware' must be in MIDDLEWARE in order to use the admin application.
?: (admin.E409) 'django.contrib.messages.middleware.MessageMiddleware' must be in MIDDLEWARE in order to use the admin application.
?: (admin.E410) 'django.contrib.sessions.middleware.SessionMiddleware' must be in MIDDLEWARE in order to use the admin application.
        HINT: Insert 'django.contrib.sessions.middleware.SessionMiddleware' before 'django.contrib.auth.middleware.AuthenticationMiddleware'.

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py makemigrations
Migrations for 'myapp':
  myapp\migrations\0002_myuser_delete_user.py
    - Create model MyUser
    - Delete model User

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, myapp, sessions
Running migrations:
  Applying myapp.0002_myuser_delete_user... OK

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py createsuperuser
Username (leave blank to use 'abc'): sai
Email address: saidevopsengg@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
July 05, 2024 - 14:47:35
Django version 5.0.6, using settings 'django_test.settings'
Starting development server at http://127.0.0.1:8000/ -- it gives an error
Quit the server with CTRL-BREAK.

fire the following link in browser http://127.0.0.1:8000/admin/ -- it takes us to page
login with the above created super user credentials

then added user chaitu -- then go to mysql and check the user added or not?


mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| node               |
| performance_schema |
| sakila             |
| sys                |
| world              |
+--------------------+
7 rows in set (0.00 sec)

mysql> use node;
Database changed
mysql>  SHOW TABLES;
+----------------------------+
| Tables_in_node             |
+----------------------------+
| auth_group                 |
| auth_group_permissions     |
| auth_permission            |
| auth_user                  |
| auth_user_groups           |
| auth_user_user_permissions |
| django_admin_log           |
| django_content_type        |
| django_migrations          |
| django_session             |
| myapp_myuser               |
| signup                     |
| user                       |
| users                      |
+----------------------------+
14 rows in set (0.00 sec)

mysql> describe auth_user;
+--------------+--------------+------+-----+---------+----------------+
| Field        | Type         | Null | Key | Default | Extra          |
+--------------+--------------+------+-----+---------+----------------+
| id           | int          | NO   | PRI | NULL    | auto_increment |
| password     | varchar(128) | NO   |     | NULL    |                |
| last_login   | datetime(6)  | YES  |     | NULL    |                |
| is_superuser | tinyint(1)   | NO   |     | NULL    |                |
| username     | varchar(150) | NO   | UNI | NULL    |                |
| first_name   | varchar(150) | NO   |     | NULL    |                |
| last_name    | varchar(150) | NO   |     | NULL    |                |
| email        | varchar(254) | NO   |     | NULL    |                |
| is_staff     | tinyint(1)   | NO   |     | NULL    |                |
| is_active    | tinyint(1)   | NO   |     | NULL    |                |
| date_joined  | datetime(6)  | NO   |     | NULL    |                |
+--------------+--------------+------+-----+---------+----------------+
11 rows in set (0.02 sec)

mysql> select * from auth_user;
+----+------------------------------------------------------------------------------------------+----------------------------+--------------+----------+------------+-----------+-------------------------+----------+-----------+----------------------------+
| id | password                                                                                 | last_login                 | is_superuser | username | first_name | last_name | email                   | is_staff | is_active | date_joined                |
+----+------------------------------------------------------------------------------------------+----------------------------+--------------+----------+------------+-----------+-------------------------+----------+-----------+----------------------------+
|  1 | pbkdf2_sha256$720000$v4wd4kDosKRBwH6lmMjMS0$NThJ/p67u78Pb5wZ4SAXZjGPtAUeEs4G4/gVo38+vBk= | 2024-07-05 10:29:03.796902 |            1 | sai      |            |           | saidevopsengg@gmail.com |        1 |         1 | 2024-07-05 09:17:14.250276 |
|  2 | pbkdf2_sha256$720000$SdrrADV5X6ydwFuhY8hRVZ$g6vP+NwzqwJ1lXm8GPTo2cPNGq+OighRUE/P8FQWw74= | NULL                       |            0 | chaitu   |            |           |                         |        0 |         1 | 2024-07-05 10:43:54.389252 |
+----+------------------------------------------------------------------------------------------+----------------------------+--------------+----------+------------+-----------+-------------------------+----------+-----------+----------------------------+
2 rows in set (0.00 sec)

mysql>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
restarting the server again then we follow below steps

Microsoft Windows [Version 10.0.18362.30]
(c) 2019 Microsoft Corporation. All rights reserved.

C:\Users\abc>cd Desktop/django

C:\Users\abc\Desktop\django>cd django_test

C:\Users\abc\Desktop\django\django_test>cd ..

C:\Users\abc\Desktop\django>venv\Scripts\activate

(venv) C:\Users\abc\Desktop\django>cd django_test

(venv) C:\Users\abc\Desktop\django\django_test>python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
July 05, 2024 - 20:28:02
Django version 5.0.6, using settings 'django_test.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

http://127.0.0.1:8000/ -- take this link and pass in the browser
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++